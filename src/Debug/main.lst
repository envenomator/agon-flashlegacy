Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED02-Nov-23     12:23:06     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",6
                           A    94    .DEFINE "quot"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 4
                           A    98    .ENDEF
                           A    99    .DEFINE "rem"
                           A   100    .VALUE 3
                           A   101    .CLASS 8
                           A   102    .TYPE 4
                           A   103    .ENDEF
                           A   104    .ENDREC "NONAME0"
                           A   105    .BEGREC "NONAME1",8
                           A   106    .DEFINE "quot"
                           A   107    .VALUE 0
                           A   108    .CLASS 8
                           A   109    .TYPE 5
                           A   110    .ENDEF
                           A   111    .DEFINE "rem"
                           A   112    .VALUE 4
                           A   113    .CLASS 8
                           A   114    .TYPE 5
                           A   115    .ENDEF
                           A   116    .ENDREC "NONAME1"
                           A   117    .BEGREC "header",6
                           A   118    .DEFINE "s"
                           A   119    .VALUE 0
                           A   120    .CLASS 11
                           A   121    .TAG "NONAME2"
                           A   122    .TYPE 8
                           A   123    .ENDEF
                           A   124    .DEFINE "x"
                           A   125    .VALUE 0
                           A   126    .CLASS 11
                           A   127    .TYPE 2
                           A   128    .ENDEF
                           A   129    .ENDREC "header"
                           A   130    .BEGREC "NONAME2",6
                           A   131    .DEFINE "ptr"
                           A   132    .VALUE 0
                           A   133    .CLASS 8
                           A   134    .TAG "header"
                           A   135    .TYPE 40
                           A   136    .ENDEF
                           A   137    .DEFINE "size"
                           A   138    .VALUE 3
                           A   139    .CLASS 8
                           A   140    .TYPE 14
                           A   141    .ENDEF
                           A   142    .ENDREC "NONAME2"
                           A   143    .BEGREC "NONAME3",51
                           A   144    .DEFINE "clock"
                           A   145    .VALUE 0
                           A   146    .CLASS 8
                           A   147    .TYPE 15
                           A   148    .ENDEF
                           A   149    .DEFINE "vpd_protocol_flags"
                           A   150    .VALUE 4
                           A   151    .CLASS 8
                           A   152    .TYPE 12
                           A   153    .ENDEF
                           A   154    .DEFINE "keyascii"
                           A   155    .VALUE 5
                           A   156    .CLASS 8
                           A   157    .TYPE 12
                           A   158    .ENDEF
                           A   159    .DEFINE "keymods"
                           A   160    .VALUE 6
                           A   161    .CLASS 8
                           A   162    .TYPE 12
                           A   163    .ENDEF
                           A   164    .DEFINE "cursorX"
                           A   165    .VALUE 7
                           A   166    .CLASS 8
                           A   167    .TYPE 12
                           A   168    .ENDEF
                           A   169    .DEFINE "cursorY"
                           A   170    .VALUE 8
                           A   171    .CLASS 8
                           A   172    .TYPE 12
                           A   173    .ENDEF
                           A   174    .DEFINE "scrchar"
                           A   175    .VALUE 9
                           A   176    .CLASS 8
                           A   177    .TYPE 12
                           A   178    .ENDEF
                           A   179    .DEFINE "scrpixel"
                           A   180    .VALUE 10
                           A   181    .CLASS 8
                           A   182    .TYPE 14
                           A   183    .ENDEF
                           A   184    .DEFINE "audioChannel"
                           A   185    .VALUE 13
                           A   186    .CLASS 8
                           A   187    .TYPE 12
                           A   188    .ENDEF
                           A   189    .DEFINE "audioSuccess"
                           A   190    .VALUE 14
                           A   191    .CLASS 8
                           A   192    .TYPE 12
                           A   193    .ENDEF
                           A   194    .DEFINE "scrwidth"
                           A   195    .VALUE 15
                           A   196    .CLASS 8
                           A   197    .TYPE 13
                           A   198    .ENDEF
                           A   199    .DEFINE "scrheight"
                           A   200    .VALUE 17
                           A   201    .CLASS 8
                           A   202    .TYPE 13
                           A   203    .ENDEF
                           A   204    .DEFINE "scrcols"
                           A   205    .VALUE 19
                           A   206    .CLASS 8
                           A   207    .TYPE 12
                           A   208    .ENDEF
                           A   209    .DEFINE "scrrows"
                           A   210    .VALUE 20
                           A   211    .CLASS 8
                           A   212    .TYPE 12
                           A   213    .ENDEF
                           A   214    .DEFINE "scrcolours"
                           A   215    .VALUE 21
                           A   216    .CLASS 8
                           A   217    .TYPE 12
                           A   218    .ENDEF
                           A   219    .DEFINE "scrpixelIndex"
                           A   220    .VALUE 22
                           A   221    .CLASS 8
                           A   222    .TYPE 12
                           A   223    .ENDEF
                           A   224    .DEFINE "keycode"
                           A   225    .VALUE 23
                           A   226    .CLASS 8
                           A   227    .TYPE 12
                           A   228    .ENDEF
                           A   229    .DEFINE "keydown"
                           A   230    .VALUE 24
                           A   231    .CLASS 8
                           A   232    .TYPE 12
                           A   233    .ENDEF
                           A   234    .DEFINE "keycount"
                           A   235    .VALUE 25
                           A   236    .CLASS 8
                           A   237    .TYPE 12
                           A   238    .ENDEF
                           A   239    .DEFINE "rtc"
                           A   240    .VALUE 26
                           A   241    .CLASS 8
                           A   242    .DIM 6
                           A   243    .TYPE 108
                           A   244    .ENDEF
                           A   245    .DEFINE "rtc_spare"
                           A   246    .VALUE 32
                           A   247    .CLASS 8
                           A   248    .DIM 2
                           A   249    .TYPE 108
                           A   250    .ENDEF
                           A   251    .DEFINE "keydelay"
                           A   252    .VALUE 34
                           A   253    .CLASS 8
                           A   254    .TYPE 13
                           A   255    .ENDEF
                           A   256    .DEFINE "keyrate"
                           A   257    .VALUE 36
                           A   258    .CLASS 8
                           A   259    .TYPE 13
                           A   260    .ENDEF
                           A   261    .DEFINE "keyled"
                           A   262    .VALUE 38
                           A   263    .CLASS 8
                           A   264    .TYPE 12
                           A   265    .ENDEF
                           A   266    .DEFINE "scrmode"
                           A   267    .VALUE 39
                           A   268    .CLASS 8
                           A   269    .TYPE 12
                           A   270    .ENDEF
                           A   271    .DEFINE "rtc_enable"
                           A   272    .VALUE 40
                           A   273    .CLASS 8
                           A   274    .TYPE 12
                           A   275    .ENDEF
                           A   276    .DEFINE "mouseX"
                           A   277    .VALUE 41
                           A   278    .CLASS 8
                           A   279    .TYPE 13
                           A   280    .ENDEF
                           A   281    .DEFINE "mouseY"
                           A   282    .VALUE 43
                           A   283    .CLASS 8
                           A   284    .TYPE 13
                           A   285    .ENDEF
                           A   286    .DEFINE "mouseButtons"
                           A   287    .VALUE 45
                           A   288    .CLASS 8
                           A   289    .TYPE 12
                           A   290    .ENDEF
                           A   291    .DEFINE "mouseWheel"
                           A   292    .VALUE 46
                           A   293    .CLASS 8
                           A   294    .TYPE 12
                           A   295    .ENDEF
                           A   296    .DEFINE "mouseXDelta"
                           A   297    .VALUE 47
                           A   298    .CLASS 8
                           A   299    .TYPE 13
                           A   300    .ENDEF
                           A   301    .DEFINE "mouseYDelta"
                           A   302    .VALUE 49
                           A   303    .CLASS 8
                           A   304    .TYPE 13
                           A   305    .ENDEF
                           A   306    .ENDREC "NONAME3"
                           A   307    .BEGREC "NONAME4",8
                           A   308    .DEFINE "baudRate"
                           A   309    .VALUE 0
                           A   310    .CLASS 8
                           A   311    .TYPE 4
                           A   312    .ENDEF
                           A   313    .DEFINE "dataBits"
                           A   314    .VALUE 3
                           A   315    .CLASS 8
                           A   316    .TYPE 12
                           A   317    .ENDEF
                           A   318    .DEFINE "stopBits"
                           A   319    .VALUE 4
                           A   320    .CLASS 8
                           A   321    .TYPE 12
                           A   322    .ENDEF
                           A   323    .DEFINE "parity"
                           A   324    .VALUE 5
                           A   325    .CLASS 8
                           A   326    .TYPE 12
                           A   327    .ENDEF
                           A   328    .DEFINE "flowcontrol"
                           A   329    .VALUE 6
                           A   330    .CLASS 8
                           A   331    .TYPE 12
                           A   332    .ENDEF
                           A   333    .DEFINE "eir"
                           A   334    .VALUE 7
                           A   335    .CLASS 8
                           A   336    .TYPE 12
                           A   337    .ENDEF
                           A   338    .ENDREC "NONAME4"
                           A   339    .BEGREC "NONAME5",15
                           A   340    .DEFINE "fs"
                           A   341    .VALUE 0
                           A   342    .CLASS 8
                           A   343    .TYPE 46
                           A   344    .ENDEF
                           A   345    .DEFINE "id"
                           A   346    .VALUE 3
                           A   347    .CLASS 8
                           A   348    .TYPE 13
                           A   349    .ENDEF
                           A   350    .DEFINE "attr"
                           A   351    .VALUE 5
                           A   352    .CLASS 8
                           A   353    .TYPE 12
                           A   354    .ENDEF
                           A   355    .DEFINE "stat"
                           A   356    .VALUE 6
                           A   357    .CLASS 8
                           A   358    .TYPE 12
                           A   359    .ENDEF
                           A   360    .DEFINE "sclust"
                           A   361    .VALUE 7
                           A   362    .CLASS 8
                           A   363    .TYPE 15
                           A   364    .ENDEF
                           A   365    .DEFINE "objsize"
                           A   366    .VALUE 11
                           A   367    .CLASS 8
                           A   368    .TYPE 15
                           A   369    .ENDEF
                           A   370    .ENDREC "NONAME5"
                           A   371    .BEGREC "NONAME6",36
                           A   372    .DEFINE "obj"
                           A   373    .VALUE 0
                           A   374    .CLASS 8
                           A   375    .TAG "NONAME5"
                           A   376    .TYPE 8
                           A   377    .ENDEF
                           A   378    .DEFINE "flag"
                           A   379    .VALUE 15
                           A   380    .CLASS 8
                           A   381    .TYPE 12
                           A   382    .ENDEF
                           A   383    .DEFINE "err"
                           A   384    .VALUE 16
                           A   385    .CLASS 8
                           A   386    .TYPE 12
                           A   387    .ENDEF
                           A   388    .DEFINE "fptr"
                           A   389    .VALUE 17
                           A   390    .CLASS 8
                           A   391    .TYPE 15
                           A   392    .ENDEF
                           A   393    .DEFINE "clust"
                           A   394    .VALUE 21
                           A   395    .CLASS 8
                           A   396    .TYPE 15
                           A   397    .ENDEF
                           A   398    .DEFINE "sect"
                           A   399    .VALUE 25
                           A   400    .CLASS 8
                           A   401    .TYPE 15
                           A   402    .ENDEF
                           A   403    .DEFINE "dir_sect"
                           A   404    .VALUE 29
                           A   405    .CLASS 8
                           A   406    .TYPE 15
                           A   407    .ENDEF
                           A   408    .DEFINE "dir_ptr"
                           A   409    .VALUE 33
                           A   410    .CLASS 8
                           A   411    .TYPE 46
                           A   412    .ENDEF
                           A   413    .ENDREC "NONAME6"
                           A   414    	SEGMENT BSS
042C74                     A   415    _errno:
042C74                     A   416    	DS	3
                           A   417    .DEFINE "errno"
                           A   418    .ALIAS "_errno"
                           A   419    .CLASS 83
                           A   420    .VALUE _errno
                           A   421    .TYPE 4
                           A   422    .ENDEF
                           A   423    	SEGMENT DATA
042251                     A   424    _flashmos:
042251 00                  A   425    	DB	0
                           A   426    .DEFINE "flashmos"
                           A   427    .ALIAS "_flashmos"
                           A   428    .CLASS 69
                           A   429    .VALUE _flashmos
                           A   430    .TYPE 12
                           A   431    .ENDEF
                           A   432    	SEGMENT BSS
042C77                     A   433    _mosfilename:
042C77                     A   434    	DS	256
                           A   435    .DEFINE "mosfilename"
                           A   436    .ALIAS "_mosfilename"
                           A   437    .CLASS 83
                           A   438    .VALUE _mosfilename
                           A   439    .DIM 256
                           A   440    .TYPE 98
                           A   441    .ENDEF
042D77                     A   442    _moscrc:
042D77                     A   443    	DS	4*1
                           A   444    .DEFINE "moscrc"
                           A   445    .ALIAS "_moscrc"
                           A   446    .CLASS 83
                           A   447    .VALUE _moscrc
                           A   448    .TYPE 15
                           A   449    .ENDEF
                           A   450    	SEGMENT DATA
042252                     A   451    _flashvdp:
042252 00                  A   452    	DB	0
                           A   453    .DEFINE "flashvdp"
                           A   454    .ALIAS "_flashvdp"
                           A   455    .CLASS 69
                           A   456    .VALUE _flashvdp
                           A   457    .TYPE 12
                           A   458    .ENDEF
                           A   459    	SEGMENT BSS
042D7B                     A   460    _vdpfilename:
042D7B                     A   461    	DS	256
                           A   462    .DEFINE "vdpfilename"
                           A   463    .ALIAS "_vdpfilename"
                           A   464    .CLASS 83
                           A   465    .VALUE _vdpfilename
                           A   466    .DIM 256
                           A   467    .TYPE 98
                           A   468    .ENDEF
042E7B                     A   469    _vdpcrc:
042E7B                     A   470    	DS	4*1
                           A   471    .DEFINE "vdpcrc"
                           A   472    .ALIAS "_vdpcrc"
                           A   473    .CLASS 83
                           A   474    .VALUE _vdpcrc
                           A   475    .TYPE 15
                           A   476    .ENDEF
                           A   477    	SEGMENT DATA
042253                     A   478    _optbatch:
042253 00                  A   479    	DB	0
                           A   480    .DEFINE "optbatch"
                           A   481    .ALIAS "_optbatch"
                           A   482    .CLASS 69
                           A   483    .VALUE _optbatch
                           A   484    .TYPE 12
                           A   485    .ENDEF
042254                     A   486    _optforce:
042254 00                  A   487    	DB	0
                           A   488    .DEFINE "optforce"
                           A   489    .ALIAS "_optforce"
                           A   490    .CLASS 69
                           A   491    .VALUE _optforce
                           A   492    .TYPE 12
                           A   493    .ENDEF
                           A   494    ;    1	/*
                           A   495    ;    2	 * Title:			Agon firmware upgra
                           A   496    ;    3	 * Author:			Jeroen Venema
                           A   497    ;    4	 * Created:			17/12/2022
                           A   498    ;    5	 * Last Updated:	02/11/2023
                           A   499    ;    6	 * 
                           A   500    ;    7	 * Modinfo:
                           A   501    ;    8	 * 17/12/2022:		Initial version
                           A   502    ;    9	 * 05/04/2022:		Changed timer to 5s
                           A   503    ;   10	 *                  Sends cls just befo
                           A   504    ;   11	 * 07/06/2023:		Included faster crc
                           A   505    ;   12	 * 14/10/2023:		VDP update code, MO
                           A   506    ;   13	 * 02/11/2023:		Batched mode, rewri
                           A   507    ;   14	 */
                           A   508    ;   15	
                           A   509    ;   16	#include <ez80.h>
                           A   510    ;   17	#include <stdio.h>
                           A   511    ;   18	#include <stdlib.h>
                           A   512    ;   19	#include <ERRNO.H>
                           A   513    ;   20	#include <ctype.h>
                           A   514    ;   21	#include "mos-interface.h"
                           A   515    ;   22	#include "flash.h"
                           A   516    ;   23	#include "agontimer.h"
                           A   517    ;   24	#include "crc32.h"
                           A   518    ;   25	#include "filesize.h"
                           A   519    ;   26	#include "./stdint.h"
                           A   520    ;   27	#include <string.h>
                           A   521    ;   28	
                           A   522    ;   29	#define UNLOCKMATCHLENGTH 9
                           A   523    ;   30	#define EXIT_FILENOTFOUND	4
                           A   524    ;   31	#define EXIT_INVALIDPARAMETER	19
                           A   525    ;   32	#define DEFAULT_MOSFIRMWARE	"MOS.bin"
                           A   526    ;   33	#define DEFAULT_VDPFIRMWARE	"firmware.b
                           A   527    ;   34	
                           A   528    ;   35	#define CMDUNKNOWN	0
                           A   529    ;   36	#define CMDALL		1
                           A   530    ;   37	#define CMDMOS		2
                           A   531    ;   38	#define CMDVDP		3
                           A   532    ;   39	#define CMDFORCE	4
                           A   533    ;   40	#define CMDBATCH	5
                           A   534    ;   41	
                           A   535    ;   42	int errno; // needed by standard librar
                           A   536    ;   43	enum states{firmware,retry,systemreset}
                           A   537    ;   44	
                           A   538    ;   45	bool		flashmos = false;
                           A   539    ;   46	char		mosfilename[256];
                           A   540    ;   47	uint32_t	moscrc;
                           A   541    ;   48	bool		flashvdp = false;
                           A   542    ;   49	char		vdpfilename[256];
                           A   543    ;   50	uint32_t	vdpcrc;
                           A   544    ;   51	bool		optbatch = false;
                           A   545    ;   52	bool		optforce = false;		// 
                           A   546    	SEGMENT CODE
                           A   547    ;   53	
                           A   548    ;   54	// separate putch function that doesn't
                           A   549    ;   55	// UART0 initialization done by MOS fir
                           A   550    ;   56	// This utility doesn't run without MOS
                           A   551    ;   57	int putch(int c)
                           A   552    ;   58	{
0400E5                     A   553    _putch:
                           A   554    .DEFINE "_putch"
                           A   555    
                           A   556    .VALUE _putch
                           A   557    
                           A   558    .CLASS 2
                           A   559    
                           A   560    .TYPE 68
                           A   561    
                           A   562    .ENDEF
                           A   563    
                           A   564    .BEGFUNC "putch",58,"_putch"
                           A   565    
                           A   566    .LINE 58
                           A   567    
                           A   568    .DEFINE "c"
                           A   569    
                           A   570    .CLASS 65
                           A   571    
                           A   572    .VALUE 6
                           A   573    
                           A   574    .TYPE 4
                           A   575    
0400E5 DDE5                A   576    	PUSH	IX
0400E7 DD210000 00         A   577    	LD	IX,0
0400EC DD39                A   578    	ADD	IX,SP
                           A   579    .ENDEF
                           A   580    
                           A   581    ;   59		UINT8 lsr,temt;
                           A   582    ;   60		
                           A   583    ;   61		while((UART0_LSR & 0x40) == 0);
0400EE                     A   584    L_1:
                           A   585    .LINE 61
                           A   586    
0400EE ED38C5              A   587    	IN0	A,(197)
0400F1 E640                A   588    	AND	A,%40
0400F3 B7ED62              A   589    	UEXT	HL
0400F6 6F                  A   590    	LD	L,A
0400F7 CD 33 1C 04         A   591    	CALL	__icmpzero
0400FB 28 F1               A   592    	JR	Z,L_1
                           A   593    ;   62		UART0_THR = c;
                           A   594    .LINE 62
                           A   595    
0400FD DD7E06              A   596    	LD	A,(IX+%6)
040100 ED39C0              A   597    	OUT0	(192),A
                           A   598    ;   63		return c;
                           A   599    .LINE 63
                           A   600    
040103 DD2706              A   601    	LD	HL,(IX+%6)
                           A   602    ;   64	}
                           A   603    .LINE 64
                           A   604    
040106 DDF9                A   605    	LD	SP,IX
040108 DDE1                A   606    	POP	IX
04010A C9                  A   607    	RET	
                           A   608    
                           A   609    
                           A   610    ;**************************** _putch **********
                           A   611    ;Name                         Addr/Register   S
                           A   612    ;c                                     IX+6    
                           A   613    
                           A   614    
                           A   615    ; Stack Frame Size: 9 (bytes)
                           A   616    ;       Spill Code: 0 (instruction)
                           A   617    
                           A   618    
                           A   619    .ENDFUNC "putch",64,"_putch"
                           A   620    ;   65	
                           A   621    ;   66	void beep(unsigned int number) {
04010B                     A   622    _beep:
                           A   623    .DEFINE "_beep"
                           A   624    
                           A   625    .VALUE _beep
                           A   626    
                           A   627    .CLASS 2
                           A   628    
                           A   629    .TYPE 65
                           A   630    
                           A   631    .ENDEF
                           A   632    
                           A   633    .BEGFUNC "beep",66,"_beep"
                           A   634    
                           A   635    .LINE 66
                           A   636    
                           A   637    .DEFINE "number"
                           A   638    
                           A   639    .CLASS 65
                           A   640    
                           A   641    .VALUE 6
                           A   642    
                           A   643    .TYPE 14
                           A   644    
                           A   645    .ENDEF
                           A   646    
04010B DDE5                A   647    	PUSH	IX
04010D DD210000 00         A   648    	LD	IX,0
040112 DD39                A   649    	ADD	IX,SP
                           A   650    ;   67		while(number--) {
                           A   651    .LINE 67
                           A   652    
040114 18 14               A   653    	JR	L_5
040116                     A   654    L_6:
                           A   655    ;   68			putch(7);
                           A   656    .LINE 68
                           A   657    
040116 01070000            A   658    	LD	BC,7
04011A C5                  A   659    	PUSH	BC
04011B CD E5 00 04         A   660    	CALL	_putch
04011F C1                  A   661    	POP	BC
                           A   662    ;   69			delayms(250);
                           A   663    .LINE 69
                           A   664    
040120 01FA0000            A   665    	LD	BC,250
040124 C5                  A   666    	PUSH	BC
040125 CD A2 13 04         A   667    	CALL	_delayms
040129 C1                  A   668    	POP	BC
                           A   669    ;   70		}
04012A                     A   670    L_5:
                           A   671    .LINE 70
                           A   672    
04012A DD2706              A   673    	LD	HL,(IX+%6)
04012D DD3106              A   674    	LD	IY,(IX+%6)
040130 ED33FF              A   675    	LEA	IY,IY+%FFFFFFFF
040133 DD3E06              A   676    	LD	(IX+%6),IY
040136 CD 33 1C 04         A   677    	CALL	__icmpzero
04013A 20 DA               A   678    	JR	NZ,L_6
                           A   679    ;   71	}
                           A   680    .LINE 71
                           A   681    
04013C DDF9                A   682    	LD	SP,IX
04013E DDE1                A   683    	POP	IX
040140 C9                  A   684    	RET	
                           A   685    
                           A   686    
                           A   687    ;**************************** _beep ***********
                           A   688    ;Name                         Addr/Register   S
                           A   689    ;_delayms                            IMPORT  --
                           A   690    ;_putch                              IMPORT  --
                           A   691    ;number                                IX+6    
                           A   692    
                           A   693    
                           A   694    ; Stack Frame Size: 9 (bytes)
                           A   695    ;       Spill Code: 0 (instruction)
                           A   696    
                           A   697    
                           A   698    .ENDFUNC "beep",71,"_beep"
                           A   699    ;   72	
                           A   700    ;   73	uint8_t getCharAt(uint16_t x, uint16_t 
040141                     A   701    _getCharAt:
                           A   702    .DEFINE "_getCharAt"
                           A   703    
                           A   704    .VALUE _getCharAt
                           A   705    
                           A   706    .CLASS 2
                           A   707    
                           A   708    .TYPE 76
                           A   709    
                           A   710    .ENDEF
                           A   711    
                           A   712    .BEGFUNC "getCharAt",73,"_getCharAt"
                           A   713    
                           A   714    .LINE 73
                           A   715    
                           A   716    .DEFINE "x"
                           A   717    
                           A   718    .CLASS 65
                           A   719    
                           A   720    .VALUE 6
                           A   721    
                           A   722    .TYPE 13
                           A   723    
                           A   724    .ENDEF
                           A   725    
                           A   726    .DEFINE "y"
                           A   727    
                           A   728    .CLASS 65
                           A   729    
                           A   730    .VALUE 9
                           A   731    
                           A   732    .TYPE 13
                           A   733    
                           A   734    .ENDEF
                           A   735    
                           A   736    .DEFINE "sysvars"
                           A   737    
                           A   738    .CLASS 65
                           A   739    
                           A   740    .VALUE -3
                           A   741    
                           A   742    .TAG "NONAME3"
                           A   743    
                           A   744    .TYPE 40
                           A   745    
                           A   746    .ENDEF
                           A   747    
040141 DDE5                A   748    	PUSH	IX
040143 DD210000 00         A   749    	LD	IX,0
040148 DD39                A   750    	ADD	IX,SP
04014A C5                  A   751    	PUSH	BC
                           A   752    ;   74		sysvar_t *sysvars = getsysvars();
                           A   753    .LINE 74
                           A   754    
04014B CD C6 11 04         A   755    	CALL	_getsysvars
04014F DD2FFD              A   756    	LD	(IX+%FFFFFFFD),HL
                           A   757    ;   75		delayms(20);
                           A   758    .LINE 75
                           A   759    
040152 01140000            A   760    	LD	BC,20
040156 C5                  A   761    	PUSH	BC
040157 CD A2 13 04         A   762    	CALL	_delayms
04015B C1                  A   763    	POP	BC
                           A   764    ;   76		putch(23);
                           A   765    .LINE 76
                           A   766    
04015C 01170000            A   767    	LD	BC,23
040160 C5                  A   768    	PUSH	BC
040161 CD E5 00 04         A   769    	CALL	_putch
040165 C1                  A   770    	POP	BC
                           A   771    ;   77		putch(0);
                           A   772    .LINE 77
                           A   773    
040166 01000000            A   774    	LD	BC,0
04016A C5                  A   775    	PUSH	BC
04016B CD E5 00 04         A   776    	CALL	_putch
04016F C1                  A   777    	POP	BC
                           A   778    ;   78		putch(131);
                           A   779    .LINE 78
                           A   780    
040170 01830000            A   781    	LD	BC,131
040174 C5                  A   782    	PUSH	BC
040175 CD E5 00 04         A   783    	CALL	_putch
040179 C1                  A   784    	POP	BC
                           A   785    ;   79		putch(x & 0xFF);
                           A   786    .LINE 79
                           A   787    
04017A DD0706              A   788    	LD	BC,(IX+%6)
04017D CD 70 18 04         A   789    	CALL	__stoiu
040181 7D                  A   790    	LD	A,L
040182 B7ED62              A   791    	UEXT	HL
040185 6F                  A   792    	LD	L,A
040186 E5                  A   793    	PUSH	HL
040187 CD E5 00 04         A   794    	CALL	_putch
04018B C1                  A   795    	POP	BC
                           A   796    ;   80		putch((x >> 8) & 0xFF);
                           A   797    .LINE 80
                           A   798    
04018C DD0706              A   799    	LD	BC,(IX+%6)
04018F CD 70 18 04         A   800    	CALL	__stoiu
040193 3E08                A   801    	LD	A,%8
040195 CD A5 16 04         A   802    	CALL	__ishrs_b
040199 7D                  A   803    	LD	A,L
04019A B7ED62              A   804    	UEXT	HL
04019D 6F                  A   805    	LD	L,A
04019E E5                  A   806    	PUSH	HL
04019F CD E5 00 04         A   807    	CALL	_putch
0401A3 C1                  A   808    	POP	BC
                           A   809    ;   81		putch(y & 0xFF);
                           A   810    .LINE 81
                           A   811    
0401A4 DD0709              A   812    	LD	BC,(IX+%9)
0401A7 CD 70 18 04         A   813    	CALL	__stoiu
0401AB 7D                  A   814    	LD	A,L
0401AC B7ED62              A   815    	UEXT	HL
0401AF 6F                  A   816    	LD	L,A
0401B0 E5                  A   817    	PUSH	HL
0401B1 CD E5 00 04         A   818    	CALL	_putch
0401B5 C1                  A   819    	POP	BC
                           A   820    ;   82		putch((y >> 8) & 0xFF);
                           A   821    .LINE 82
                           A   822    
0401B6 DD0709              A   823    	LD	BC,(IX+%9)
0401B9 CD 70 18 04         A   824    	CALL	__stoiu
0401BD 3E08                A   825    	LD	A,%8
0401BF CD A5 16 04         A   826    	CALL	__ishrs_b
0401C3 7D                  A   827    	LD	A,L
0401C4 B7ED62              A   828    	UEXT	HL
0401C7 6F                  A   829    	LD	L,A
0401C8 E5                  A   830    	PUSH	HL
0401C9 CD E5 00 04         A   831    	CALL	_putch
0401CD C1                  A   832    	POP	BC
                           A   833    ;   83		delayms(100);
                           A   834    .LINE 83
                           A   835    
0401CE 01640000            A   836    	LD	BC,100
0401D2 C5                  A   837    	PUSH	BC
0401D3 CD A2 13 04         A   838    	CALL	_delayms
0401D7 C1                  A   839    	POP	BC
                           A   840    ;   84		return sysvars->scrchar;
                           A   841    .LINE 84
                           A   842    
0401D8 DD31FD              A   843    	LD	IY,(IX+%FFFFFFFD)
0401DB FD7E09              A   844    	LD	A,(IY+%9)
                           A   845    ;   85	}
                           A   846    .LINE 85
                           A   847    
0401DE DDF9                A   848    	LD	SP,IX
0401E0 DDE1                A   849    	POP	IX
0401E2 C9                  A   850    	RET	
                           A   851    
                           A   852    
                           A   853    ;**************************** _getCharAt ******
                           A   854    ;Name                         Addr/Register   S
                           A   855    ;_putch                              IMPORT  --
                           A   856    ;_delayms                            IMPORT  --
                           A   857    ;_getsysvars                         IMPORT  --
                           A   858    ;sysvars                               IX-3    
                           A   859    ;y                                     IX+9    
                           A   860    ;x                                     IX+6    
                           A   861    
                           A   862    
                           A   863    ; Stack Frame Size: 15 (bytes)
                           A   864    ;       Spill Code: 0 (instruction)
                           A   865    
                           A   866    
                           A   867    .ENDFUNC "getCharAt",85,"_getCharAt"
                           A   868    ;   86	
                           A   869    ;   87	bool vdp_ota_present(void) {
0401E3                     A   870    _vdp_ota_present:
                           A   871    .DEFINE "_vdp_ota_present"
                           A   872    
                           A   873    .VALUE _vdp_ota_present
                           A   874    
                           A   875    .CLASS 2
                           A   876    
                           A   877    .TYPE 76
                           A   878    
                           A   879    .ENDEF
                           A   880    
                           A   881    .BEGFUNC "vdp_ota_present",87,"_vdp_ota_present
                           A   882    
                           A   883    .LINE 87
                           A   884    
                           A   885    .DEFINE "n"
                           A   886    
                           A   887    .CLASS 65
                           A   888    
                           A   889    .VALUE -2
                           A   890    
                           A   891    .TYPE 13
                           A   892    
                           A   893    .ENDEF
                           A   894    
                           A   895    .DEFINE "test"
                           A   896    
                           A   897    .CLASS 65
                           A   898    
                           A   899    .VALUE -11
                           A   900    
                           A   901    .DIM 9
                           A   902    
                           A   903    .TYPE 98
                           A   904    
                           A   905    .ENDEF
                           A   906    
0401E3 DDE5                A   907    	PUSH	IX
0401E5 DD210000 00         A   908    	LD	IX,0
0401EA DD39                A   909    	ADD	IX,SP
0401EC ED22F5              A   910    	LEA	HL,IX+%FFFFFFF5
0401EF F9                  A   911    	LD	SP,HL
                           A   912    ;   88		char test[UNLOCKMATCHLENGTH];
                           A   913    ;   89		uint16_t n;
                           A   914    ;   90	
                           A   915    ;   91		putch(23);
                           A   916    .LINE 91
                           A   917    
0401F0 01170000            A   918    	LD	BC,23
0401F4 C5                  A   919    	PUSH	BC
0401F5 CD E5 00 04         A   920    	CALL	_putch
0401F9 C1                  A   921    	POP	BC
                           A   922    ;   92		putch(0);
                           A   923    .LINE 92
                           A   924    
0401FA 01000000            A   925    	LD	BC,0
0401FE C5                  A   926    	PUSH	BC
0401FF CD E5 00 04         A   927    	CALL	_putch
040203 C1                  A   928    	POP	BC
                           A   929    ;   93		putch(0xA1);
                           A   930    .LINE 93
                           A   931    
040204 01A10000            A   932    	LD	BC,161
040208 C5                  A   933    	PUSH	BC
040209 CD E5 00 04         A   934    	CALL	_putch
04020D C1                  A   935    	POP	BC
                           A   936    ;   94		putch(0);
                           A   937    .LINE 94
                           A   938    
04020E 01000000            A   939    	LD	BC,0
040212 C5                  A   940    	PUSH	BC
040213 CD E5 00 04         A   941    	CALL	_putch
040217 C1                  A   942    	POP	BC
                           A   943    ;   95		printf("unlock");
                           A   944    .LINE 95
                           A   945    
040218 01 76 18 04         A   946    	LD	BC,___print_uputch
04021C ED43 04 28 04       A   947    	LD	(___print_xputch),BC
040221 01 87 28 04         A   948    	LD	BC,L__5
040225 C5                  A   949    	PUSH	BC
040226 CD 05 17 04         A   950    	CALL	___print_sendstring
04022A C1                  A   951    	POP	BC
                           A   952    ;   96	
                           A   953    ;   97		for(n = 0; n < UNLOCKMATCHLENGTH+1;
                           A   954    .LINE 97
                           A   955    
04022B DD36FE00            A   956    	LD	(IX+%FFFFFFFE),%0
04022F DD36FF00            A   957    	LD	(IX+%FFFFFFFF),%0
040233 18 2A               A   958    	JR	L_12
040235                     A   959    L_10:
040235 01030000            A   960    	LD	BC,3
040239 C5                  A   961    	PUSH	BC
04023A DD31FE              A   962    	LD	IY,(IX+%FFFFFFFE)
04023D ED0308              A   963    	LEA	BC,IY+%8
040240 C5                  A   964    	PUSH	BC
040241 CD 41 01 04         A   965    	CALL	_getCharAt
040245 C1                  A   966    	POP	BC
040246 C1                  A   967    	POP	BC
040247 DD07FE              A   968    	LD	BC,(IX+%FFFFFFFE)
04024A CD 70 18 04         A   969    	CALL	__stoiu
04024E E5C1                A   970    	LD	BC,HL
040250 ED22F5              A   971    	LEA	HL,IX+%FFFFFFF5
040253 09                  A   972    	ADD	HL,BC
040254 77                  A   973    	LD	(HL),A
040255 DD27FE              A   974    	LD	HL,(IX+%FFFFFFFE)
040258 23                  A   975    	INC	HL
040259 DD75FE              A   976    	LD	(IX+%FFFFFFFE),L
04025C DD74FF              A   977    	LD	(IX+%FFFFFFFF),H
04025F                     A   978    L_12:
04025F 49010A00            A   979    	LD.LIS	BC,10
040263 DD27FE              A   980    	LD	HL,(IX+%FFFFFFFE)
040266 B7                  A   981    	OR	A,A
040267 40ED42              A   982    	SBC.SIS	HL,BC
04026A 38 C9               A   983    	JR	C,L_10
                           A   984    ;   98		// 3 - line on-screen
                           A   985    ;   99		if(memcmp(test, "unlocked!",UNLOCKM
                           A   986    .LINE 99
                           A   987    
04026C 01090000            A   988    	LD	BC,9
040270 C5                  A   989    	PUSH	BC
040271 01 8E 28 04         A   990    	LD	BC,L__7
040275 C5                  A   991    	PUSH	BC
040276 ED65F5              A   992    	PEA	IX+%FFFFFFF5
040279 CD 09 1C 04         A   993    	CALL	_memcmp
04027D C1                  A   994    	POP	BC
04027E C1                  A   995    	POP	BC
04027F C1                  A   996    	POP	BC
040280 CD 33 1C 04         A   997    	CALL	__icmpzero
040284 20 04               A   998    	JR	NZ,L_14
040286 3E01                A   999    	LD	A,%1
040288 18 01               A  1000    	JR	L_16
                           A  1001    ;  100		else return false;
04028A                     A  1002    L_14:
                           A  1003    .LINE 100
                           A  1004    
04028A AF                  A  1005    	XOR	A,A
                           A  1006    ;  101	}
04028B                     A  1007    L_16:
                           A  1008    .LINE 101
                           A  1009    
04028B DDF9                A  1010    	LD	SP,IX
04028D DDE1                A  1011    	POP	IX
04028F C9                  A  1012    	RET	
                           A  1013    
                           A  1014    
                           A  1015    ;**************************** _vdp_ota_present 
                           A  1016    ;Name                         Addr/Register   S
                           A  1017    ;_memcmp                             IMPORT  --
                           A  1018    ;___print_sendstring                 IMPORT  --
                           A  1019    ;___print_xputch                     IMPORT    
                           A  1020    ;___print_uputch                     IMPORT  --
                           A  1021    ;_putch                              IMPORT  --
                           A  1022    ;test                                 IX-11    
                           A  1023    ;n                                     IX-2    
                           A  1024    
                           A  1025    
                           A  1026    ; Stack Frame Size: 17 (bytes)
                           A  1027    ;       Spill Code: 0 (instruction)
                           A  1028    
                           A  1029    
                           A  1030    .ENDFUNC "vdp_ota_present",101,"_vdp_ota_presen
                           A  1031    	SEGMENT STRSECT
042887                     A  1032    L__5:
042887 756E6C6F 636B       A  1033    	DB	"unlock"
04288D 00                  A  1034    	DB	0
04288E                     A  1035    L__7:
04288E 756E6C6F 636B6564   A  1036    	DB	"unlocked!"
042896 21 
042897 00                  A  1037    	DB	0
                           A  1038    	SEGMENT DATA
042255                     A  1039    _mos_magicnumbers:
042255 F3                  A  1040    	DB	243
042256 ED                  A  1041    	DB	237
042257 7D                  A  1042    	DB	125
042258 5B                  A  1043    	DB	91
042259 C3                  A  1044    	DB	195
                           A  1045    .DEFINE "mos_magicnumbers"
                           A  1046    .ALIAS "_mos_magicnumbers"
                           A  1047    .CLASS 69
                           A  1048    .VALUE _mos_magicnumbers
                           A  1049    .DIM 5
                           A  1050    .TYPE 108
                           A  1051    .ENDEF
                           A  1052    ;  102	
                           A  1053    ;  103	uint8_t mos_magicnumbers[] = {0xF3, 0xE
                           A  1054    	SEGMENT CODE
                           A  1055    ;  104	#define MOS_MAGICLENGTH 5
                           A  1056    ;  105	bool containsMosHeader(uint8_t *filesta
040290                     A  1057    _containsMosHeader:
                           A  1058    .DEFINE "_containsMosHeader"
                           A  1059    
                           A  1060    .VALUE _containsMosHeader
                           A  1061    
                           A  1062    .CLASS 2
                           A  1063    
                           A  1064    .TYPE 76
                           A  1065    
                           A  1066    .ENDEF
                           A  1067    
                           A  1068    .BEGFUNC "containsMosHeader",105,"_containsMosH
                           A  1069    
                           A  1070    .LINE 105
                           A  1071    
                           A  1072    .DEFINE "filestart"
                           A  1073    
                           A  1074    .CLASS 65
                           A  1075    
                           A  1076    .VALUE 6
                           A  1077    
                           A  1078    .TYPE 44
                           A  1079    
                           A  1080    .ENDEF
                           A  1081    
                           A  1082    .DEFINE "n"
                           A  1083    
                           A  1084    .CLASS 65
                           A  1085    
                           A  1086    .VALUE -1
                           A  1087    
                           A  1088    .TYPE 12
                           A  1089    
                           A  1090    .ENDEF
                           A  1091    
                           A  1092    .DEFINE "match"
                           A  1093    
                           A  1094    .CLASS 65
                           A  1095    
                           A  1096    .VALUE -2
                           A  1097    
                           A  1098    .TYPE 12
                           A  1099    
                           A  1100    .ENDEF
                           A  1101    
040290 DDE5                A  1102    	PUSH	IX
040292 DD210000 00         A  1103    	LD	IX,0
040297 DD39                A  1104    	ADD	IX,SP
040299 3B                  A  1105    	DEC	SP
04029A 3B                  A  1106    	DEC	SP
                           A  1107    ;  106		uint8_t n;
                           A  1108    ;  107		bool match = true;
                           A  1109    .LINE 107
                           A  1110    
04029B DD36FE01            A  1111    	LD	(IX+%FFFFFFFE),%1
                           A  1112    ;  108	
                           A  1113    ;  109		for(n = 0; n < MOS_MAGICLENGTH; n++
                           A  1114    .LINE 109
                           A  1115    
04029F DD36FF00            A  1116    	LD	(IX+%FFFFFFFF),%0
0402A3 18 27               A  1117    	JR	L_21
0402A5                     A  1118    L_19:
0402A5 DD7EFF              A  1119    	LD	A,(IX+%FFFFFFFF)
0402A8 B7ED62              A  1120    	UEXT	HL
0402AB 6F                  A  1121    	LD	L,A
0402AC 01 55 22 04         A  1122    	LD	BC,_mos_magicnumbers
0402B0 09                  A  1123    	ADD	HL,BC
0402B1 E5FDE1              A  1124    	LD	IY,HL
0402B4 DD7EFF              A  1125    	LD	A,(IX+%FFFFFFFF)
0402B7 B7ED62              A  1126    	UEXT	HL
0402BA 6F                  A  1127    	LD	L,A
0402BB DD0706              A  1128    	LD	BC,(IX+%6)
0402BE 09                  A  1129    	ADD	HL,BC
0402BF FD7E00              A  1130    	LD	A,(IY)
0402C2 BE                  A  1131    	CP	A,(HL)
0402C3 28 04               A  1132    	JR	Z,L_20
0402C5 DD36FE00            A  1133    	LD	(IX+%FFFFFFFE),%0
0402C9                     A  1134    L_20:
0402C9 DD34FF              A  1135    	INC	(IX+%FFFFFFFF)
0402CC                     A  1136    L_21:
0402CC DD7EFF              A  1137    	LD	A,(IX+%FFFFFFFF)
0402CF FE05                A  1138    	CP	A,%5
0402D1 38 D2               A  1139    	JR	C,L_19
                           A  1140    ;  110		return match;
                           A  1141    .LINE 110
                           A  1142    
0402D3 DD7EFE              A  1143    	LD	A,(IX+%FFFFFFFE)
                           A  1144    ;  111	}
                           A  1145    .LINE 111
                           A  1146    
0402D6 DDF9                A  1147    	LD	SP,IX
0402D8 DDE1                A  1148    	POP	IX
0402DA C9                  A  1149    	RET	
                           A  1150    
                           A  1151    
                           A  1152    ;**************************** _containsMosHeade
                           A  1153    ;Name                         Addr/Register   S
                           A  1154    ;_mos_magicnumbers                   STATIC    
                           A  1155    ;match                                 IX-2    
                           A  1156    ;n                                     IX-1    
                           A  1157    ;filestart                             IX+6    
                           A  1158    
                           A  1159    
                           A  1160    ; Stack Frame Size: 11 (bytes)
                           A  1161    ;       Spill Code: 0 (instruction)
                           A  1162    
                           A  1163    
                           A  1164    .ENDFUNC "containsMosHeader",111,"_containsMosH
                           A  1165    	SEGMENT DATA
04225A                     A  1166    _esp32_magicnumbers:
04225A 32                  A  1167    	DB	50
04225B 54                  A  1168    	DB	84
04225C CD                  A  1169    	DB	205
04225D AB                  A  1170    	DB	171
                           A  1171    .DEFINE "esp32_magicnumbers"
                           A  1172    .ALIAS "_esp32_magicnumbers"
                           A  1173    .CLASS 69
                           A  1174    .VALUE _esp32_magicnumbers
                           A  1175    .DIM 4
                           A  1176    .TYPE 108
                           A  1177    .ENDEF
                           A  1178    ;  112	
                           A  1179    ;  113	uint8_t esp32_magicnumbers[] = {0x32, 0
                           A  1180    	SEGMENT CODE
                           A  1181    ;  114	#define ESP32_MAGICLENGTH 4
                           A  1182    ;  115	#define ESP32_MAGICSTART 0x20
                           A  1183    ;  116	bool containsESP32Header(uint8_t *files
0402DB                     A  1184    _containsESP32Header:
                           A  1185    .DEFINE "_containsESP32Header"
                           A  1186    
                           A  1187    .VALUE _containsESP32Header
                           A  1188    
                           A  1189    .CLASS 2
                           A  1190    
                           A  1191    .TYPE 76
                           A  1192    
                           A  1193    .ENDEF
                           A  1194    
                           A  1195    .BEGFUNC "containsESP32Header",116,"_containsES
                           A  1196    
                           A  1197    .LINE 116
                           A  1198    
                           A  1199    .DEFINE "filestart"
                           A  1200    
                           A  1201    .CLASS 65
                           A  1202    
                           A  1203    .VALUE 6
                           A  1204    
                           A  1205    .TYPE 44
                           A  1206    
                           A  1207    .ENDEF
                           A  1208    
                           A  1209    .DEFINE "n"
                           A  1210    
                           A  1211    .CLASS 65
                           A  1212    
                           A  1213    .VALUE -1
                           A  1214    
                           A  1215    .TYPE 12
                           A  1216    
                           A  1217    .ENDEF
                           A  1218    
                           A  1219    .DEFINE "match"
                           A  1220    
                           A  1221    .CLASS 65
                           A  1222    
                           A  1223    .VALUE -2
                           A  1224    
                           A  1225    .TYPE 12
                           A  1226    
                           A  1227    .ENDEF
                           A  1228    
0402DB DDE5                A  1229    	PUSH	IX
0402DD DD210000 00         A  1230    	LD	IX,0
0402E2 DD39                A  1231    	ADD	IX,SP
0402E4 3B                  A  1232    	DEC	SP
0402E5 3B                  A  1233    	DEC	SP
                           A  1234    ;  117		uint8_t n;
                           A  1235    ;  118		bool match = true;
                           A  1236    .LINE 118
                           A  1237    
0402E6 DD36FE01            A  1238    	LD	(IX+%FFFFFFFE),%1
                           A  1239    ;  119	
                           A  1240    ;  120		filestart += ESP32_MAGICSTART; // s
                           A  1241    .LINE 120
                           A  1242    
0402EA DD3106              A  1243    	LD	IY,(IX+%6)
0402ED ED3320              A  1244    	LEA	IY,IY+%20
0402F0 DD3E06              A  1245    	LD	(IX+%6),IY
                           A  1246    ;  121		for(n = 0; n < ESP32_MAGICLENGTH; n
                           A  1247    .LINE 121
                           A  1248    
0402F3 DD36FF00            A  1249    	LD	(IX+%FFFFFFFF),%0
0402F7 18 27               A  1250    	JR	L_28
0402F9                     A  1251    L_26:
                           A  1252    ;  122			if(esp32_magicnumbers[n] != fil
                           A  1253    .LINE 122
                           A  1254    
0402F9 DD7EFF              A  1255    	LD	A,(IX+%FFFFFFFF)
0402FC B7ED62              A  1256    	UEXT	HL
0402FF 6F                  A  1257    	LD	L,A
040300 01 5A 22 04         A  1258    	LD	BC,_esp32_magicnumbers
040304 09                  A  1259    	ADD	HL,BC
040305 E5FDE1              A  1260    	LD	IY,HL
040308 DD7EFF              A  1261    	LD	A,(IX+%FFFFFFFF)
04030B B7ED62              A  1262    	UEXT	HL
04030E 6F                  A  1263    	LD	L,A
04030F DD0706              A  1264    	LD	BC,(IX+%6)
040312 09                  A  1265    	ADD	HL,BC
040313 FD7E00              A  1266    	LD	A,(IY)
040316 BE                  A  1267    	CP	A,(HL)
040317 28 04               A  1268    	JR	Z,L_27
040319 DD36FE00            A  1269    	LD	(IX+%FFFFFFFE),%0
                           A  1270    ;  123		}
04031D                     A  1271    L_27:
                           A  1272    .LINE 123
                           A  1273    
04031D DD34FF              A  1274    	INC	(IX+%FFFFFFFF)
040320                     A  1275    L_28:
040320 DD7EFF              A  1276    	LD	A,(IX+%FFFFFFFF)
040323 FE04                A  1277    	CP	A,%4
040325 38 D2               A  1278    	JR	C,L_26
                           A  1279    ;  124		return match;
                           A  1280    .LINE 124
                           A  1281    
040327 DD7EFE              A  1282    	LD	A,(IX+%FFFFFFFE)
                           A  1283    ;  125	}
                           A  1284    .LINE 125
                           A  1285    
04032A DDF9                A  1286    	LD	SP,IX
04032C DDE1                A  1287    	POP	IX
04032E C9                  A  1288    	RET	
                           A  1289    
                           A  1290    
                           A  1291    ;**************************** _containsESP32Hea
                           A  1292    ;Name                         Addr/Register   S
                           A  1293    ;_esp32_magicnumbers                 STATIC    
                           A  1294    ;match                                 IX-2    
                           A  1295    ;n                                     IX-1    
                           A  1296    ;filestart                             IX+6    
                           A  1297    
                           A  1298    
                           A  1299    ; Stack Frame Size: 11 (bytes)
                           A  1300    ;       Spill Code: 0 (instruction)
                           A  1301    
                           A  1302    
                           A  1303    .ENDFUNC "containsESP32Header",125,"_containsES
                           A  1304    ;  126	
                           A  1305    ;  127	void print_version(void) {
04032F                     A  1306    _print_version:
                           A  1307    .DEFINE "_print_version"
                           A  1308    
                           A  1309    .VALUE _print_version
                           A  1310    
                           A  1311    .CLASS 2
                           A  1312    
                           A  1313    .TYPE 65
                           A  1314    
                           A  1315    .ENDEF
                           A  1316    
                           A  1317    .BEGFUNC "print_version",127,"_print_version"
                           A  1318    
04032F DDE5                A  1319    	PUSH	IX
040331 DD210000 00         A  1320    	LD	IX,0
040336 DD39                A  1321    	ADD	IX,SP
                           A  1322    ;  128		printf("Agon firmware update utilit
                           A  1323    .LINE 128
                           A  1324    
040338 01 76 18 04         A  1325    	LD	BC,___print_uputch
04033C ED43 04 28 04       A  1326    	LD	(___print_xputch),BC
040341 01 98 28 04         A  1327    	LD	BC,L__16
040345 C5                  A  1328    	PUSH	BC
040346 CD 05 17 04         A  1329    	CALL	___print_sendstring
04034A C1                  A  1330    	POP	BC
                           A  1331    ;  129	}
                           A  1332    .LINE 129
                           A  1333    
04034B DDF9                A  1334    	LD	SP,IX
04034D DDE1                A  1335    	POP	IX
04034F C9                  A  1336    	RET	
                           A  1337    
                           A  1338    
                           A  1339    ;**************************** _print_version **
                           A  1340    ;Name                         Addr/Register   S
                           A  1341    ;___print_sendstring                 IMPORT  --
                           A  1342    ;___print_xputch                     IMPORT    
                           A  1343    ;___print_uputch                     IMPORT  --
                           A  1344    
                           A  1345    
                           A  1346    ; Stack Frame Size: 6 (bytes)
                           A  1347    ;       Spill Code: 0 (instruction)
                           A  1348    
                           A  1349    
                           A  1350    .ENDFUNC "print_version",129,"_print_version"
                           A  1351    	SEGMENT STRSECT
042898                     A  1352    L__16:
042898 41676F6E 20666972   A  1353    	DB	"Agon firmware update utility v1.6"
0428A0 6D776172 65207570 
0428A8 64617465 20757469 
0428B0 6C697479 2076312E 
0428B8 36 
0428B9 0A0D0A0D 00         A  1354    	DB	10,13,10,13,0
                           A  1355    	SEGMENT CODE
                           A  1356    ;  130	
                           A  1357    ;  131	void usage(void) {
040350                     A  1358    _usage:
                           A  1359    .DEFINE "_usage"
                           A  1360    
                           A  1361    .VALUE _usage
                           A  1362    
                           A  1363    .CLASS 2
                           A  1364    
                           A  1365    .TYPE 65
                           A  1366    
                           A  1367    .ENDEF
                           A  1368    
                           A  1369    .BEGFUNC "usage",131,"_usage"
                           A  1370    
040350 DDE5                A  1371    	PUSH	IX
040352 DD210000 00         A  1372    	LD	IX,0
040357 DD39                A  1373    	ADD	IX,SP
                           A  1374    ;  132		print_version();
                           A  1375    .LINE 132
                           A  1376    
040359 CD 2F 03 04         A  1377    	CALL	_print_version
                           A  1378    ;  133		printf("Usage: FLASH [all | [mos <f
                           A  1379    .LINE 133
                           A  1380    
04035D 01 76 18 04         A  1381    	LD	BC,___print_uputch
040361 ED43 04 28 04       A  1382    	LD	(___print_xputch),BC
040366 01 BE 28 04         A  1383    	LD	BC,L__18
04036A C5                  A  1384    	PUSH	BC
04036B CD 05 17 04         A  1385    	CALL	___print_sendstring
04036F C1                  A  1386    	POP	BC
                           A  1387    ;  134	}
                           A  1388    .LINE 134
                           A  1389    
040370 DDF9                A  1390    	LD	SP,IX
040372 DDE1                A  1391    	POP	IX
040374 C9                  A  1392    	RET	
                           A  1393    
                           A  1394    
                           A  1395    ;**************************** _usage **********
                           A  1396    ;Name                         Addr/Register   S
                           A  1397    ;___print_sendstring                 IMPORT  --
                           A  1398    ;___print_xputch                     IMPORT    
                           A  1399    ;___print_uputch                     IMPORT  --
                           A  1400    
                           A  1401    
                           A  1402    ; Stack Frame Size: 6 (bytes)
                           A  1403    ;       Spill Code: 0 (instruction)
                           A  1404    
                           A  1405    
                           A  1406    .ENDFUNC "usage",134,"_usage"
                           A  1407    	SEGMENT STRSECT
0428BE                     A  1408    L__18:
0428BE 55736167 653A2046   A  1409    	DB	"Usage: FLASH [all | [mos <filename>] [
0428C6 4C415348 205B616C 
0428CE 6C207C20 5B6D6F73 
0428D6 203C6669 6C656E61 
0428DE 6D653E5D 205B7664 
0428E6 70203C66 696C656E 
0428EE 616D653E 5D207C20 
0428F6 62617463 685D203C 
0428FE 2D663E 
042901 0A0D00              A  1410    	DB	10,13,0
                           A  1411    	SEGMENT CODE
                           A  1412    ;  135	
                           A  1413    ;  136	typedef enum {
                           A  1414    ;  137		MOS,
                           A  1415    ;  138		VDP
                           A  1416    ;  139	} flashtype;
                           A  1417    ;  140	
                           A  1418    ;  141	bool getResponse(void) {
040375                     A  1419    _getResponse:
                           A  1420    .DEFINE "_getResponse"
                           A  1421    
                           A  1422    .VALUE _getResponse
                           A  1423    
                           A  1424    .CLASS 2
                           A  1425    
                           A  1426    .TYPE 76
                           A  1427    
                           A  1428    .ENDEF
                           A  1429    
                           A  1430    .BEGFUNC "getResponse",141,"_getResponse"
                           A  1431    
                           A  1432    .LINE 141
                           A  1433    
                           A  1434    .DEFINE "response"
                           A  1435    
                           A  1436    .CLASS 65
                           A  1437    
                           A  1438    .VALUE -1
                           A  1439    
                           A  1440    .TYPE 12
                           A  1441    
                           A  1442    .ENDEF
                           A  1443    
040375 DDE5                A  1444    	PUSH	IX
040377 DD210000 00         A  1445    	LD	IX,0
04037C DD39                A  1446    	ADD	IX,SP
04037E 3B                  A  1447    	DEC	SP
                           A  1448    ;  142		uint8_t response = 0;
                           A  1449    .LINE 142
                           A  1450    
04037F DD36FF00            A  1451    	LD	(IX+%FFFFFFFF),%0
                           A  1452    ;  143	
                           A  1453    ;  144		printf("Flash firmware (y/n)?");
                           A  1454    .LINE 144
                           A  1455    
040383 01 76 18 04         A  1456    	LD	BC,___print_uputch
040387 ED43 04 28 04       A  1457    	LD	(___print_xputch),BC
04038C 01 04 29 04         A  1458    	LD	BC,L__20
040390 C5                  A  1459    	PUSH	BC
040391 CD 05 17 04         A  1460    	CALL	___print_sendstring
040395 C1                  A  1461    	POP	BC
                           A  1462    ;  145		while((response != 'y') && (respons
                           A  1463    .LINE 145
                           A  1464    
040396 18 13               A  1465    	JR	L_34
040398                     A  1466    L_35:
040398 CD A0 11 04         A  1467    	CALL	_getch
04039C 47                  A  1468    	LD	B,A
04039D 78                  A  1469    	LD	A,B
04039E 17ED62              A  1470    	SEXT	HL
0403A1 68                  A  1471    	LD	L,B
0403A2 E5                  A  1472    	PUSH	HL
0403A3 CD C0 1F 04         A  1473    	CALL	_tolower
0403A7 C1                  A  1474    	POP	BC
0403A8 DD75FF              A  1475    	LD	(IX+%FFFFFFFF),L
0403AB                     A  1476    L_34:
0403AB DD7EFF              A  1477    	LD	A,(IX+%FFFFFFFF)
0403AE FE79                A  1478    	CP	A,%79
0403B0 28 07               A  1479    	JR	Z,L_38
0403B2 DD7EFF              A  1480    	LD	A,(IX+%FFFFFFFF)
0403B5 FE6E                A  1481    	CP	A,%6E
0403B7 20 DF               A  1482    	JR	NZ,L_35
0403B9                     A  1483    L_38:
                           A  1484    ;  146		if(response == 'n') printf("\r\nUse
                           A  1485    .LINE 146
                           A  1486    
0403B9 DD7EFF              A  1487    	LD	A,(IX+%FFFFFFFF)
0403BC FE6E                A  1488    	CP	A,%6E
0403BE 20 15               A  1489    	JR	NZ,L_37
0403C0 01 76 18 04         A  1490    	LD	BC,___print_uputch
0403C4 ED43 04 28 04       A  1491    	LD	(___print_xputch),BC
0403C9 01 1A 29 04         A  1492    	LD	BC,L__24
0403CD C5                  A  1493    	PUSH	BC
0403CE CD 05 17 04         A  1494    	CALL	___print_sendstring
0403D2 C1                  A  1495    	POP	BC
                           A  1496    ;  147		else printf("\r\n\r\n");
                           A  1497    .LINE 147
                           A  1498    
0403D3 18 13               A  1499    	JR	L_39
0403D5                     A  1500    L_37:
0403D5 01 76 18 04         A  1501    	LD	BC,___print_uputch
0403D9 ED43 04 28 04       A  1502    	LD	(___print_xputch),BC
0403DE 01 2B 29 04         A  1503    	LD	BC,L__25
0403E2 C5                  A  1504    	PUSH	BC
0403E3 CD 05 17 04         A  1505    	CALL	___print_sendstring
0403E7 C1                  A  1506    	POP	BC
0403E8                     A  1507    L_39:
                           A  1508    ;  148		return response == 'y';
                           A  1509    .LINE 148
                           A  1510    
0403E8 DD7EFF              A  1511    	LD	A,(IX+%FFFFFFFF)
0403EB FE79                A  1512    	CP	A,%79
0403ED 20 04               A  1513    	JR	NZ,L__27
0403EF 3E01                A  1514    	LD	A,%1
0403F1 18 01               A  1515    	JR	L__28
0403F3                     A  1516    L__27:
0403F3 AF                  A  1517    	XOR	A,A
0403F4                     A  1518    L__28:
                           A  1519    ;  149	}
                           A  1520    .LINE 149
                           A  1521    
0403F4 DDF9                A  1522    	LD	SP,IX
0403F6 DDE1                A  1523    	POP	IX
0403F8 C9                  A  1524    	RET	
                           A  1525    
                           A  1526    
                           A  1527    ;**************************** _getResponse ****
                           A  1528    ;Name                         Addr/Register   S
                           A  1529    ;_getch                              IMPORT  --
                           A  1530    ;_tolower                            IMPORT  --
                           A  1531    ;___print_sendstring                 IMPORT  --
                           A  1532    ;___print_xputch                     IMPORT    
                           A  1533    ;___print_uputch                     IMPORT  --
                           A  1534    ;response                              IX-1    
                           A  1535    
                           A  1536    
                           A  1537    ; Stack Frame Size: 7 (bytes)
                           A  1538    ;       Spill Code: 0 (instruction)
                           A  1539    
                           A  1540    
                           A  1541    .ENDFUNC "getResponse",149,"_getResponse"
                           A  1542    	SEGMENT STRSECT
042904                     A  1543    L__20:
042904 466C6173 68206669   A  1544    	DB	"Flash firmware (y/n)?"
04290C 726D7761 72652028 
042914 792F6E29 3F 
042919 00                  A  1545    	DB	0
04291A                     A  1546    L__24:
04291A 0D0A                A  1547    	DB	13,10
04291C 55736572 2061626F   A  1548    	DB	"User abort"
042924 7274 
042926 0A0D0A0D 00         A  1549    	DB	10,13,10,13,0
04292B                     A  1550    L__25:
04292B 0D0A0D0A 00         A  1551    	DB	13,10,13,10,0
                           A  1552    	SEGMENT CODE
                           A  1553    ;  150	
                           A  1554    ;  151	void askEscapeToContinue(void) {
0403F9                     A  1555    _askEscapeToContinue:
                           A  1556    .DEFINE "_askEscapeToContinue"
                           A  1557    
                           A  1558    .VALUE _askEscapeToContinue
                           A  1559    
                           A  1560    .CLASS 2
                           A  1561    
                           A  1562    .TYPE 65
                           A  1563    
                           A  1564    .ENDEF
                           A  1565    
                           A  1566    .BEGFUNC "askEscapeToContinue",151,"_askEscapeT
                           A  1567    
                           A  1568    .LINE 151
                           A  1569    
                           A  1570    .DEFINE "response"
                           A  1571    
                           A  1572    .CLASS 65
                           A  1573    
                           A  1574    .VALUE -1
                           A  1575    
                           A  1576    .TYPE 12
                           A  1577    
                           A  1578    .ENDEF
                           A  1579    
0403F9 DDE5                A  1580    	PUSH	IX
0403FB DD210000 00         A  1581    	LD	IX,0
040400 DD39                A  1582    	ADD	IX,SP
040402 3B                  A  1583    	DEC	SP
                           A  1584    ;  152		uint8_t response = 0;
                           A  1585    .LINE 152
                           A  1586    
040403 DD36FF00            A  1587    	LD	(IX+%FFFFFFFF),%0
                           A  1588    ;  153	
                           A  1589    ;  154		printf("Press ESC to continue");
                           A  1590    .LINE 154
                           A  1591    
040407 01 76 18 04         A  1592    	LD	BC,___print_uputch
04040B ED43 04 28 04       A  1593    	LD	(___print_xputch),BC
040410 01 30 29 04         A  1594    	LD	BC,L__30
040414 C5                  A  1595    	PUSH	BC
040415 CD 05 17 04         A  1596    	CALL	___print_sendstring
040419 C1                  A  1597    	POP	BC
                           A  1598    ;  155		while(response != 0x1B) response = 
                           A  1599    .LINE 155
                           A  1600    
04041A 18 13               A  1601    	JR	L_41
04041C                     A  1602    L_42:
04041C CD A0 11 04         A  1603    	CALL	_getch
040420 47                  A  1604    	LD	B,A
040421 78                  A  1605    	LD	A,B
040422 17ED62              A  1606    	SEXT	HL
040425 68                  A  1607    	LD	L,B
040426 E5                  A  1608    	PUSH	HL
040427 CD C0 1F 04         A  1609    	CALL	_tolower
04042B C1                  A  1610    	POP	BC
04042C DD75FF              A  1611    	LD	(IX+%FFFFFFFF),L
04042F                     A  1612    L_41:
04042F DD7EFF              A  1613    	LD	A,(IX+%FFFFFFFF)
040432 FE1B                A  1614    	CP	A,%1B
040434 20 E6               A  1615    	JR	NZ,L_42
                           A  1616    ;  156		printf("\r\n");
                           A  1617    .LINE 156
                           A  1618    
040436 01 76 18 04         A  1619    	LD	BC,___print_uputch
04043A ED43 04 28 04       A  1620    	LD	(___print_xputch),BC
04043F 01 46 29 04         A  1621    	LD	BC,L__32
040443 C5                  A  1622    	PUSH	BC
040444 CD 05 17 04         A  1623    	CALL	___print_sendstring
040448 C1                  A  1624    	POP	BC
                           A  1625    ;  157	}
                           A  1626    .LINE 157
                           A  1627    
040449 DDF9                A  1628    	LD	SP,IX
04044B DDE1                A  1629    	POP	IX
04044D C9                  A  1630    	RET	
                           A  1631    
                           A  1632    
                           A  1633    ;**************************** _askEscapeToConti
                           A  1634    ;Name                         Addr/Register   S
                           A  1635    ;_getch                              IMPORT  --
                           A  1636    ;_tolower                            IMPORT  --
                           A  1637    ;___print_sendstring                 IMPORT  --
                           A  1638    ;___print_xputch                     IMPORT    
                           A  1639    ;___print_uputch                     IMPORT  --
                           A  1640    ;response                              IX-1    
                           A  1641    
                           A  1642    
                           A  1643    ; Stack Frame Size: 7 (bytes)
                           A  1644    ;       Spill Code: 0 (instruction)
                           A  1645    
                           A  1646    
                           A  1647    .ENDFUNC "askEscapeToContinue",157,"_askEscapeT
                           A  1648    	SEGMENT STRSECT
042930                     A  1649    L__30:
042930 50726573 73204553   A  1650    	DB	"Press ESC to continue"
042938 4320746F 20636F6E 
042940 74696E75 65 
042945 00                  A  1651    	DB	0
042946                     A  1652    L__32:
042946 0D0A00              A  1653    	DB	13,10,0
                           A  1654    	SEGMENT CODE
                           A  1655    ;  158	
                           A  1656    ;  159	bool update_vdp(char *filename) {
04044E                     A  1657    _update_vdp:
                           A  1658    .DEFINE "_update_vdp"
                           A  1659    
                           A  1660    .VALUE _update_vdp
                           A  1661    
                           A  1662    .CLASS 2
                           A  1663    
                           A  1664    .TYPE 76
                           A  1665    
                           A  1666    .ENDEF
                           A  1667    
                           A  1668    .BEGFUNC "update_vdp",159,"_update_vdp"
                           A  1669    
                           A  1670    .LINE 159
                           A  1671    
                           A  1672    .DEFINE "filename"
                           A  1673    
                           A  1674    .CLASS 65
                           A  1675    
                           A  1676    .VALUE 6
                           A  1677    
                           A  1678    .TYPE 34
                           A  1679    
                           A  1680    .ENDEF
                           A  1681    
                           A  1682    .DEFINE "file"
                           A  1683    
                           A  1684    .CLASS 65
                           A  1685    
                           A  1686    .VALUE -1
                           A  1687    
                           A  1688    .TYPE 12
                           A  1689    
                           A  1690    .ENDEF
                           A  1691    
                           A  1692    .DEFINE "filesize"
                           A  1693    
                           A  1694    .CLASS 65
                           A  1695    
                           A  1696    .VALUE -4
                           A  1697    
                           A  1698    .TYPE 14
                           A  1699    
                           A  1700    .ENDEF
                           A  1701    
04044E DDE5                A  1702    	PUSH	IX
040450 DD210000 00         A  1703    	LD	IX,0
040455 DD39                A  1704    	ADD	IX,SP
040457 C5                  A  1705    	PUSH	BC
040458 3B                  A  1706    	DEC	SP
                           A  1707    ;  160		uint8_t file;
                           A  1708    ;  161		uint24_t filesize;
                           A  1709    ;  162		uint24_t size, n;
                           A  1710    ;  163	
                           A  1711    ;  164		putch(12); // cls
                           A  1712    .LINE 164
                           A  1713    
040459 010C0000            A  1714    	LD	BC,12
04045D C5                  A  1715    	PUSH	BC
04045E CD E5 00 04         A  1716    	CALL	_putch
040462 C1                  A  1717    	POP	BC
                           A  1718    ;  165		print_version();	
                           A  1719    .LINE 165
                           A  1720    
040463 CD 2F 03 04         A  1721    	CALL	_print_version
                           A  1722    ;  166		printf("Unlocking VDP updater...\r\
                           A  1723    .LINE 166
                           A  1724    
040467 01 76 18 04         A  1725    	LD	BC,___print_uputch
04046B ED43 04 28 04       A  1726    	LD	(___print_xputch),BC
040470 01 49 29 04         A  1727    	LD	BC,L__34
040474 C5                  A  1728    	PUSH	BC
040475 CD 05 17 04         A  1729    	CALL	___print_sendstring
040479 C1                  A  1730    	POP	BC
                           A  1731    ;  167		
                           A  1732    ;  168		if(!vdp_ota_present()) {
                           A  1733    .LINE 168
                           A  1734    
04047A CD E3 01 04         A  1735    	CALL	_vdp_ota_present
04047E B7                  A  1736    	OR	A,A
04047F 20 29               A  1737    	JR	NZ,L_46
                           A  1738    ;  169			printf(" failed - OTA not prese
                           A  1739    .LINE 169
                           A  1740    
040481 01 76 18 04         A  1741    	LD	BC,___print_uputch
040485 ED43 04 28 04       A  1742    	LD	(___print_xputch),BC
04048A 01 64 29 04         A  1743    	LD	BC,L__36
04048E C5                  A  1744    	PUSH	BC
04048F CD 05 17 04         A  1745    	CALL	___print_sendstring
040493 C1                  A  1746    	POP	BC
                           A  1747    ;  170			printf("Program the VDP using A
                           A  1748    .LINE 170
                           A  1749    
040494 01 76 18 04         A  1750    	LD	BC,___print_uputch
040498 ED43 04 28 04       A  1751    	LD	(___print_xputch),BC
04049D 01 91 29 04         A  1752    	LD	BC,L__37
0404A1 C5                  A  1753    	PUSH	BC
0404A2 CD 05 17 04         A  1754    	CALL	___print_sendstring
0404A6 C1                  A  1755    	POP	BC
                           A  1756    ;  171			return false;
                           A  1757    .LINE 171
                           A  1758    
0404A7 AF                  A  1759    	XOR	A,A
0404A8 18 4F               A  1760    	JR	L_47
                           A  1761    ;  172		}
0404AA                     A  1762    L_46:
                           A  1763    .LINE 172
                           A  1764    
                           A  1765    ;  173	
                           A  1766    ;  174		file = mos_fopen(filename, fa_read)
                           A  1767    .LINE 174
                           A  1768    
0404AA 01010000            A  1769    	LD	BC,1
0404AE C5                  A  1770    	PUSH	BC
0404AF DD0706              A  1771    	LD	BC,(IX+%6)
0404B2 C5                  A  1772    	PUSH	BC
0404B3 CD F6 11 04         A  1773    	CALL	_mos_fopen
0404B7 C1                  A  1774    	POP	BC
0404B8 C1                  A  1775    	POP	BC
0404B9 DD77FF              A  1776    	LD	(IX+%FFFFFFFF),A
                           A  1777    ;  175		// Do actual work here
                           A  1778    ;  176		printf("Updating VDP firmware\r\n")
                           A  1779    .LINE 176
                           A  1780    
0404BC 01 76 18 04         A  1781    	LD	BC,___print_uputch
0404C0 ED43 04 28 04       A  1782    	LD	(___print_xputch),BC
0404C5 01 CA 29 04         A  1783    	LD	BC,L__38
0404C9 C5                  A  1784    	PUSH	BC
0404CA CD 05 17 04         A  1785    	CALL	___print_sendstring
0404CE C1                  A  1786    	POP	BC
                           A  1787    ;  177		filesize = getFileSize(file);	
                           A  1788    .LINE 177
                           A  1789    
0404CF DD4EFF              A  1790    	LD	C,(IX+%FFFFFFFF)
0404D2 0600                A  1791    	LD	B,%0
0404D4 C5                  A  1792    	PUSH	BC
0404D5 CD 3A 16 04         A  1793    	CALL	_getFileSize
0404D9 C1                  A  1794    	POP	BC
0404DA DD2FFC              A  1795    	LD	(IX+%FFFFFFFC),HL
                           A  1796    ;  178		startVDPupdate(file, filesize);
                           A  1797    .LINE 178
                           A  1798    
0404DD E5C1                A  1799    	LD	BC,HL
0404DF C5                  A  1800    	PUSH	BC
0404E0 DD4EFF              A  1801    	LD	C,(IX+%FFFFFFFF)
0404E3 0600                A  1802    	LD	B,%0
0404E5 C5                  A  1803    	PUSH	BC
0404E6 CD 1D 13 04         A  1804    	CALL	_startVDPupdate
0404EA C1                  A  1805    	POP	BC
0404EB C1                  A  1806    	POP	BC
                           A  1807    ;  179		mos_fclose(file);
                           A  1808    .LINE 179
                           A  1809    
0404EC DD4EFF              A  1810    	LD	C,(IX+%FFFFFFFF)
0404EF 0600                A  1811    	LD	B,%0
0404F1 C5                  A  1812    	PUSH	BC
0404F2 CD 0E 12 04         A  1813    	CALL	_mos_fclose
0404F6 C1                  A  1814    	POP	BC
                           A  1815    ;  180		return true;
                           A  1816    .LINE 180
                           A  1817    
0404F7 3E01                A  1818    	LD	A,%1
                           A  1819    ;  181	}
0404F9                     A  1820    L_47:
                           A  1821    .LINE 181
                           A  1822    
0404F9 DDF9                A  1823    	LD	SP,IX
0404FB DDE1                A  1824    	POP	IX
0404FD C9                  A  1825    	RET	
                           A  1826    
                           A  1827    
                           A  1828    ;**************************** _update_vdp *****
                           A  1829    ;Name                         Addr/Register   S
                           A  1830    ;_mos_fclose                         IMPORT  --
                           A  1831    ;_startVDPupdate                     IMPORT  --
                           A  1832    ;_getFileSize                        IMPORT  --
                           A  1833    ;_mos_fopen                          IMPORT  --
                           A  1834    ;___print_sendstring                 IMPORT  --
                           A  1835    ;___print_xputch                     IMPORT    
                           A  1836    ;___print_uputch                     IMPORT  --
                           A  1837    ;_putch                              IMPORT  --
                           A  1838    ;filesize                              IX-4    
                           A  1839    ;file                                  IX-1    
                           A  1840    ;filename                              IX+6    
                           A  1841    
                           A  1842    
                           A  1843    ; Stack Frame Size: 13 (bytes)
                           A  1844    ;       Spill Code: 0 (instruction)
                           A  1845    
                           A  1846    
                           A  1847    .ENDFUNC "update_vdp",181,"_update_vdp"
                           A  1848    	SEGMENT STRSECT
042949                     A  1849    L__34:
042949 556E6C6F 636B696E   A  1850    	DB	"Unlocking VDP updater..."
042951 67205644 50207570 
042959 64617465 722E2E2E 
042961 0D0A00              A  1851    	DB	13,10,0
042964                     A  1852    L__36:
042964 20666169 6C656420   A  1853    	DB	" failed - OTA not present in current V
04296C 2D204F54 41206E6F 
042974 74207072 6573656E 
04297C 7420696E 20637572 
042984 72656E74 20564450 
04298C 0D0A0D0A 00         A  1854    	DB	13,10,13,10,0
042991                     A  1855    L__37:
042991 50726F67 72616D20   A  1856    	DB	"Program the VDP using Arduino / Platfo
042999 74686520 56445020 
0429A1 7573696E 67204172 
0429A9 6475696E 6F202F20 
0429B1 506C6174 666F726D 
0429B9 494F202F 20657370 
0429C1 746F6F6C 
0429C5 0D0A0D0A 00         A  1857    	DB	13,10,13,10,0
0429CA                     A  1858    L__38:
0429CA 55706461 74696E67   A  1859    	DB	"Updating VDP firmware"
0429D2 20564450 20666972 
0429DA 6D776172 65 
0429DF 0D0A00              A  1860    	DB	13,10,0
                           A  1861    	SEGMENT CODE
                           A  1862    ;  182	
                           A  1863    ;  183	bool update_mos(char *filename) {
0404FE                     A  1864    _update_mos:
                           A  1865    .DEFINE "_update_mos"
                           A  1866    
                           A  1867    .VALUE _update_mos
                           A  1868    
                           A  1869    .CLASS 2
                           A  1870    
                           A  1871    .TYPE 76
                           A  1872    
                           A  1873    .ENDEF
                           A  1874    
                           A  1875    .BEGFUNC "update_mos",183,"_update_mos"
                           A  1876    
                           A  1877    .LINE 183
                           A  1878    
                           A  1879    .DEFINE "filename"
                           A  1880    
                           A  1881    .CLASS 65
                           A  1882    
                           A  1883    .VALUE 6
                           A  1884    
                           A  1885    .TYPE 34
                           A  1886    
                           A  1887    .ENDEF
                           A  1888    
                           A  1889    .DEFINE "counter"
                           A  1890    
                           A  1891    .CLASS 65
                           A  1892    
                           A  1893    .VALUE -3
                           A  1894    
                           A  1895    .TYPE 14
                           A  1896    
                           A  1897    .ENDEF
                           A  1898    
                           A  1899    .DEFINE "attempt"
                           A  1900    
                           A  1901    .CLASS 65
                           A  1902    
                           A  1903    .VALUE -6
                           A  1904    
                           A  1905    .TYPE 4
                           A  1906    
                           A  1907    .ENDEF
                           A  1908    
                           A  1909    .DEFINE "pagemax"
                           A  1910    
                           A  1911    .CLASS 65
                           A  1912    
                           A  1913    .VALUE -9
                           A  1914    
                           A  1915    .TYPE 14
                           A  1916    
                           A  1917    .ENDEF
                           A  1918    
                           A  1919    .DEFINE "success"
                           A  1920    
                           A  1921    .CLASS 65
                           A  1922    
                           A  1923    .VALUE -10
                           A  1924    
                           A  1925    .TYPE 12
                           A  1926    
                           A  1927    .ENDEF
                           A  1928    
                           A  1929    .DEFINE "addressto"
                           A  1930    
                           A  1931    .CLASS 65
                           A  1932    
                           A  1933    .VALUE -13
                           A  1934    
                           A  1935    .TYPE 14
                           A  1936    
                           A  1937    .ENDEF
                           A  1938    
                           A  1939    .DEFINE "addressfrom"
                           A  1940    
                           A  1941    .CLASS 65
                           A  1942    
                           A  1943    .VALUE -16
                           A  1944    
                           A  1945    .TYPE 14
                           A  1946    
                           A  1947    .ENDEF
                           A  1948    
                           A  1949    .DEFINE "file"
                           A  1950    
                           A  1951    .CLASS 65
                           A  1952    
                           A  1953    .VALUE -17
                           A  1954    
                           A  1955    .TYPE 12
                           A  1956    
                           A  1957    .ENDEF
                           A  1958    
                           A  1959    .DEFINE "ptr"
                           A  1960    
                           A  1961    .CLASS 65
                           A  1962    
                           A  1963    .VALUE -20
                           A  1964    
                           A  1965    .TYPE 34
                           A  1966    
                           A  1967    .ENDEF
                           A  1968    
                           A  1969    .DEFINE "filesize"
                           A  1970    
                           A  1971    .CLASS 65
                           A  1972    
                           A  1973    .VALUE -23
                           A  1974    
                           A  1975    .TYPE 14
                           A  1976    
                           A  1977    .ENDEF
                           A  1978    
                           A  1979    .DEFINE "got"
                           A  1980    
                           A  1981    .CLASS 65
                           A  1982    
                           A  1983    .VALUE -26
                           A  1984    
                           A  1985    .TYPE 14
                           A  1986    
                           A  1987    .ENDEF
                           A  1988    
                           A  1989    .DEFINE "value"
                           A  1990    
                           A  1991    .CLASS 65
                           A  1992    
                           A  1993    .VALUE -27
                           A  1994    
                           A  1995    .TYPE 12
                           A  1996    
                           A  1997    .ENDEF
                           A  1998    
                           A  1999    .DEFINE "lastpagebytes"
                           A  2000    
                           A  2001    .CLASS 65
                           A  2002    
                           A  2003    .VALUE -30
                           A  2004    
                           A  2005    .TYPE 14
                           A  2006    
                           A  2007    .ENDEF
                           A  2008    
                           A  2009    .DEFINE "crcresult"
                           A  2010    
                           A  2011    .CLASS 65
                           A  2012    
                           A  2013    .VALUE -34
                           A  2014    
                           A  2015    .TYPE 15
                           A  2016    
                           A  2017    .ENDEF
                           A  2018    
0404FE DDE5                A  2019    	PUSH	IX
040500 DD210000 00         A  2020    	LD	IX,0
040505 DD39                A  2021    	ADD	IX,SP
040507 ED22DB              A  2022    	LEA	HL,IX+%FFFFFFDB
04050A F9                  A  2023    	LD	SP,HL
                           A  2024    ;  184		uint32_t crcresult;
                           A  2025    ;  185		uint24_t got;
                           A  2026    ;  186		uint8_t file;
                           A  2027    ;  187		char* ptr = (char*)BUFFER1;
                           A  2028    .LINE 187
                           A  2029    
04050B 01000005            A  2030    	LD	BC,327680
04050F DD0FEC              A  2031    	LD	(IX+%FFFFFFEC),BC
                           A  2032    ;  188		uint8_t value;
                           A  2033    ;  189		uint24_t counter,pagemax, lastpageb
                           A  2034    ;  190		uint24_t addressto,addressfrom;
                           A  2035    ;  191		uint24_t filesize;
                           A  2036    ;  192		int attempt;
                           A  2037    ;  193		bool success = false;
                           A  2038    .LINE 193
                           A  2039    
040512 DD36F600            A  2040    	LD	(IX+%FFFFFFF6),%0
                           A  2041    ;  194	
                           A  2042    ;  195		putch(12); // cls
                           A  2043    .LINE 195
                           A  2044    
040516 010C0000            A  2045    	LD	BC,12
04051A C5                  A  2046    	PUSH	BC
04051B CD E5 00 04         A  2047    	CALL	_putch
04051F C1                  A  2048    	POP	BC
                           A  2049    ;  196		print_version();	
                           A  2050    .LINE 196
                           A  2051    
040520 CD 2F 03 04         A  2052    	CALL	_print_version
                           A  2053    ;  197		
                           A  2054    ;  198		printf("Programming MOS firmware to
                           A  2055    .LINE 198
                           A  2056    
040524 01 76 18 04         A  2057    	LD	BC,___print_uputch
040528 ED43 04 28 04       A  2058    	LD	(___print_xputch),BC
04052D 01 E2 29 04         A  2059    	LD	BC,L__40
040531 C5                  A  2060    	PUSH	BC
040532 CD 05 17 04         A  2061    	CALL	___print_sendstring
040536 C1                  A  2062    	POP	BC
                           A  2063    ;  199		printf("Reading MOS firmware");
                           A  2064    .LINE 199
                           A  2065    
040537 01 76 18 04         A  2066    	LD	BC,___print_uputch
04053B ED43 04 28 04       A  2067    	LD	(___print_xputch),BC
040540 01 10 2A 04         A  2068    	LD	BC,L__41
040544 C5                  A  2069    	PUSH	BC
040545 CD 05 17 04         A  2070    	CALL	___print_sendstring
040549 C1                  A  2071    	POP	BC
                           A  2072    ;  200		file = mos_fopen(filename, fa_read)
                           A  2073    .LINE 200
                           A  2074    
04054A 01010000            A  2075    	LD	BC,1
04054E C5                  A  2076    	PUSH	BC
04054F DD0706              A  2077    	LD	BC,(IX+%6)
040552 C5                  A  2078    	PUSH	BC
040553 CD F6 11 04         A  2079    	CALL	_mos_fopen
040557 C1                  A  2080    	POP	BC
040558 C1                  A  2081    	POP	BC
040559 DD77EF              A  2082    	LD	(IX+%FFFFFFEF),A
                           A  2083    ;  201		filesize = getFileSize(file);
                           A  2084    .LINE 201
                           A  2085    
04055C DD4EEF              A  2086    	LD	C,(IX+%FFFFFFEF)
04055F 0600                A  2087    	LD	B,%0
040561 C5                  A  2088    	PUSH	BC
040562 CD 3A 16 04         A  2089    	CALL	_getFileSize
040566 C1                  A  2090    	POP	BC
040567 DD2FE9              A  2091    	LD	(IX+%FFFFFFE9),HL
                           A  2092    ;  202		// Read file to memory
                           A  2093    ;  203		crc32_initialize();
                           A  2094    .LINE 203
                           A  2095    
04056A CD 88 15 04         A  2096    	CALL	_crc32_initialize
                           A  2097    ;  204		while((got = mos_fread(file, ptr, B
                           A  2098    .LINE 204
                           A  2099    
04056E 18 22               A  2100    	JR	L_48
040570                     A  2101    L_49:
                           A  2102    ;  205			crc32(ptr, got);
                           A  2103    .LINE 205
                           A  2104    
040570 DD07E6              A  2105    	LD	BC,(IX+%FFFFFFE6)
040573 C5                  A  2106    	PUSH	BC
040574 DD07EC              A  2107    	LD	BC,(IX+%FFFFFFEC)
040577 C5                  A  2108    	PUSH	BC
040578 CD DA 15 04         A  2109    	CALL	_crc32
04057C C1                  A  2110    	POP	BC
04057D C1                  A  2111    	POP	BC
                           A  2112    ;  206			ptr += got;
                           A  2113    .LINE 206
                           A  2114    
04057E DD07E6              A  2115    	LD	BC,(IX+%FFFFFFE6)
040581 DD27EC              A  2116    	LD	HL,(IX+%FFFFFFEC)
040584 09                  A  2117    	ADD	HL,BC
040585 DD2FEC              A  2118    	LD	(IX+%FFFFFFEC),HL
                           A  2119    ;  207			putch('.');
                           A  2120    .LINE 207
                           A  2121    
040588 012E0000            A  2122    	LD	BC,46
04058C C5                  A  2123    	PUSH	BC
04058D CD E5 00 04         A  2124    	CALL	_putch
040591 C1                  A  2125    	POP	BC
                           A  2126    ;  208		}
040592                     A  2127    L_48:
                           A  2128    .LINE 208
                           A  2129    
040592 01004000            A  2130    	LD	BC,16384
040596 C5                  A  2131    	PUSH	BC
040597 DD07EC              A  2132    	LD	BC,(IX+%FFFFFFEC)
04059A C5                  A  2133    	PUSH	BC
04059B DD4EEF              A  2134    	LD	C,(IX+%FFFFFFEF)
04059E 0600                A  2135    	LD	B,%0
0405A0 C5                  A  2136    	PUSH	BC
0405A1 CD 38 12 04         A  2137    	CALL	_mos_fread
0405A5 C1                  A  2138    	POP	BC
0405A6 C1                  A  2139    	POP	BC
0405A7 C1                  A  2140    	POP	BC
0405A8 DD2FE6              A  2141    	LD	(IX+%FFFFFFE6),HL
0405AB E5C1                A  2142    	LD	BC,HL
0405AD B7                  A  2143    	OR	A,A
0405AE ED62                A  2144    	SBC	HL,HL
0405B0 B7                  A  2145    	OR	A,A
0405B1 ED42                A  2146    	SBC	HL,BC
0405B3 38 BB               A  2147    	JR	C,L_49
                           A  2148    ;  209		crcresult = crc32_finalize();
                           A  2149    .LINE 209
                           A  2150    
0405B5 CD 9D 15 04         A  2151    	CALL	_crc32_finalize
0405B9 DD2FDE              A  2152    	LD	(IX+%FFFFFFDE),HL
0405BC DD73E1              A  2153    	LD	(IX+%FFFFFFE1),E
                           A  2154    ;  210		printf("\r\n");
                           A  2155    .LINE 210
                           A  2156    
0405BF 01 76 18 04         A  2157    	LD	BC,___print_uputch
0405C3 ED43 04 28 04       A  2158    	LD	(___print_xputch),BC
0405C8 01 25 2A 04         A  2159    	LD	BC,L__43
0405CC C5                  A  2160    	PUSH	BC
0405CD CD 05 17 04         A  2161    	CALL	___print_sendstring
0405D1 C1                  A  2162    	POP	BC
                           A  2163    ;  211		// Final memory check to given crc3
                           A  2164    ;  212		if(crcresult != moscrc) {
                           A  2165    .LINE 212
                           A  2166    
0405D2 2A 77 2D 04         A  2167    	LD	HL,(_moscrc)
0405D6 3A 7A 2D 04         A  2168    	LD	A,(_moscrc+3)
0405DA 5F                  A  2169    	LD	E,A
0405DB DD07DE              A  2170    	LD	BC,(IX+%FFFFFFDE)
0405DE DD7EE1              A  2171    	LD	A,(IX+%FFFFFFE1)
0405E1 CD 58 1F 04         A  2172    	CALL	__lcmpu
0405E5 28 18               A  2173    	JR	Z,L_52
                           A  2174    ;  213			printf("Error reading file to m
                           A  2175    .LINE 213
                           A  2176    
0405E7 01 76 18 04         A  2177    	LD	BC,___print_uputch
0405EB ED43 04 28 04       A  2178    	LD	(___print_xputch),BC
0405F0 01 28 2A 04         A  2179    	LD	BC,L__45
0405F4 C5                  A  2180    	PUSH	BC
0405F5 CD 05 17 04         A  2181    	CALL	___print_sendstring
0405F9 C1                  A  2182    	POP	BC
                           A  2183    ;  214			return false;
                           A  2184    .LINE 214
                           A  2185    
0405FA AF                  A  2186    	XOR	A,A
0405FB C3 6D 08 04         A  2187    	JR	L_81
                           A  2188    ;  215		}
0405FF                     A  2189    L_52:
                           A  2190    .LINE 215
                           A  2191    
                           A  2192    ;  216		printf("\r\n");	
                           A  2193    .LINE 216
                           A  2194    
0405FF 01 76 18 04         A  2195    	LD	BC,___print_uputch
040603 ED43 04 28 04       A  2196    	LD	(___print_xputch),BC
040608 01 47 2A 04         A  2197    	LD	BC,L__46
04060C C5                  A  2198    	PUSH	BC
04060D CD 05 17 04         A  2199    	CALL	___print_sendstring
040611 C1                  A  2200    	POP	BC
                           A  2201    ;  217		// Actual work here	
                           A  2202    ;  218		di();								
                           A  2203    .LINE 218
                           A  2204    
040612 F3                  A  2205    	di
                           A  2206    ;  219	
                           A  2207    ;  220		attempt = 0;
                           A  2208    .LINE 220
                           A  2209    
040613 01000000            A  2210    	LD	BC,0
040617 DD0FFA              A  2211    	LD	(IX+%FFFFFFFA),BC
                           A  2212    ;  221		while((!success) && (attempt < 3)) 
                           A  2213    .LINE 221
                           A  2214    
04061A C3 43 08 04         A  2215    	JR	L_78
04061E                     A  2216    L_79:
                           A  2217    ;  222			// start address in flash
                           A  2218    ;  223			addressto = FLASHSTART;
                           A  2219    .LINE 223
                           A  2220    
04061E 01000000            A  2221    	LD	BC,0
040622 DD0FF3              A  2222    	LD	(IX+%FFFFFFF3),BC
                           A  2223    ;  224			addressfrom = BUFFER1;
                           A  2224    .LINE 224
                           A  2225    
040625 01000005            A  2226    	LD	BC,327680
040629 DD0FF0              A  2227    	LD	(IX+%FFFFFFF0),BC
                           A  2228    ;  225			// Write attempt#
                           A  2229    ;  226			if(attempt > 0) printf("Retry a
                           A  2230    .LINE 226
                           A  2231    
04062C DD07FA              A  2232    	LD	BC,(IX+%FFFFFFFA)
04062F B7                  A  2233    	OR	A,A
040630 ED62                A  2234    	SBC	HL,HL
040632 B7                  A  2235    	OR	A,A
040633 ED42                A  2236    	SBC	HL,BC
040635 F2 6A 06 04         A  2237    	JP	P,L_55
040639 01 76 18 04         A  2238    	LD	BC,___print_uputch
04063D ED43 04 28 04       A  2239    	LD	(___print_xputch),BC
040642 01 4A 2A 04         A  2240    	LD	BC,L__48
040646 C5                  A  2241    	PUSH	BC
040647 CD 05 17 04         A  2242    	CALL	___print_sendstring
04064B C1                  A  2243    	POP	BC
04064C DD07FA              A  2244    	LD	BC,(IX+%FFFFFFFA)
04064F CD 0E 1F 04         A  2245    	CALL	__itol
040653 C5D1                A  2246    	LD	DE,BC
040655 4F                  A  2247    	LD	C,A
040656 0600                A  2248    	LD	B,%0
040658 C5                  A  2249    	PUSH	BC
040659 D5                  A  2250    	PUSH	DE
04065A CD FC 18 04         A  2251    	CALL	__u_itoa
04065E C1                  A  2252    	POP	BC
04065F C1                  A  2253    	POP	BC
040660 01 5A 2A 04         A  2254    	LD	BC,L__49
040664 C5                  A  2255    	PUSH	BC
040665 CD 05 17 04         A  2256    	CALL	___print_sendstring
040669 C1                  A  2257    	POP	BC
04066A                     A  2258    L_55:
                           A  2259    ;  227			// Unprotect and erase flash
                           A  2260    ;  228			printf("Erasing flash... ");
                           A  2261    .LINE 228
                           A  2262    
04066A 01 76 18 04         A  2263    	LD	BC,___print_uputch
04066E ED43 04 28 04       A  2264    	LD	(___print_xputch),BC
040673 01 5D 2A 04         A  2265    	LD	BC,L__50
040677 C5                  A  2266    	PUSH	BC
040678 CD 05 17 04         A  2267    	CALL	___print_sendstring
04067C C1                  A  2268    	POP	BC
                           A  2269    ;  229			enableFlashKeyRegister();	// 
                           A  2270    .LINE 229
                           A  2271    
04067D CD D1 12 04         A  2272    	CALL	_enableFlashKeyRegister
                           A  2273    ;  230			FLASH_PROT = 0;				// 
                           A  2274    .LINE 230
                           A  2275    
040681 AF                  A  2276    	XOR	A,A
040682 ED39FA              A  2277    	OUT0	(250),A
                           A  2278    ;  231			enableFlashKeyRegister();	// 
                           A  2279    .LINE 231
                           A  2280    
040685 CD D1 12 04         A  2281    	CALL	_enableFlashKeyRegister
                           A  2282    ;  232			FLASH_FDIV = 0x5F;			// 
                           A  2283    .LINE 232
                           A  2284    
040689 3E5F                A  2285    	LD	A,%5F
04068B ED39F9              A  2286    	OUT0	(249),A
                           A  2287    ;  233			
                           A  2288    ;  234			for(counter = 0; counter < FLAS
                           A  2289    .LINE 234
                           A  2290    
04068E 01000000            A  2291    	LD	BC,0
040692 DD0FFD              A  2292    	LD	(IX+%FFFFFFFD),BC
040695 18 1C               A  2293    	JR	L_61
040697                     A  2294    L_59:
                           A  2295    ;  235			{
                           A  2296    ;  236				FLASH_PAGE = counter;
                           A  2297    .LINE 236
                           A  2298    
040697 DD7EFD              A  2299    	LD	A,(IX+%FFFFFFFD)
04069A ED39FC              A  2300    	OUT0	(252),A
                           A  2301    ;  237				FLASH_PGCTL = 0x02;			
                           A  2302    .LINE 237
                           A  2303    
04069D 3E02                A  2304    	LD	A,%2
04069F ED39FF              A  2305    	OUT0	(255),A
                           A  2306    ;  238	
                           A  2307    ;  239				do
0406A2                     A  2308    L_57:
                           A  2309    .LINE 239
                           A  2310    
                           A  2311    ;  240				{
                           A  2312    ;  241					value = FLASH_PGCTL;
                           A  2313    .LINE 241
                           A  2314    
0406A2 ED38FF              A  2315    	IN0	A,(255)
0406A5 DD77E5              A  2316    	LD	(IX+%FFFFFFE5),A
                           A  2317    ;  242				}
                           A  2318    ;  243				while(value & 0x02);// wait
                           A  2319    .LINE 243
                           A  2320    
0406A8 E602                A  2321    	AND	A,%2
0406AA 20 F6               A  2322    	JR	NZ,L_57
0406AC DD07FD              A  2323    	LD	BC,(IX+%FFFFFFFD)
0406AF 03                  A  2324    	INC	BC
0406B0 DD0FFD              A  2325    	LD	(IX+%FFFFFFFD),BC
                           A  2326    ;  244			}
0406B3                     A  2327    L_61:
                           A  2328    .LINE 244
                           A  2329    
0406B3 01800000            A  2330    	LD	BC,128
0406B7 DD27FD              A  2331    	LD	HL,(IX+%FFFFFFFD)
0406BA B7                  A  2332    	OR	A,A
0406BB ED42                A  2333    	SBC	HL,BC
0406BD 38 D8               A  2334    	JR	C,L_59
                           A  2335    ;  245			printf("\r\n");
                           A  2336    .LINE 245
                           A  2337    
0406BF 01 76 18 04         A  2338    	LD	BC,___print_uputch
0406C3 ED43 04 28 04       A  2339    	LD	(___print_xputch),BC
0406C8 01 6F 2A 04         A  2340    	LD	BC,L__53
0406CC C5                  A  2341    	PUSH	BC
0406CD CD 05 17 04         A  2342    	CALL	___print_sendstring
0406D1 C1                  A  2343    	POP	BC
                           A  2344    ;  246					
                           A  2345    ;  247			// determine number of pages to
                           A  2346    ;  248			pagemax = filesize/PAGESIZE;
                           A  2347    .LINE 248
                           A  2348    
0406D2 DD27E9              A  2349    	LD	HL,(IX+%FFFFFFE9)
0406D5 3E0A                A  2350    	LD	A,%A
0406D7 CD E9 1E 04         A  2351    	CALL	__ishru_b
0406DB DD2FF7              A  2352    	LD	(IX+%FFFFFFF7),HL
                           A  2353    ;  249			if(filesize%PAGESIZE) // last p
                           A  2354    .LINE 249
                           A  2355    
0406DE 01FF0300            A  2356    	LD	BC,1023
0406E2 DD27E9              A  2357    	LD	HL,(IX+%FFFFFFE9)
0406E5 CD 95 1F 04         A  2358    	CALL	__iand
0406E9 DD2FDB              A  2359    	LD	(IX+%FFFFFFDB),HL
0406EC CD 33 1C 04         A  2360    	CALL	__icmpzero
0406F0 28 0F               A  2361    	JR	Z,L_64
                           A  2362    ;  250			{
                           A  2363    ;  251				pagemax += 1;
                           A  2364    .LINE 251
                           A  2365    
0406F2 DD07F7              A  2366    	LD	BC,(IX+%FFFFFFF7)
0406F5 03                  A  2367    	INC	BC
0406F6 DD0FF7              A  2368    	LD	(IX+%FFFFFFF7),BC
                           A  2369    ;  252				lastpagebytes = filesize%PA
                           A  2370    .LINE 252
                           A  2371    
0406F9 DD07DB              A  2372    	LD	BC,(IX+%FFFFFFDB)
0406FC DD0FE2              A  2373    	LD	(IX+%FFFFFFE2),BC
                           A  2374    ;  253			}
                           A  2375    ;  254			else lastpagebytes = PAGESIZE; 
                           A  2376    .LINE 254
                           A  2377    
0406FF 18 07               A  2378    	JR	L_72
040701                     A  2379    L_64:
040701 01000400            A  2380    	LD	BC,1024
040705 DD0FE2              A  2381    	LD	(IX+%FFFFFFE2),BC
040708                     A  2382    L_72:
                           A  2383    ;  255			
                           A  2384    ;  256			// write out each page to flash
                           A  2385    ;  257			for(counter = 0; counter < page
                           A  2386    .LINE 257
                           A  2387    
040708 01000000            A  2388    	LD	BC,0
04070C DD0FFD              A  2389    	LD	(IX+%FFFFFFFD),BC
04070F C3 BB 07 04         A  2390    	JR	L_71
040713                     A  2391    L_69:
                           A  2392    ;  258			{
                           A  2393    ;  259				printf("\rWriting flash pag
                           A  2394    .LINE 259
                           A  2395    
040713 01 76 18 04         A  2396    	LD	BC,___print_uputch
040717 ED43 04 28 04       A  2397    	LD	(___print_xputch),BC
04071C 01 72 2A 04         A  2398    	LD	BC,L__55
040720 C5                  A  2399    	PUSH	BC
040721 CD 05 17 04         A  2400    	CALL	___print_sendstring
040725 C1                  A  2401    	POP	BC
040726 3E03                A  2402    	LD	A,%3
040728 32 92 2E 04         A  2403    	LD	(___print_fmt+5),A
04072C 3E40                A  2404    	LD	A,%40
04072E 32 8E 2E 04         A  2405    	LD	(___print_fmt+1),A
040732 DD07FD              A  2406    	LD	BC,(IX+%FFFFFFFD)
040735 03                  A  2407    	INC	BC
040736 AF                  A  2408    	XOR	A,A
040737 C5D1                A  2409    	LD	DE,BC
040739 4F                  A  2410    	LD	C,A
04073A 0600                A  2411    	LD	B,%0
04073C C5                  A  2412    	PUSH	BC
04073D D5                  A  2413    	PUSH	DE
04073E CD FC 18 04         A  2414    	CALL	__u_itoa
040742 C1                  A  2415    	POP	BC
040743 C1                  A  2416    	POP	BC
040744 012F0000            A  2417    	LD	BC,47
040748 C5                  A  2418    	PUSH	BC
040749 CD 76 18 04         A  2419    	CALL	___print_uputch
04074D C1                  A  2420    	POP	BC
04074E 3E03                A  2421    	LD	A,%3
040750 32 92 2E 04         A  2422    	LD	(___print_fmt+5),A
040754 3E40                A  2423    	LD	A,%40
040756 32 8E 2E 04         A  2424    	LD	(___print_fmt+1),A
04075A DD07F7              A  2425    	LD	BC,(IX+%FFFFFFF7)
04075D AF                  A  2426    	XOR	A,A
04075E C5D1                A  2427    	LD	DE,BC
040760 4F                  A  2428    	LD	C,A
040761 0600                A  2429    	LD	B,%0
040763 C5                  A  2430    	PUSH	BC
040764 D5                  A  2431    	PUSH	DE
040765 CD FC 18 04         A  2432    	CALL	__u_itoa
040769 C1                  A  2433    	POP	BC
04076A C1                  A  2434    	POP	BC
                           A  2435    ;  260				
                           A  2436    ;  261				if(counter == (pagemax - 1)
                           A  2437    .LINE 261
                           A  2438    
04076B DD31F7              A  2439    	LD	IY,(IX+%FFFFFFF7)
04076E ED23FF              A  2440    	LEA	HL,IY+%FFFFFFFF
040771 DD07FD              A  2441    	LD	BC,(IX+%FFFFFFFD)
040774 B7                  A  2442    	OR	A,A
040775 ED42                A  2443    	SBC	HL,BC
040777 20 15               A  2444    	JR	NZ,L_67
                           A  2445    ;  262					fastmemcpy(addressto,ad
                           A  2446    .LINE 262
                           A  2447    
040779 DD07E2              A  2448    	LD	BC,(IX+%FFFFFFE2)
04077C C5                  A  2449    	PUSH	BC
04077D DD07F0              A  2450    	LD	BC,(IX+%FFFFFFF0)
040780 C5                  A  2451    	PUSH	BC
040781 DD07F3              A  2452    	LD	BC,(IX+%FFFFFFF3)
040784 C5                  A  2453    	PUSH	BC
040785 CD FE 12 04         A  2454    	CALL	_fastmemcpy
040789 C1                  A  2455    	POP	BC
04078A C1                  A  2456    	POP	BC
04078B C1                  A  2457    	POP	BC
                           A  2458    ;  263					//printf("Fake copy to 
                           A  2459    ;  264				else 
                           A  2460    .LINE 264
                           A  2461    
04078C 18 14               A  2462    	JR	L_68
04078E                     A  2463    L_67:
                           A  2464    ;  265					fastmemcpy(addressto,ad
                           A  2465    .LINE 265
                           A  2466    
04078E 01000400            A  2467    	LD	BC,1024
040792 C5                  A  2468    	PUSH	BC
040793 DD07F0              A  2469    	LD	BC,(IX+%FFFFFFF0)
040796 C5                  A  2470    	PUSH	BC
040797 DD07F3              A  2471    	LD	BC,(IX+%FFFFFFF3)
04079A C5                  A  2472    	PUSH	BC
04079B CD FE 12 04         A  2473    	CALL	_fastmemcpy
04079F C1                  A  2474    	POP	BC
0407A0 C1                  A  2475    	POP	BC
0407A1 C1                  A  2476    	POP	BC
0407A2                     A  2477    L_68:
                           A  2478    ;  266					//printf("Fake copy to 
                           A  2479    ;  267			
                           A  2480    ;  268				addressto += PAGESIZE;
                           A  2481    .LINE 268
                           A  2482    
0407A2 01000400            A  2483    	LD	BC,1024
0407A6 DD27F3              A  2484    	LD	HL,(IX+%FFFFFFF3)
0407A9 09                  A  2485    	ADD	HL,BC
0407AA DD2FF3              A  2486    	LD	(IX+%FFFFFFF3),HL
                           A  2487    ;  269				addressfrom += PAGESIZE;
                           A  2488    .LINE 269
                           A  2489    
0407AD DD27F0              A  2490    	LD	HL,(IX+%FFFFFFF0)
0407B0 09                  A  2491    	ADD	HL,BC
0407B1 DD2FF0              A  2492    	LD	(IX+%FFFFFFF0),HL
0407B4 DD07FD              A  2493    	LD	BC,(IX+%FFFFFFFD)
0407B7 03                  A  2494    	INC	BC
0407B8 DD0FFD              A  2495    	LD	(IX+%FFFFFFFD),BC
                           A  2496    ;  270			}
0407BB                     A  2497    L_71:
                           A  2498    .LINE 270
                           A  2499    
0407BB DD07F7              A  2500    	LD	BC,(IX+%FFFFFFF7)
0407BE DD27FD              A  2501    	LD	HL,(IX+%FFFFFFFD)
0407C1 B7                  A  2502    	OR	A,A
0407C2 ED42                A  2503    	SBC	HL,BC
0407C4 DA 13 07 04         A  2504    	JR	C,L_69
                           A  2505    ;  271			lockFlashKeyRegister();	// lock
                           A  2506    .LINE 271
                           A  2507    
0407C8 CD E9 12 04         A  2508    	CALL	_lockFlashKeyRegister
                           A  2509    ;  272			printf("\r\nChecking CRC... ");
                           A  2510    .LINE 272
                           A  2511    
0407CC 01 76 18 04         A  2512    	LD	BC,___print_uputch
0407D0 ED43 04 28 04       A  2513    	LD	(___print_xputch),BC
0407D5 01 87 2A 04         A  2514    	LD	BC,L__58
0407D9 C5                  A  2515    	PUSH	BC
0407DA CD 05 17 04         A  2516    	CALL	___print_sendstring
0407DE C1                  A  2517    	POP	BC
                           A  2518    ;  273			crc32_initialize();
                           A  2519    .LINE 273
                           A  2520    
0407DF CD 88 15 04         A  2521    	CALL	_crc32_initialize
                           A  2522    ;  274			crc32(FLASHSTART, filesize);
                           A  2523    .LINE 274
                           A  2524    
0407E3 DD07E9              A  2525    	LD	BC,(IX+%FFFFFFE9)
0407E6 C5                  A  2526    	PUSH	BC
0407E7 01000000            A  2527    	LD	BC,0
0407EB C5                  A  2528    	PUSH	BC
0407EC CD DA 15 04         A  2529    	CALL	_crc32
0407F0 C1                  A  2530    	POP	BC
0407F1 C1                  A  2531    	POP	BC
                           A  2532    ;  275			crcresult = crc32_finalize();
                           A  2533    .LINE 275
                           A  2534    
0407F2 CD 9D 15 04         A  2535    	CALL	_crc32_finalize
0407F6 E5C1                A  2536    	LD	BC,HL
0407F8 DD0FDE              A  2537    	LD	(IX+%FFFFFFDE),BC
0407FB DD73E1              A  2538    	LD	(IX+%FFFFFFE1),E
                           A  2539    ;  276			if(crcresult == moscrc) {
                           A  2540    .LINE 276
                           A  2541    
0407FE 2A 77 2D 04         A  2542    	LD	HL,(_moscrc)
040802 3A 7A 2D 04         A  2543    	LD	A,(_moscrc+3)
040806 5F                  A  2544    	LD	E,A
040807 DD7EE1              A  2545    	LD	A,(IX+%FFFFFFE1)
04080A CD 58 1F 04         A  2546    	CALL	__lcmpu
04080E 20 19               A  2547    	JR	NZ,L_75
                           A  2548    ;  277				printf("OK\r\n");
                           A  2549    .LINE 277
                           A  2550    
040810 01 76 18 04         A  2551    	LD	BC,___print_uputch
040814 ED43 04 28 04       A  2552    	LD	(___print_xputch),BC
040819 01 9A 2A 04         A  2553    	LD	BC,L__60
04081D C5                  A  2554    	PUSH	BC
04081E CD 05 17 04         A  2555    	CALL	___print_sendstring
040822 C1                  A  2556    	POP	BC
                           A  2557    ;  278				success = true;
                           A  2558    .LINE 278
                           A  2559    
040823 DD36F601            A  2560    	LD	(IX+%FFFFFFF6),%1
                           A  2561    ;  279			}
                           A  2562    ;  280			else {
                           A  2563    .LINE 280
                           A  2564    
040827 18 13               A  2565    	JR	L_77
040829                     A  2566    L_75:
                           A  2567    ;  281				printf("ERROR\r\n");
                           A  2568    .LINE 281
                           A  2569    
040829 01 76 18 04         A  2570    	LD	BC,___print_uputch
04082D ED43 04 28 04       A  2571    	LD	(___print_xputch),BC
040832 01 9F 2A 04         A  2572    	LD	BC,L__61
040836 C5                  A  2573    	PUSH	BC
040837 CD 05 17 04         A  2574    	CALL	___print_sendstring
04083B C1                  A  2575    	POP	BC
                           A  2576    ;  282			}
04083C                     A  2577    L_77:
                           A  2578    .LINE 282
                           A  2579    
                           A  2580    ;  283			attempt++;
                           A  2581    .LINE 283
                           A  2582    
04083C DD07FA              A  2583    	LD	BC,(IX+%FFFFFFFA)
04083F 03                  A  2584    	INC	BC
040840 DD0FFA              A  2585    	LD	(IX+%FFFFFFFA),BC
                           A  2586    ;  284		}
040843                     A  2587    L_78:
                           A  2588    .LINE 284
                           A  2589    
040843 DD7EF6              A  2590    	LD	A,(IX+%FFFFFFF6)
040846 B7                  A  2591    	OR	A,A
040847 20 0E               A  2592    	JR	NZ,L_80
040849 01030000            A  2593    	LD	BC,3
04084D DD27FA              A  2594    	LD	HL,(IX+%FFFFFFFA)
040850 B7                  A  2595    	OR	A,A
040851 ED42                A  2596    	SBC	HL,BC
040853 FA 1E 06 04         A  2597    	JP	M,L_79
040857                     A  2598    L_80:
                           A  2599    ;  285		printf("\r\n");
                           A  2600    .LINE 285
                           A  2601    
040857 01 76 18 04         A  2602    	LD	BC,___print_uputch
04085B ED43 04 28 04       A  2603    	LD	(___print_xputch),BC
040860 01 A7 2A 04         A  2604    	LD	BC,L__64
040864 C5                  A  2605    	PUSH	BC
040865 CD 05 17 04         A  2606    	CALL	___print_sendstring
040869 C1                  A  2607    	POP	BC
                           A  2608    ;  286		return success;
                           A  2609    .LINE 286
                           A  2610    
04086A DD7EF6              A  2611    	LD	A,(IX+%FFFFFFF6)
                           A  2612    ;  287	}
04086D                     A  2613    L_81:
                           A  2614    .LINE 287
                           A  2615    
04086D DDF9                A  2616    	LD	SP,IX
04086F DDE1                A  2617    	POP	IX
040871 C9                  A  2618    	RET	
                           A  2619    
                           A  2620    
                           A  2621    ;**************************** _update_mos *****
                           A  2622    ;Name                         Addr/Register   S
                           A  2623    ;_lockFlashKeyRegister               IMPORT  --
                           A  2624    ;_fastmemcpy                         IMPORT  --
                           A  2625    ;___print_fmt                        IMPORT    
                           A  2626    ;_enableFlashKeyRegister             IMPORT  --
                           A  2627    ;__u_itoa                            IMPORT  --
                           A  2628    ;_moscrc                             STATIC    
                           A  2629    ;_crc32_finalize                     IMPORT  --
                           A  2630    ;_mos_fread                          IMPORT  --
                           A  2631    ;_crc32                              IMPORT  --
                           A  2632    ;_crc32_initialize                   IMPORT  --
                           A  2633    ;_getFileSize                        IMPORT  --
                           A  2634    ;_mos_fopen                          IMPORT  --
                           A  2635    ;___print_sendstring                 IMPORT  --
                           A  2636    ;___print_xputch                     IMPORT    
                           A  2637    ;___print_uputch                     IMPORT  --
                           A  2638    ;_putch                              IMPORT  --
                           A  2639    ;G_0                                  IX-37    
                           A  2640    ;crcresult                            IX-34    
                           A  2641    ;lastpagebytes                        IX-30    
                           A  2642    ;value                                IX-27    
                           A  2643    ;got                                  IX-26    
                           A  2644    ;filesize                             IX-23    
                           A  2645    ;ptr                                  IX-20    
                           A  2646    ;file                                 IX-17    
                           A  2647    ;addressfrom                          IX-16    
                           A  2648    ;addressto                            IX-13    
                           A  2649    ;success                              IX-10    
                           A  2650    ;pagemax                               IX-9    
                           A  2651    ;attempt                               IX-6    
                           A  2652    ;counter                               IX-3    
                           A  2653    ;filename                              IX+6    
                           A  2654    
                           A  2655    
                           A  2656    ; Stack Frame Size: 46 (bytes)
                           A  2657    ;       Spill Code: 0 (instruction)
                           A  2658    
                           A  2659    
                           A  2660    .ENDFUNC "update_mos",287,"_update_mos"
                           A  2661    	SEGMENT STRSECT
0429E2                     A  2662    L__40:
0429E2 50726F67 72616D6D   A  2663    	DB	"Programming MOS firmware to ez80 flash
0429EA 696E6720 4D4F5320 
0429F2 6669726D 77617265 
0429FA 20746F20 657A3830 
042A02 20666C61 73682E2E 
042A0A 2E 
042A0B 0D0A0D0A 00         A  2664    	DB	13,10,13,10,0
042A10                     A  2665    L__41:
042A10 52656164 696E6720   A  2666    	DB	"Reading MOS firmware"
042A18 4D4F5320 6669726D 
042A20 77617265 
042A24 00                  A  2667    	DB	0
042A25                     A  2668    L__43:
042A25 0D0A00              A  2669    	DB	13,10,0
042A28                     A  2670    L__45:
042A28 4572726F 72207265   A  2671    	DB	"Error reading file to memory"
042A30 6164696E 67206669 
042A38 6C652074 6F206D65 
042A40 6D6F7279 
042A44 0D0A00              A  2672    	DB	13,10,0
042A47                     A  2673    L__46:
042A47 0D0A00              A  2674    	DB	13,10,0
042A4A                     A  2675    L__48:
042A4A 52657472 79206174   A  2676    	DB	"Retry attempt #"
042A52 74656D70 742023 
042A59 00                  A  2677    	DB	0
042A5A                     A  2678    L__49:
042A5A 0D0A00              A  2679    	DB	13,10,0
042A5D                     A  2680    L__50:
042A5D 45726173 696E6720   A  2681    	DB	"Erasing flash... "
042A65 666C6173 682E2E2E 
042A6D 20 
042A6E 00                  A  2682    	DB	0
042A6F                     A  2683    L__53:
042A6F 0D0A00              A  2684    	DB	13,10,0
042A72                     A  2685    L__55:
042A72 0D                  A  2686    	DB	13
042A73 57726974 696E6720   A  2687    	DB	"Writing flash page "
042A7B 666C6173 68207061 
042A83 676520 
042A86 00                  A  2688    	DB	0
042A87                     A  2689    L__58:
042A87 0D0A                A  2690    	DB	13,10
042A89 43686563 6B696E67   A  2691    	DB	"Checking CRC... "
042A91 20435243 2E2E2E20 
042A99 00                  A  2692    	DB	0
042A9A                     A  2693    L__60:
042A9A 4F4B                A  2694    	DB	"OK"
042A9C 0D0A00              A  2695    	DB	13,10,0
042A9F                     A  2696    L__61:
042A9F 4552524F 52         A  2697    	DB	"ERROR"
042AA4 0D0A00              A  2698    	DB	13,10,0
042AA7                     A  2699    L__64:
042AA7 0D0A00              A  2700    	DB	13,10,0
                           A  2701    	SEGMENT CODE
                           A  2702    ;  288	
                           A  2703    ;  289	void echoVDP(uint8_t value) {
040872                     A  2704    _echoVDP:
                           A  2705    .DEFINE "_echoVDP"
                           A  2706    
                           A  2707    .VALUE _echoVDP
                           A  2708    
                           A  2709    .CLASS 2
                           A  2710    
                           A  2711    .TYPE 65
                           A  2712    
                           A  2713    .ENDEF
                           A  2714    
                           A  2715    .BEGFUNC "echoVDP",289,"_echoVDP"
                           A  2716    
                           A  2717    .LINE 289
                           A  2718    
                           A  2719    .DEFINE "value"
                           A  2720    
                           A  2721    .CLASS 65
                           A  2722    
                           A  2723    .VALUE 6
                           A  2724    
                           A  2725    .TYPE 12
                           A  2726    
                           A  2727    .ENDEF
                           A  2728    
040872 DDE5                A  2729    	PUSH	IX
040874 DD210000 00         A  2730    	LD	IX,0
040879 DD39                A  2731    	ADD	IX,SP
                           A  2732    ;  290		putch(23);
                           A  2733    .LINE 290
                           A  2734    
04087B 01170000            A  2735    	LD	BC,23
04087F C5                  A  2736    	PUSH	BC
040880 CD E5 00 04         A  2737    	CALL	_putch
040884 C1                  A  2738    	POP	BC
                           A  2739    ;  291		putch(0);
                           A  2740    .LINE 291
                           A  2741    
040885 01000000            A  2742    	LD	BC,0
040889 C5                  A  2743    	PUSH	BC
04088A CD E5 00 04         A  2744    	CALL	_putch
04088E C1                  A  2745    	POP	BC
                           A  2746    ;  292		putch(0x80);
                           A  2747    .LINE 292
                           A  2748    
04088F 01800000            A  2749    	LD	BC,128
040893 C5                  A  2750    	PUSH	BC
040894 CD E5 00 04         A  2751    	CALL	_putch
040898 C1                  A  2752    	POP	BC
                           A  2753    ;  293		putch(value);
                           A  2754    .LINE 293
                           A  2755    
040899 DD7E06              A  2756    	LD	A,(IX+%6)
04089C B7ED62              A  2757    	UEXT	HL
04089F 6F                  A  2758    	LD	L,A
0408A0 E5                  A  2759    	PUSH	HL
0408A1 CD E5 00 04         A  2760    	CALL	_putch
0408A5 C1                  A  2761    	POP	BC
                           A  2762    ;  294		delayms(100);
                           A  2763    .LINE 294
                           A  2764    
0408A6 01640000            A  2765    	LD	BC,100
0408AA C5                  A  2766    	PUSH	BC
0408AB CD A2 13 04         A  2767    	CALL	_delayms
0408AF C1                  A  2768    	POP	BC
                           A  2769    ;  295	}
                           A  2770    .LINE 295
                           A  2771    
0408B0 DDF9                A  2772    	LD	SP,IX
0408B2 DDE1                A  2773    	POP	IX
0408B4 C9                  A  2774    	RET	
                           A  2775    
                           A  2776    
                           A  2777    ;**************************** _echoVDP ********
                           A  2778    ;Name                         Addr/Register   S
                           A  2779    ;_delayms                            IMPORT  --
                           A  2780    ;_putch                              IMPORT  --
                           A  2781    ;value                                 IX+6    
                           A  2782    
                           A  2783    
                           A  2784    ; Stack Frame Size: 9 (bytes)
                           A  2785    ;       Spill Code: 0 (instruction)
                           A  2786    
                           A  2787    
                           A  2788    .ENDFUNC "echoVDP",295,"_echoVDP"
                           A  2789    ;  296	
                           A  2790    ;  297	int getCommand(const char *command) {
0408B5                     A  2791    _getCommand:
                           A  2792    .DEFINE "_getCommand"
                           A  2793    
                           A  2794    .VALUE _getCommand
                           A  2795    
                           A  2796    .CLASS 2
                           A  2797    
                           A  2798    .TYPE 68
                           A  2799    
                           A  2800    .ENDEF
                           A  2801    
                           A  2802    .BEGFUNC "getCommand",297,"_getCommand"
                           A  2803    
                           A  2804    .LINE 297
                           A  2805    
                           A  2806    .DEFINE "command"
                           A  2807    
                           A  2808    .CLASS 65
                           A  2809    
                           A  2810    .VALUE 6
                           A  2811    
                           A  2812    .TYPE 194
                           A  2813    
                           A  2814    .ENDEF
                           A  2815    
0408B5 DDE5                A  2816    	PUSH	IX
0408B7 DD210000 00         A  2817    	LD	IX,0
0408BC DD39                A  2818    	ADD	IX,SP
                           A  2819    ;  298		if(memcmp(command, "all\0", 4) == 0
                           A  2820    .LINE 298
                           A  2821    
0408BE 01040000            A  2822    	LD	BC,4
0408C2 C5                  A  2823    	PUSH	BC
0408C3 01 AA 2A 04         A  2824    	LD	BC,L__67
0408C7 C5                  A  2825    	PUSH	BC
0408C8 DD0706              A  2826    	LD	BC,(IX+%6)
0408CB C5                  A  2827    	PUSH	BC
0408CC CD 09 1C 04         A  2828    	CALL	_memcmp
0408D0 C1                  A  2829    	POP	BC
0408D1 C1                  A  2830    	POP	BC
0408D2 C1                  A  2831    	POP	BC
0408D3 CD 33 1C 04         A  2832    	CALL	__icmpzero
0408D7 20 08               A  2833    	JR	NZ,L_85
0408D9 21010000            A  2834    	LD	HL,1
0408DD C3 AE 09 04         A  2835    	JR	L_97
0408E1                     A  2836    L_85:
                           A  2837    ;  299		if(memcmp(command, "mos\0", 4) == 0
                           A  2838    .LINE 299
                           A  2839    
0408E1 01040000            A  2840    	LD	BC,4
0408E5 C5                  A  2841    	PUSH	BC
0408E6 01 AF 2A 04         A  2842    	LD	BC,L__69
0408EA C5                  A  2843    	PUSH	BC
0408EB DD0706              A  2844    	LD	BC,(IX+%6)
0408EE C5                  A  2845    	PUSH	BC
0408EF CD 09 1C 04         A  2846    	CALL	_memcmp
0408F3 C1                  A  2847    	POP	BC
0408F4 C1                  A  2848    	POP	BC
0408F5 C1                  A  2849    	POP	BC
0408F6 CD 33 1C 04         A  2850    	CALL	__icmpzero
0408FA 20 08               A  2851    	JR	NZ,L_87
0408FC 21020000            A  2852    	LD	HL,2
040900 C3 AE 09 04         A  2853    	JR	L_97
040904                     A  2854    L_87:
                           A  2855    ;  300		if(memcmp(command, "vdp\0", 4) == 0
                           A  2856    .LINE 300
                           A  2857    
040904 01040000            A  2858    	LD	BC,4
040908 C5                  A  2859    	PUSH	BC
040909 01 B4 2A 04         A  2860    	LD	BC,L__71
04090D C5                  A  2861    	PUSH	BC
04090E DD0706              A  2862    	LD	BC,(IX+%6)
040911 C5                  A  2863    	PUSH	BC
040912 CD 09 1C 04         A  2864    	CALL	_memcmp
040916 C1                  A  2865    	POP	BC
040917 C1                  A  2866    	POP	BC
040918 C1                  A  2867    	POP	BC
040919 CD 33 1C 04         A  2868    	CALL	__icmpzero
04091D 20 08               A  2869    	JR	NZ,L_89
04091F 21030000            A  2870    	LD	HL,3
040923 C3 AE 09 04         A  2871    	JR	L_97
040927                     A  2872    L_89:
                           A  2873    ;  301		if(memcmp(command, "batch\0", 6) ==
                           A  2874    .LINE 301
                           A  2875    
040927 01060000            A  2876    	LD	BC,6
04092B C5                  A  2877    	PUSH	BC
04092C 01 B9 2A 04         A  2878    	LD	BC,L__73
040930 C5                  A  2879    	PUSH	BC
040931 DD0706              A  2880    	LD	BC,(IX+%6)
040934 C5                  A  2881    	PUSH	BC
040935 CD 09 1C 04         A  2882    	CALL	_memcmp
040939 C1                  A  2883    	POP	BC
04093A C1                  A  2884    	POP	BC
04093B C1                  A  2885    	POP	BC
04093C CD 33 1C 04         A  2886    	CALL	__icmpzero
040940 20 06               A  2887    	JR	NZ,L_91
040942 21050000            A  2888    	LD	HL,5
040946 18 66               A  2889    	JR	L_97
040948                     A  2890    L_91:
                           A  2891    ;  302		if(memcmp(command, "-f\0", 3) == 0)
                           A  2892    .LINE 302
                           A  2893    
040948 01030000            A  2894    	LD	BC,3
04094C C5                  A  2895    	PUSH	BC
04094D 01 C0 2A 04         A  2896    	LD	BC,L__75
040951 C5                  A  2897    	PUSH	BC
040952 DD0706              A  2898    	LD	BC,(IX+%6)
040955 C5                  A  2899    	PUSH	BC
040956 CD 09 1C 04         A  2900    	CALL	_memcmp
04095A C1                  A  2901    	POP	BC
04095B C1                  A  2902    	POP	BC
04095C C1                  A  2903    	POP	BC
04095D CD 33 1C 04         A  2904    	CALL	__icmpzero
040961 20 06               A  2905    	JR	NZ,L_93
040963 21040000            A  2906    	LD	HL,4
040967 18 45               A  2907    	JR	L_97
040969                     A  2908    L_93:
                           A  2909    ;  303		if(memcmp(command, "force\0", 6) ==
                           A  2910    .LINE 303
                           A  2911    
040969 01060000            A  2912    	LD	BC,6
04096D C5                  A  2913    	PUSH	BC
04096E 01 C4 2A 04         A  2914    	LD	BC,L__77
040972 C5                  A  2915    	PUSH	BC
040973 DD0706              A  2916    	LD	BC,(IX+%6)
040976 C5                  A  2917    	PUSH	BC
040977 CD 09 1C 04         A  2918    	CALL	_memcmp
04097B C1                  A  2919    	POP	BC
04097C C1                  A  2920    	POP	BC
04097D C1                  A  2921    	POP	BC
04097E CD 33 1C 04         A  2922    	CALL	__icmpzero
040982 20 06               A  2923    	JR	NZ,L_95
040984 21040000            A  2924    	LD	HL,4
040988 18 24               A  2925    	JR	L_97
04098A                     A  2926    L_95:
                           A  2927    ;  304		if(memcmp(command, "-force\0", 7) =
                           A  2928    .LINE 304
                           A  2929    
04098A 01070000            A  2930    	LD	BC,7
04098E C5                  A  2931    	PUSH	BC
04098F 01 CB 2A 04         A  2932    	LD	BC,L__79
040993 C5                  A  2933    	PUSH	BC
040994 DD0706              A  2934    	LD	BC,(IX+%6)
040997 C5                  A  2935    	PUSH	BC
040998 CD 09 1C 04         A  2936    	CALL	_memcmp
04099C C1                  A  2937    	POP	BC
04099D C1                  A  2938    	POP	BC
04099E C1                  A  2939    	POP	BC
04099F CD 33 1C 04         A  2940    	CALL	__icmpzero
0409A3 20 06               A  2941    	JR	NZ,L_96
0409A5 21040000            A  2942    	LD	HL,4
0409A9 18 03               A  2943    	JR	L_97
0409AB                     A  2944    L_96:
                           A  2945    ;  305		return CMDUNKNOWN;
                           A  2946    .LINE 305
                           A  2947    
0409AB B7                  A  2948    	OR	A,A
0409AC ED62                A  2949    	SBC	HL,HL
                           A  2950    ;  306	}
0409AE                     A  2951    L_97:
                           A  2952    .LINE 306
                           A  2953    
0409AE DDF9                A  2954    	LD	SP,IX
0409B0 DDE1                A  2955    	POP	IX
0409B2 C9                  A  2956    	RET	
                           A  2957    
                           A  2958    
                           A  2959    ;**************************** _getCommand *****
                           A  2960    ;Name                         Addr/Register   S
                           A  2961    ;_memcmp                             IMPORT  --
                           A  2962    ;command                               IX+6    
                           A  2963    
                           A  2964    
                           A  2965    ; Stack Frame Size: 9 (bytes)
                           A  2966    ;       Spill Code: 0 (instruction)
                           A  2967    
                           A  2968    
                           A  2969    .ENDFUNC "getCommand",306,"_getCommand"
                           A  2970    	SEGMENT STRSECT
042AAA                     A  2971    L__67:
042AAA 616C6C              A  2972    	DB	"all"
042AAD 0000                A  2973    	DB	0,0
042AAF                     A  2974    L__69:
042AAF 6D6F73              A  2975    	DB	"mos"
042AB2 0000                A  2976    	DB	0,0
042AB4                     A  2977    L__71:
042AB4 766470              A  2978    	DB	"vdp"
042AB7 0000                A  2979    	DB	0,0
042AB9                     A  2980    L__73:
042AB9 62617463 68         A  2981    	DB	"batch"
042ABE 0000                A  2982    	DB	0,0
042AC0                     A  2983    L__75:
042AC0 2D66                A  2984    	DB	"-f"
042AC2 0000                A  2985    	DB	0,0
042AC4                     A  2986    L__77:
042AC4 666F7263 65         A  2987    	DB	"force"
042AC9 0000                A  2988    	DB	0,0
042ACB                     A  2989    L__79:
042ACB 2D666F72 6365       A  2990    	DB	"-force"
042AD1 0000                A  2991    	DB	0,0
                           A  2992    	SEGMENT CODE
                           A  2993    ;  307	
                           A  2994    ;  308	bool parseCommands(int argc, char *argv
0409B3                     A  2995    _parseCommands:
                           A  2996    .DEFINE "_parseCommands"
                           A  2997    
                           A  2998    .VALUE _parseCommands
                           A  2999    
                           A  3000    .CLASS 2
                           A  3001    
                           A  3002    .TYPE 76
                           A  3003    
                           A  3004    .ENDEF
                           A  3005    
                           A  3006    .BEGFUNC "parseCommands",308,"_parseCommands"
                           A  3007    
                           A  3008    .LINE 308
                           A  3009    
                           A  3010    .DEFINE "argc"
                           A  3011    
                           A  3012    .CLASS 65
                           A  3013    
                           A  3014    .VALUE 6
                           A  3015    
                           A  3016    .TYPE 4
                           A  3017    
                           A  3018    .ENDEF
                           A  3019    
                           A  3020    .DEFINE "argv"
                           A  3021    
                           A  3022    .CLASS 65
                           A  3023    
                           A  3024    .VALUE 9
                           A  3025    
                           A  3026    .TYPE 290
                           A  3027    
                           A  3028    .ENDEF
                           A  3029    
                           A  3030    .DEFINE "argcounter"
                           A  3031    
                           A  3032    .CLASS 65
                           A  3033    
                           A  3034    .VALUE -3
                           A  3035    
                           A  3036    .TYPE 4
                           A  3037    
                           A  3038    .ENDEF
                           A  3039    
                           A  3040    .DEFINE "command"
                           A  3041    
                           A  3042    .CLASS 65
                           A  3043    
                           A  3044    .VALUE -15
                           A  3045    
                           A  3046    .TYPE 4
                           A  3047    
                           A  3048    .ENDEF
                           A  3049    
0409B3 DDE5                A  3050    	PUSH	IX
0409B5 DD210000 00         A  3051    	LD	IX,0
0409BA DD39                A  3052    	ADD	IX,SP
0409BC ED22F1              A  3053    	LEA	HL,IX+%FFFFFFF1
0409BF F9                  A  3054    	LD	SP,HL
                           A  3055    ;  309		int argcounter;
                           A  3056    ;  310		int command;
                           A  3057    ;  311	
                           A  3058    ;  312		argcounter = 1;
                           A  3059    .LINE 312
                           A  3060    
0409C0 01010000            A  3061    	LD	BC,1
0409C4 DD0FFD              A  3062    	LD	(IX+%FFFFFFFD),BC
                           A  3063    ;  313		while(argcounter < argc) {
                           A  3064    .LINE 313
                           A  3065    
0409C7 C3 60 0B 04         A  3066    	JR	L_128
0409CB                     A  3067    L_129:
                           A  3068    ;  314			command = getCommand(argv[argco
                           A  3069    .LINE 314
                           A  3070    
0409CB DD27FD              A  3071    	LD	HL,(IX+%FFFFFFFD)
0409CE E5C1                A  3072    	LD	BC,HL
0409D0 29                  A  3073    	ADD	HL,HL
0409D1 09                  A  3074    	ADD	HL,BC
0409D2 DD0709              A  3075    	LD	BC,(IX+%9)
0409D5 09                  A  3076    	ADD	HL,BC
0409D6 ED07                A  3077    	LD	BC,(HL)
0409D8 C5                  A  3078    	PUSH	BC
0409D9 CD B5 08 04         A  3079    	CALL	_getCommand
0409DD C1                  A  3080    	POP	BC
0409DE DD2FF1              A  3081    	LD	(IX+%FFFFFFF1),HL
                           A  3082    ;  315			switch(command) {
                           A  3083    .LINE 315
                           A  3084    
0409E1 CD CA 16 04         A  3085    	CALL	__seqcaseD
0409E5 E9                  A  3086    	JP	(HL)
0409E6                     A  3087    L__82:
0409E6 0600                A  3088    	DW	6
0409E8 0000                A  3089    	DW	0
0409EA 00                  A  3090    	DB	0
0409EB 000A04              A  3091    	DW24	L_98	
                           A  3092    
0409EE 050A04              A  3093    	DW24	L_99	
                           A  3094    
0409F1 460A04              A  3095    	DW24	L_103	
                           A  3096    
0409F4 BA0A04              A  3097    	DW24	L_111	
                           A  3098    
0409F7 420B04              A  3099    	DW24	L_122	
                           A  3100    
0409FA 2C0B04              A  3101    	DW24	L_119	
                           A  3102    
0409FD 590B04              A  3103    	DW24	L_127	
                           A  3104    
                           A  3105    ;  316				case CMDUNKNOWN:
040A00                     A  3106    L_98:
                           A  3107    .LINE 316
                           A  3108    
                           A  3109    ;  317					return false;
                           A  3110    .LINE 317
                           A  3111    
040A00 AF                  A  3112    	XOR	A,A
040A01 C3 8E 0B 04         A  3113    	JR	L_136
                           A  3114    ;  318					break;
                           A  3115    ;  319				case CMDALL:
040A05                     A  3116    L_99:
                           A  3117    .LINE 319
                           A  3118    
                           A  3119    ;  320					if(flashmos || flashvdp
                           A  3120    .LINE 320
                           A  3121    
040A05 3A 51 22 04         A  3122    	LD	A,(_flashmos)
040A09 B7                  A  3123    	OR	A,A
040A0A 20 07               A  3124    	JR	NZ,L_101
040A0C 3A 52 22 04         A  3125    	LD	A,(_flashvdp)
040A10 B7                  A  3126    	OR	A,A
040A11 28 05               A  3127    	JR	Z,L_102
040A13                     A  3128    L_101:
040A13 AF                  A  3129    	XOR	A,A
040A14 C3 8E 0B 04         A  3130    	JR	L_136
040A18                     A  3131    L_102:
                           A  3132    ;  321					strcpy(mosfilename, DEF
                           A  3133    .LINE 321
                           A  3134    
040A18 01 D3 2A 04         A  3135    	LD	BC,L__85
040A1C C5                  A  3136    	PUSH	BC
040A1D 01 77 2C 04         A  3137    	LD	BC,_mosfilename
040A21 C5                  A  3138    	PUSH	BC
040A22 CD 6E 1F 04         A  3139    	CALL	_strcpy
040A26 C1                  A  3140    	POP	BC
040A27 C1                  A  3141    	POP	BC
                           A  3142    ;  322					strcpy(vdpfilename, DEF
                           A  3143    .LINE 322
                           A  3144    
040A28 01 DB 2A 04         A  3145    	LD	BC,L__86
040A2C C5                  A  3146    	PUSH	BC
040A2D 01 7B 2D 04         A  3147    	LD	BC,_vdpfilename
040A31 C5                  A  3148    	PUSH	BC
040A32 CD 6E 1F 04         A  3149    	CALL	_strcpy
040A36 C1                  A  3150    	POP	BC
040A37 C1                  A  3151    	POP	BC
                           A  3152    ;  323					flashmos = true;
                           A  3153    .LINE 323
                           A  3154    
040A38 3E01                A  3155    	LD	A,%1
040A3A 32 51 22 04         A  3156    	LD	(_flashmos),A
                           A  3157    ;  324					flashvdp = true;
                           A  3158    .LINE 324
                           A  3159    
040A3E 32 52 22 04         A  3160    	LD	(_flashvdp),A
                           A  3161    ;  325					break;
                           A  3162    .LINE 325
                           A  3163    
040A42 C3 59 0B 04         A  3164    	JR	L_127
                           A  3165    ;  326				case CMDMOS:
040A46                     A  3166    L_103:
                           A  3167    .LINE 326
                           A  3168    
                           A  3169    ;  327					if(flashmos) return fal
                           A  3170    .LINE 327
                           A  3171    
040A46 3A 51 22 04         A  3172    	LD	A,(_flashmos)
040A4A B7                  A  3173    	OR	A,A
040A4B 28 05               A  3174    	JR	Z,L_109
040A4D AF                  A  3175    	XOR	A,A
040A4E C3 8E 0B 04         A  3176    	JR	L_136
040A52                     A  3177    L_109:
                           A  3178    ;  328					if((argc > (argcounter+
                           A  3179    .LINE 328
                           A  3180    
040A52 DD07FD              A  3181    	LD	BC,(IX+%FFFFFFFD)
040A55 03                  A  3182    	INC	BC
040A56 DD0FFA              A  3183    	LD	(IX+%FFFFFFFA),BC
040A59 DD0706              A  3184    	LD	BC,(IX+%6)
040A5C DD27FA              A  3185    	LD	HL,(IX+%FFFFFFFA)
040A5F B7                  A  3186    	OR	A,A
040A60 ED42                A  3187    	SBC	HL,BC
040A62 F2 A0 0A 04         A  3188    	JP	P,L_108
040A66 DD27FA              A  3189    	LD	HL,(IX+%FFFFFFFA)
040A69 E5C1                A  3190    	LD	BC,HL
040A6B 29                  A  3191    	ADD	HL,HL
040A6C 09                  A  3192    	ADD	HL,BC
040A6D DD0709              A  3193    	LD	BC,(IX+%9)
040A70 09                  A  3194    	ADD	HL,BC
040A71 ED07                A  3195    	LD	BC,(HL)
040A73 C5                  A  3196    	PUSH	BC
040A74 CD B5 08 04         A  3197    	CALL	_getCommand
040A78 C1                  A  3198    	POP	BC
040A79 CD 33 1C 04         A  3199    	CALL	__icmpzero
040A7D 20 21               A  3200    	JR	NZ,L_108
                           A  3201    ;  329						strcpy(mosfilename,
                           A  3202    .LINE 329
                           A  3203    
040A7F DD27FA              A  3204    	LD	HL,(IX+%FFFFFFFA)
040A82 E5C1                A  3205    	LD	BC,HL
040A84 29                  A  3206    	ADD	HL,HL
040A85 09                  A  3207    	ADD	HL,BC
040A86 DD0709              A  3208    	LD	BC,(IX+%9)
040A89 09                  A  3209    	ADD	HL,BC
040A8A ED07                A  3210    	LD	BC,(HL)
040A8C C5                  A  3211    	PUSH	BC
040A8D 01 77 2C 04         A  3212    	LD	BC,_mosfilename
040A91 C5                  A  3213    	PUSH	BC
040A92 CD 6E 1F 04         A  3214    	CALL	_strcpy
040A96 C1                  A  3215    	POP	BC
040A97 C1                  A  3216    	POP	BC
                           A  3217    ;  330						argcounter++;
                           A  3218    .LINE 330
                           A  3219    
040A98 DD07FA              A  3220    	LD	BC,(IX+%FFFFFFFA)
040A9B DD0FFD              A  3221    	LD	(IX+%FFFFFFFD),BC
                           A  3222    ;  331					}
                           A  3223    ;  332					else {
                           A  3224    .LINE 332
                           A  3225    
040A9E 18 10               A  3226    	JR	L_110
040AA0                     A  3227    L_108:
                           A  3228    ;  333						strcpy(mosfilename,
                           A  3229    .LINE 333
                           A  3230    
040AA0 01 E8 2A 04         A  3231    	LD	BC,L__90
040AA4 C5                  A  3232    	PUSH	BC
040AA5 01 77 2C 04         A  3233    	LD	BC,_mosfilename
040AA9 C5                  A  3234    	PUSH	BC
040AAA CD 6E 1F 04         A  3235    	CALL	_strcpy
040AAE C1                  A  3236    	POP	BC
040AAF C1                  A  3237    	POP	BC
                           A  3238    ;  334					}
040AB0                     A  3239    L_110:
                           A  3240    .LINE 334
                           A  3241    
                           A  3242    ;  335					flashmos = true;
                           A  3243    .LINE 335
                           A  3244    
040AB0 3E01                A  3245    	LD	A,%1
040AB2 32 51 22 04         A  3246    	LD	(_flashmos),A
                           A  3247    ;  336					break;
                           A  3248    .LINE 336
                           A  3249    
040AB6 C3 59 0B 04         A  3250    	JR	L_127
                           A  3251    ;  337				case CMDVDP:
040ABA                     A  3252    L_111:
                           A  3253    .LINE 337
                           A  3254    
                           A  3255    ;  338					if(flashvdp) return fal
                           A  3256    .LINE 338
                           A  3257    
040ABA 3A 52 22 04         A  3258    	LD	A,(_flashvdp)
040ABE B7                  A  3259    	OR	A,A
040ABF 28 05               A  3260    	JR	Z,L_117
040AC1 AF                  A  3261    	XOR	A,A
040AC2 C3 8E 0B 04         A  3262    	JR	L_136
040AC6                     A  3263    L_117:
                           A  3264    ;  339					if((argc > (argcounter+
                           A  3265    .LINE 339
                           A  3266    
040AC6 DD07FD              A  3267    	LD	BC,(IX+%FFFFFFFD)
040AC9 03                  A  3268    	INC	BC
040ACA DD0FF7              A  3269    	LD	(IX+%FFFFFFF7),BC
040ACD DD0706              A  3270    	LD	BC,(IX+%6)
040AD0 DD27F7              A  3271    	LD	HL,(IX+%FFFFFFF7)
040AD3 B7                  A  3272    	OR	A,A
040AD4 ED42                A  3273    	SBC	HL,BC
040AD6 F2 14 0B 04         A  3274    	JP	P,L_116
040ADA DD27F7              A  3275    	LD	HL,(IX+%FFFFFFF7)
040ADD E5C1                A  3276    	LD	BC,HL
040ADF 29                  A  3277    	ADD	HL,HL
040AE0 09                  A  3278    	ADD	HL,BC
040AE1 DD0709              A  3279    	LD	BC,(IX+%9)
040AE4 09                  A  3280    	ADD	HL,BC
040AE5 ED07                A  3281    	LD	BC,(HL)
040AE7 C5                  A  3282    	PUSH	BC
040AE8 CD B5 08 04         A  3283    	CALL	_getCommand
040AEC C1                  A  3284    	POP	BC
040AED CD 33 1C 04         A  3285    	CALL	__icmpzero
040AF1 20 21               A  3286    	JR	NZ,L_116
                           A  3287    ;  340						strcpy(vdpfilename,
                           A  3288    .LINE 340
                           A  3289    
040AF3 DD27F7              A  3290    	LD	HL,(IX+%FFFFFFF7)
040AF6 E5C1                A  3291    	LD	BC,HL
040AF8 29                  A  3292    	ADD	HL,HL
040AF9 09                  A  3293    	ADD	HL,BC
040AFA DD0709              A  3294    	LD	BC,(IX+%9)
040AFD 09                  A  3295    	ADD	HL,BC
040AFE ED07                A  3296    	LD	BC,(HL)
040B00 C5                  A  3297    	PUSH	BC
040B01 01 7B 2D 04         A  3298    	LD	BC,_vdpfilename
040B05 C5                  A  3299    	PUSH	BC
040B06 CD 6E 1F 04         A  3300    	CALL	_strcpy
040B0A C1                  A  3301    	POP	BC
040B0B C1                  A  3302    	POP	BC
                           A  3303    ;  341						argcounter++;
                           A  3304    .LINE 341
                           A  3305    
040B0C DD07F7              A  3306    	LD	BC,(IX+%FFFFFFF7)
040B0F DD0FFD              A  3307    	LD	(IX+%FFFFFFFD),BC
                           A  3308    ;  342					}
                           A  3309    ;  343					else {
                           A  3310    .LINE 343
                           A  3311    
040B12 18 10               A  3312    	JR	L_118
040B14                     A  3313    L_116:
                           A  3314    ;  344						strcpy(vdpfilename,
                           A  3315    .LINE 344
                           A  3316    
040B14 01 F0 2A 04         A  3317    	LD	BC,L__94
040B18 C5                  A  3318    	PUSH	BC
040B19 01 7B 2D 04         A  3319    	LD	BC,_vdpfilename
040B1D C5                  A  3320    	PUSH	BC
040B1E CD 6E 1F 04         A  3321    	CALL	_strcpy
040B22 C1                  A  3322    	POP	BC
040B23 C1                  A  3323    	POP	BC
                           A  3324    ;  345					}
040B24                     A  3325    L_118:
                           A  3326    .LINE 345
                           A  3327    
                           A  3328    ;  346					flashvdp = true;
                           A  3329    .LINE 346
                           A  3330    
040B24 3E01                A  3331    	LD	A,%1
040B26 32 52 22 04         A  3332    	LD	(_flashvdp),A
                           A  3333    ;  347					break;
                           A  3334    .LINE 347
                           A  3335    
040B2A 18 2D               A  3336    	JR	L_127
                           A  3337    ;  348				case CMDBATCH:
040B2C                     A  3338    L_119:
                           A  3339    .LINE 348
                           A  3340    
                           A  3341    ;  349					if(optbatch) return fal
                           A  3342    .LINE 349
                           A  3343    
040B2C 3A 53 22 04         A  3344    	LD	A,(_optbatch)
040B30 B7                  A  3345    	OR	A,A
040B31 28 03               A  3346    	JR	Z,L_121
040B33 AF                  A  3347    	XOR	A,A
040B34 18 58               A  3348    	JR	L_136
040B36                     A  3349    L_121:
                           A  3350    ;  350					optbatch = true;
                           A  3351    .LINE 350
                           A  3352    
040B36 3E01                A  3353    	LD	A,%1
040B38 32 53 22 04         A  3354    	LD	(_optbatch),A
                           A  3355    ;  351					optforce = true;
                           A  3356    .LINE 351
                           A  3357    
040B3C 32 54 22 04         A  3358    	LD	(_optforce),A
                           A  3359    ;  352					break;
                           A  3360    .LINE 352
                           A  3361    
040B40 18 17               A  3362    	JR	L_127
                           A  3363    ;  353				case CMDFORCE:
040B42                     A  3364    L_122:
                           A  3365    .LINE 353
                           A  3366    
                           A  3367    ;  354					if(optforce && !optbatc
                           A  3368    .LINE 354
                           A  3369    
040B42 3A 54 22 04         A  3370    	LD	A,(_optforce)
040B46 B7                  A  3371    	OR	A,A
040B47 28 0A               A  3372    	JR	Z,L_125
040B49 3A 53 22 04         A  3373    	LD	A,(_optbatch)
040B4D B7                  A  3374    	OR	A,A
040B4E 20 03               A  3375    	JR	NZ,L_125
040B50 AF                  A  3376    	XOR	A,A
040B51 18 3B               A  3377    	JR	L_136
040B53                     A  3378    L_125:
                           A  3379    ;  355					optforce = true;
                           A  3380    .LINE 355
                           A  3381    
040B53 3E01                A  3382    	LD	A,%1
040B55 32 54 22 04         A  3383    	LD	(_optforce),A
                           A  3384    ;  356					break;
                           A  3385    ;  357			}
040B59                     A  3386    L_127:
                           A  3387    .LINE 357
                           A  3388    
                           A  3389    ;  358			argcounter++;
                           A  3390    .LINE 358
                           A  3391    
040B59 DD07FD              A  3392    	LD	BC,(IX+%FFFFFFFD)
040B5C 03                  A  3393    	INC	BC
040B5D DD0FFD              A  3394    	LD	(IX+%FFFFFFFD),BC
                           A  3395    ;  359		}
040B60                     A  3396    L_128:
                           A  3397    .LINE 359
                           A  3398    
040B60 DD0706              A  3399    	LD	BC,(IX+%6)
040B63 DD27FD              A  3400    	LD	HL,(IX+%FFFFFFFD)
040B66 B7                  A  3401    	OR	A,A
040B67 ED42                A  3402    	SBC	HL,BC
040B69 FA CB 09 04         A  3403    	JP	M,L_129
                           A  3404    ;  360		return (flashvdp || flashmos);
                           A  3405    .LINE 360
                           A  3406    
040B6D 3A 52 22 04         A  3407    	LD	A,(_flashvdp)
040B71 B7                  A  3408    	OR	A,A
040B72 20 07               A  3409    	JR	NZ,L_131
040B74 3A 51 22 04         A  3410    	LD	A,(_flashmos)
040B78 B7                  A  3411    	OR	A,A
040B79 28 09               A  3412    	JR	Z,L_132
040B7B                     A  3413    L_131:
                           A  3414    ;  361	}
                           A  3415    .LINE 361
                           A  3416    
040B7B 01010000            A  3417    	LD	BC,1
040B7F DD0FF4              A  3418    	LD	(IX+%FFFFFFF4),BC
040B82 18 07               A  3419    	JR	L_133
040B84                     A  3420    L_132:
040B84 01000000            A  3421    	LD	BC,0
040B88 DD0FF4              A  3422    	LD	(IX+%FFFFFFF4),BC
040B8B                     A  3423    L_133:
040B8B DD7EF4              A  3424    	LD	A,(IX+%FFFFFFF4)
040B8E                     A  3425    L_136:
040B8E DDF9                A  3426    	LD	SP,IX
040B90 DDE1                A  3427    	POP	IX
040B92 C9                  A  3428    	RET	
                           A  3429    
                           A  3430    
                           A  3431    ;**************************** _parseCommands **
                           A  3432    ;Name                         Addr/Register   S
                           A  3433    ;_optforce                           STATIC    
                           A  3434    ;_optbatch                           STATIC    
                           A  3435    ;_vdpfilename                        STATIC    
                           A  3436    ;_mosfilename                        STATIC    
                           A  3437    ;_strcpy                             IMPORT  --
                           A  3438    ;_flashvdp                           STATIC    
                           A  3439    ;_flashmos                           STATIC    
                           A  3440    ;command                              IX-15    
                           A  3441    ;temp134                              IX-12    
                           A  3442    ;G_4                                   IX-9    
                           A  3443    ;G_1                                   IX-6    
                           A  3444    ;argcounter                            IX-3    
                           A  3445    ;argv                                  IX+9    
                           A  3446    ;argc                                  IX+6    
                           A  3447    
                           A  3448    
                           A  3449    ; Stack Frame Size: 27 (bytes)
                           A  3450    ;       Spill Code: 0 (instruction)
                           A  3451    
                           A  3452    
                           A  3453    .ENDFUNC "parseCommands",361,"_parseCommands"
                           A  3454    	SEGMENT STRSECT
042AD3                     A  3455    L__85:
042AD3 4D4F532E 62696E     A  3456    	DB	"MOS.bin"
042ADA 00                  A  3457    	DB	0
042ADB                     A  3458    L__86:
042ADB 6669726D 77617265   A  3459    	DB	"firmware.bin"
042AE3 2E62696E 
042AE7 00                  A  3460    	DB	0
042AE8                     A  3461    L__90:
042AE8 4D4F532E 62696E     A  3462    	DB	"MOS.bin"
042AEF 00                  A  3463    	DB	0
042AF0                     A  3464    L__94:
042AF0 6669726D 77617265   A  3465    	DB	"firmware.bin"
042AF8 2E62696E 
042AFC 00                  A  3466    	DB	0
                           A  3467    	SEGMENT CODE
                           A  3468    ;  362	
                           A  3469    ;  363	bool filesExist(void) {
040B93                     A  3470    _filesExist:
                           A  3471    .DEFINE "_filesExist"
                           A  3472    
                           A  3473    .VALUE _filesExist
                           A  3474    
                           A  3475    .CLASS 2
                           A  3476    
                           A  3477    .TYPE 76
                           A  3478    
                           A  3479    .ENDEF
                           A  3480    
                           A  3481    .BEGFUNC "filesExist",363,"_filesExist"
                           A  3482    
                           A  3483    .LINE 363
                           A  3484    
                           A  3485    .DEFINE "file"
                           A  3486    
                           A  3487    .CLASS 65
                           A  3488    
                           A  3489    .VALUE -1
                           A  3490    
                           A  3491    .TYPE 12
                           A  3492    
                           A  3493    .ENDEF
                           A  3494    
                           A  3495    .DEFINE "filesexist"
                           A  3496    
                           A  3497    .CLASS 65
                           A  3498    
                           A  3499    .VALUE -2
                           A  3500    
                           A  3501    .TYPE 12
                           A  3502    
                           A  3503    .ENDEF
                           A  3504    
040B93 DDE5                A  3505    	PUSH	IX
040B95 DD210000 00         A  3506    	LD	IX,0
040B9A DD39                A  3507    	ADD	IX,SP
040B9C 3B                  A  3508    	DEC	SP
040B9D 3B                  A  3509    	DEC	SP
                           A  3510    ;  364		uint8_t file;
                           A  3511    ;  365		bool filesexist = true;
                           A  3512    .LINE 365
                           A  3513    
040B9E DD36FE01            A  3514    	LD	(IX+%FFFFFFFE),%1
                           A  3515    ;  366	
                           A  3516    ;  367		if(flashmos) {
                           A  3517    .LINE 367
                           A  3518    
040BA2 3A 51 22 04         A  3519    	LD	A,(_flashmos)
040BA6 B7                  A  3520    	OR	A,A
040BA7 28 4C               A  3521    	JR	Z,L_143
                           A  3522    ;  368			file = mos_fopen(mosfilename, f
                           A  3523    .LINE 368
                           A  3524    
040BA9 01010000            A  3525    	LD	BC,1
040BAD C5                  A  3526    	PUSH	BC
040BAE 01 77 2C 04         A  3527    	LD	BC,_mosfilename
040BB2 C5                  A  3528    	PUSH	BC
040BB3 CD F6 11 04         A  3529    	CALL	_mos_fopen
040BB7 C1                  A  3530    	POP	BC
040BB8 C1                  A  3531    	POP	BC
040BB9 DD77FF              A  3532    	LD	(IX+%FFFFFFFF),A
                           A  3533    ;  369			if(!file) {
                           A  3534    .LINE 369
                           A  3535    
040BBC B7                  A  3536    	OR	A,A
040BBD 20 2B               A  3537    	JR	NZ,L_138
                           A  3538    ;  370				printf("Error opening MOS f
                           A  3539    .LINE 370
                           A  3540    
040BBF 01 76 18 04         A  3541    	LD	BC,___print_uputch
040BC3 ED43 04 28 04       A  3542    	LD	(___print_xputch),BC
040BC8 01 FD 2A 04         A  3543    	LD	BC,L__104
040BCC C5                  A  3544    	PUSH	BC
040BCD CD 05 17 04         A  3545    	CALL	___print_sendstring
040BD1 C1                  A  3546    	POP	BC
040BD2 01 77 2C 04         A  3547    	LD	BC,_mosfilename
040BD6 C5                  A  3548    	PUSH	BC
040BD7 CD 05 17 04         A  3549    	CALL	___print_sendstring
040BDB C1                  A  3550    	POP	BC
040BDC 01 1A 2B 04         A  3551    	LD	BC,L__105
040BE0 C5                  A  3552    	PUSH	BC
040BE1 CD 05 17 04         A  3553    	CALL	___print_sendstring
040BE5 C1                  A  3554    	POP	BC
                           A  3555    ;  371				filesexist = false;
                           A  3556    .LINE 371
                           A  3557    
040BE6 DD36FE00            A  3558    	LD	(IX+%FFFFFFFE),%0
                           A  3559    ;  372			}
040BEA                     A  3560    L_138:
                           A  3561    .LINE 372
                           A  3562    
                           A  3563    ;  373			mos_fclose(file);
                           A  3564    .LINE 373
                           A  3565    
040BEA DD4EFF              A  3566    	LD	C,(IX+%FFFFFFFF)
040BED 0600                A  3567    	LD	B,%0
040BEF C5                  A  3568    	PUSH	BC
040BF0 CD 0E 12 04         A  3569    	CALL	_mos_fclose
040BF4 C1                  A  3570    	POP	BC
                           A  3571    ;  374		}
040BF5                     A  3572    L_143:
                           A  3573    .LINE 374
                           A  3574    
                           A  3575    ;  375	
                           A  3576    ;  376		if(flashvdp) {
                           A  3577    .LINE 376
                           A  3578    
040BF5 3A 52 22 04         A  3579    	LD	A,(_flashvdp)
040BF9 B7                  A  3580    	OR	A,A
040BFA 28 4C               A  3581    	JR	Z,L_144
                           A  3582    ;  377			file = mos_fopen(vdpfilename, f
                           A  3583    .LINE 377
                           A  3584    
040BFC 01010000            A  3585    	LD	BC,1
040C00 C5                  A  3586    	PUSH	BC
040C01 01 7B 2D 04         A  3587    	LD	BC,_vdpfilename
040C05 C5                  A  3588    	PUSH	BC
040C06 CD F6 11 04         A  3589    	CALL	_mos_fopen
040C0A C1                  A  3590    	POP	BC
040C0B C1                  A  3591    	POP	BC
040C0C DD77FF              A  3592    	LD	(IX+%FFFFFFFF),A
                           A  3593    ;  378			if(!file) {
                           A  3594    .LINE 378
                           A  3595    
040C0F B7                  A  3596    	OR	A,A
040C10 20 2B               A  3597    	JR	NZ,L_141
                           A  3598    ;  379				printf("Error opening VDP f
                           A  3599    .LINE 379
                           A  3600    
040C12 01 76 18 04         A  3601    	LD	BC,___print_uputch
040C16 ED43 04 28 04       A  3602    	LD	(___print_xputch),BC
040C1B 01 1E 2B 04         A  3603    	LD	BC,L__108
040C1F C5                  A  3604    	PUSH	BC
040C20 CD 05 17 04         A  3605    	CALL	___print_sendstring
040C24 C1                  A  3606    	POP	BC
040C25 01 7B 2D 04         A  3607    	LD	BC,_vdpfilename
040C29 C5                  A  3608    	PUSH	BC
040C2A CD 05 17 04         A  3609    	CALL	___print_sendstring
040C2E C1                  A  3610    	POP	BC
040C2F 01 3B 2B 04         A  3611    	LD	BC,L__109
040C33 C5                  A  3612    	PUSH	BC
040C34 CD 05 17 04         A  3613    	CALL	___print_sendstring
040C38 C1                  A  3614    	POP	BC
                           A  3615    ;  380				filesexist = false;
                           A  3616    .LINE 380
                           A  3617    
040C39 DD36FE00            A  3618    	LD	(IX+%FFFFFFFE),%0
                           A  3619    ;  381			}
040C3D                     A  3620    L_141:
                           A  3621    .LINE 381
                           A  3622    
                           A  3623    ;  382			mos_fclose(file);
                           A  3624    .LINE 382
                           A  3625    
040C3D DD4EFF              A  3626    	LD	C,(IX+%FFFFFFFF)
040C40 0600                A  3627    	LD	B,%0
040C42 C5                  A  3628    	PUSH	BC
040C43 CD 0E 12 04         A  3629    	CALL	_mos_fclose
040C47 C1                  A  3630    	POP	BC
                           A  3631    ;  383		}
040C48                     A  3632    L_144:
                           A  3633    .LINE 383
                           A  3634    
                           A  3635    ;  384	
                           A  3636    ;  385		return filesexist;
                           A  3637    .LINE 385
                           A  3638    
040C48 DD7EFE              A  3639    	LD	A,(IX+%FFFFFFFE)
                           A  3640    ;  386	}
                           A  3641    .LINE 386
                           A  3642    
040C4B DDF9                A  3643    	LD	SP,IX
040C4D DDE1                A  3644    	POP	IX
040C4F C9                  A  3645    	RET	
                           A  3646    
                           A  3647    
                           A  3648    ;**************************** _filesExist *****
                           A  3649    ;Name                         Addr/Register   S
                           A  3650    ;_vdpfilename                        STATIC    
                           A  3651    ;_flashvdp                           STATIC    
                           A  3652    ;_mos_fclose                         IMPORT  --
                           A  3653    ;___print_sendstring                 IMPORT  --
                           A  3654    ;___print_xputch                     IMPORT    
                           A  3655    ;___print_uputch                     IMPORT  --
                           A  3656    ;_mosfilename                        STATIC    
                           A  3657    ;_mos_fopen                          IMPORT  --
                           A  3658    ;_flashmos                           STATIC    
                           A  3659    ;filesexist                            IX-2    
                           A  3660    ;file                                  IX-1    
                           A  3661    
                           A  3662    
                           A  3663    ; Stack Frame Size: 8 (bytes)
                           A  3664    ;       Spill Code: 0 (instruction)
                           A  3665    
                           A  3666    
                           A  3667    .ENDFUNC "filesExist",386,"_filesExist"
                           A  3668    	SEGMENT STRSECT
042AFD                     A  3669    L__104:
042AFD 4572726F 72206F70   A  3670    	DB	"Error opening MOS firmware \""
042B05 656E696E 67204D4F 
042B0D 53206669 726D7761 
042B15 72652022 
042B19 00                  A  3671    	DB	0
042B1A                     A  3672    L__105:
042B1A 22                  A  3673    	DB	"\""
042B1B 0A0D00              A  3674    	DB	10,13,0
042B1E                     A  3675    L__108:
042B1E 4572726F 72206F70   A  3676    	DB	"Error opening VDP firmware \""
042B26 656E696E 67205644 
042B2E 50206669 726D7761 
042B36 72652022 
042B3A 00                  A  3677    	DB	0
042B3B                     A  3678    L__109:
042B3B 22                  A  3679    	DB	"\""
042B3C 0A0D00              A  3680    	DB	10,13,0
                           A  3681    	SEGMENT CODE
                           A  3682    ;  387	
                           A  3683    ;  388	bool validFirmwareFiles(void) {
040C50                     A  3684    _validFirmwareFiles:
                           A  3685    .DEFINE "_validFirmwareFiles"
                           A  3686    
                           A  3687    .VALUE _validFirmwareFiles
                           A  3688    
                           A  3689    .CLASS 2
                           A  3690    
                           A  3691    .TYPE 76
                           A  3692    
                           A  3693    .ENDEF
                           A  3694    
                           A  3695    .BEGFUNC "validFirmwareFiles",388,"_validFirmwa
                           A  3696    
                           A  3697    .LINE 388
                           A  3698    
                           A  3699    .DEFINE "file"
                           A  3700    
                           A  3701    .CLASS 65
                           A  3702    
                           A  3703    .VALUE -1
                           A  3704    
                           A  3705    .TYPE 12
                           A  3706    
                           A  3707    .ENDEF
                           A  3708    
                           A  3709    .DEFINE "validfirmware"
                           A  3710    
                           A  3711    .CLASS 65
                           A  3712    
                           A  3713    .VALUE -2
                           A  3714    
                           A  3715    .TYPE 12
                           A  3716    
                           A  3717    .ENDEF
                           A  3718    
                           A  3719    .DEFINE "filesize"
                           A  3720    
                           A  3721    .CLASS 65
                           A  3722    
                           A  3723    .VALUE -5
                           A  3724    
                           A  3725    .TYPE 14
                           A  3726    
                           A  3727    .ENDEF
                           A  3728    
                           A  3729    .DEFINE "buffer"
                           A  3730    
                           A  3731    .CLASS 65
                           A  3732    
                           A  3733    .VALUE -41
                           A  3734    
                           A  3735    .DIM 36
                           A  3736    
                           A  3737    .TYPE 108
                           A  3738    
                           A  3739    .ENDEF
                           A  3740    
040C50 DDE5                A  3741    	PUSH	IX
040C52 DD210000 00         A  3742    	LD	IX,0
040C57 DD39                A  3743    	ADD	IX,SP
040C59 ED22D7              A  3744    	LEA	HL,IX+%FFFFFFD7
040C5C F9                  A  3745    	LD	SP,HL
                           A  3746    ;  389		uint8_t file;
                           A  3747    ;  390		uint24_t filesize;
                           A  3748    ;  391		uint8_t buffer[ESP32_MAGICLENGTH + 
                           A  3749    ;  392		bool validfirmware = true;
                           A  3750    .LINE 392
                           A  3751    
040C5D DD36FE01            A  3752    	LD	(IX+%FFFFFFFE),%1
                           A  3753    ;  393	
                           A  3754    ;  394		if(flashmos) {
                           A  3755    .LINE 394
                           A  3756    
040C61 3A 51 22 04         A  3757    	LD	A,(_flashmos)
040C65 B7                  A  3758    	OR	A,A
040C66 CA 1B 0D 04         A  3759    	JR	Z,L_154
                           A  3760    ;  395			file = mos_fopen(mosfilename, f
                           A  3761    .LINE 395
                           A  3762    
040C6A 01010000            A  3763    	LD	BC,1
040C6E C5                  A  3764    	PUSH	BC
040C6F 01 77 2C 04         A  3765    	LD	BC,_mosfilename
040C73 C5                  A  3766    	PUSH	BC
040C74 CD F6 11 04         A  3767    	CALL	_mos_fopen
040C78 C1                  A  3768    	POP	BC
040C79 C1                  A  3769    	POP	BC
040C7A DD77FF              A  3770    	LD	(IX+%FFFFFFFF),A
                           A  3771    ;  396			mos_fread(file, (char *)BUFFER1
                           A  3772    .LINE 396
                           A  3773    
040C7D 01050000            A  3774    	LD	BC,5
040C81 C5                  A  3775    	PUSH	BC
040C82 01000005            A  3776    	LD	BC,327680
040C86 C5                  A  3777    	PUSH	BC
040C87 DD4EFF              A  3778    	LD	C,(IX+%FFFFFFFF)
040C8A 0600                A  3779    	LD	B,%0
040C8C C5                  A  3780    	PUSH	BC
040C8D CD 38 12 04         A  3781    	CALL	_mos_fread
040C91 C1                  A  3782    	POP	BC
040C92 C1                  A  3783    	POP	BC
040C93 C1                  A  3784    	POP	BC
                           A  3785    ;  397			if(!containsMosHeader((uint8_t 
                           A  3786    .LINE 397
                           A  3787    
040C94 01000005            A  3788    	LD	BC,327680
040C98 C5                  A  3789    	PUSH	BC
040C99 CD 90 02 04         A  3790    	CALL	_containsMosHeader
040C9D C1                  A  3791    	POP	BC
040C9E B7                  A  3792    	OR	A,A
040C9F 20 2B               A  3793    	JR	NZ,L_147
                           A  3794    ;  398				printf("\"%s\" does not con
                           A  3795    .LINE 398
                           A  3796    
040CA1 01 76 18 04         A  3797    	LD	BC,___print_uputch
040CA5 ED43 04 28 04       A  3798    	LD	(___print_xputch),BC
040CAA 01220000            A  3799    	LD	BC,34
040CAE C5                  A  3800    	PUSH	BC
040CAF CD 76 18 04         A  3801    	CALL	___print_uputch
040CB3 C1                  A  3802    	POP	BC
040CB4 01 77 2C 04         A  3803    	LD	BC,_mosfilename
040CB8 C5                  A  3804    	PUSH	BC
040CB9 CD 05 17 04         A  3805    	CALL	___print_sendstring
040CBD C1                  A  3806    	POP	BC
040CBE 01 3F 2B 04         A  3807    	LD	BC,L__113
040CC2 C5                  A  3808    	PUSH	BC
040CC3 CD 05 17 04         A  3809    	CALL	___print_sendstring
040CC7 C1                  A  3810    	POP	BC
                           A  3811    ;  399				validfirmware = false;
                           A  3812    .LINE 399
                           A  3813    
040CC8 DD36FE00            A  3814    	LD	(IX+%FFFFFFFE),%0
                           A  3815    ;  400			}
040CCC                     A  3816    L_147:
                           A  3817    .LINE 400
                           A  3818    
                           A  3819    ;  401			filesize = getFileSize(file);
                           A  3820    .LINE 401
                           A  3821    
040CCC DD4EFF              A  3822    	LD	C,(IX+%FFFFFFFF)
040CCF 0600                A  3823    	LD	B,%0
040CD1 C5                  A  3824    	PUSH	BC
040CD2 CD 3A 16 04         A  3825    	CALL	_getFileSize
040CD6 C1                  A  3826    	POP	BC
040CD7 DD2FFB              A  3827    	LD	(IX+%FFFFFFFB),HL
                           A  3828    ;  402			if(filesize > FLASHSIZE) {
                           A  3829    .LINE 402
                           A  3830    
040CDA E5C1                A  3831    	LD	BC,HL
040CDC 21000002            A  3832    	LD	HL,131072
040CE0 B7                  A  3833    	OR	A,A
040CE1 ED42                A  3834    	SBC	HL,BC
040CE3 30 2B               A  3835    	JR	NC,L_149
                           A  3836    ;  403				printf("\"%s\" too large fo
                           A  3837    .LINE 403
                           A  3838    
040CE5 01 76 18 04         A  3839    	LD	BC,___print_uputch
040CE9 ED43 04 28 04       A  3840    	LD	(___print_xputch),BC
040CEE 01220000            A  3841    	LD	BC,34
040CF2 C5                  A  3842    	PUSH	BC
040CF3 CD 76 18 04         A  3843    	CALL	___print_uputch
040CF7 C1                  A  3844    	POP	BC
040CF8 01 77 2C 04         A  3845    	LD	BC,_mosfilename
040CFC C5                  A  3846    	PUSH	BC
040CFD CD 05 17 04         A  3847    	CALL	___print_sendstring
040D01 C1                  A  3848    	POP	BC
040D02 01 70 2B 04         A  3849    	LD	BC,L__115
040D06 C5                  A  3850    	PUSH	BC
040D07 CD 05 17 04         A  3851    	CALL	___print_sendstring
040D0B C1                  A  3852    	POP	BC
                           A  3853    ;  404				validfirmware = false;
                           A  3854    .LINE 404
                           A  3855    
040D0C DD36FE00            A  3856    	LD	(IX+%FFFFFFFE),%0
                           A  3857    ;  405			}
040D10                     A  3858    L_149:
                           A  3859    .LINE 405
                           A  3860    
                           A  3861    ;  406			mos_fclose(file);
                           A  3862    .LINE 406
                           A  3863    
040D10 DD4EFF              A  3864    	LD	C,(IX+%FFFFFFFF)
040D13 0600                A  3865    	LD	B,%0
040D15 C5                  A  3866    	PUSH	BC
040D16 CD 0E 12 04         A  3867    	CALL	_mos_fclose
040D1A C1                  A  3868    	POP	BC
                           A  3869    ;  407		}
040D1B                     A  3870    L_154:
                           A  3871    .LINE 407
                           A  3872    
                           A  3873    ;  408		if(flashvdp) {
                           A  3874    .LINE 408
                           A  3875    
040D1B 3A 52 22 04         A  3876    	LD	A,(_flashvdp)
040D1F B7                  A  3877    	OR	A,A
040D20 28 69               A  3878    	JR	Z,L_155
                           A  3879    ;  409			file = mos_fopen(vdpfilename, f
                           A  3880    .LINE 409
                           A  3881    
040D22 01010000            A  3882    	LD	BC,1
040D26 C5                  A  3883    	PUSH	BC
040D27 01 7B 2D 04         A  3884    	LD	BC,_vdpfilename
040D2B C5                  A  3885    	PUSH	BC
040D2C CD F6 11 04         A  3886    	CALL	_mos_fopen
040D30 C1                  A  3887    	POP	BC
040D31 C1                  A  3888    	POP	BC
040D32 DD77FF              A  3889    	LD	(IX+%FFFFFFFF),A
                           A  3890    ;  410			mos_fread(file, (char *)buffer,
                           A  3891    .LINE 410
                           A  3892    
040D35 01240000            A  3893    	LD	BC,36
040D39 C5                  A  3894    	PUSH	BC
040D3A ED65D7              A  3895    	PEA	IX+%FFFFFFD7
040D3D DD4EFF              A  3896    	LD	C,(IX+%FFFFFFFF)
040D40 0600                A  3897    	LD	B,%0
040D42 C5                  A  3898    	PUSH	BC
040D43 CD 38 12 04         A  3899    	CALL	_mos_fread
040D47 C1                  A  3900    	POP	BC
040D48 C1                  A  3901    	POP	BC
040D49 C1                  A  3902    	POP	BC
                           A  3903    ;  411			if(!containsESP32Header(buffer)
                           A  3904    .LINE 411
                           A  3905    
040D4A ED65D7              A  3906    	PEA	IX+%FFFFFFD7
040D4D CD DB 02 04         A  3907    	CALL	_containsESP32Header
040D51 C1                  A  3908    	POP	BC
040D52 B7                  A  3909    	OR	A,A
040D53 20 2B               A  3910    	JR	NZ,L_152
                           A  3911    ;  412				printf("\"%s\" does not con
                           A  3912    .LINE 412
                           A  3913    
040D55 01 76 18 04         A  3914    	LD	BC,___print_uputch
040D59 ED43 04 28 04       A  3915    	LD	(___print_xputch),BC
040D5E 01220000            A  3916    	LD	BC,34
040D62 C5                  A  3917    	PUSH	BC
040D63 CD 76 18 04         A  3918    	CALL	___print_uputch
040D67 C1                  A  3919    	POP	BC
040D68 01 7B 2D 04         A  3920    	LD	BC,_vdpfilename
040D6C C5                  A  3921    	PUSH	BC
040D6D CD 05 17 04         A  3922    	CALL	___print_sendstring
040D71 C1                  A  3923    	POP	BC
040D72 01 97 2B 04         A  3924    	LD	BC,L__118
040D76 C5                  A  3925    	PUSH	BC
040D77 CD 05 17 04         A  3926    	CALL	___print_sendstring
040D7B C1                  A  3927    	POP	BC
                           A  3928    ;  413				validfirmware = false;
                           A  3929    .LINE 413
                           A  3930    
040D7C DD36FE00            A  3931    	LD	(IX+%FFFFFFFE),%0
                           A  3932    ;  414			}
040D80                     A  3933    L_152:
                           A  3934    .LINE 414
                           A  3935    
                           A  3936    ;  415			mos_fclose(file);
                           A  3937    .LINE 415
                           A  3938    
040D80 DD4EFF              A  3939    	LD	C,(IX+%FFFFFFFF)
040D83 0600                A  3940    	LD	B,%0
040D85 C5                  A  3941    	PUSH	BC
040D86 CD 0E 12 04         A  3942    	CALL	_mos_fclose
040D8A C1                  A  3943    	POP	BC
                           A  3944    ;  416		}
040D8B                     A  3945    L_155:
                           A  3946    .LINE 416
                           A  3947    
                           A  3948    ;  417		return validfirmware;
                           A  3949    .LINE 417
                           A  3950    
040D8B DD7EFE              A  3951    	LD	A,(IX+%FFFFFFFE)
                           A  3952    ;  418	}
                           A  3953    .LINE 418
                           A  3954    
040D8E DDF9                A  3955    	LD	SP,IX
040D90 DDE1                A  3956    	POP	IX
040D92 C9                  A  3957    	RET	
                           A  3958    
                           A  3959    
                           A  3960    ;**************************** _validFirmwareFil
                           A  3961    ;Name                         Addr/Register   S
                           A  3962    ;_vdpfilename                        STATIC    
                           A  3963    ;_flashvdp                           STATIC    
                           A  3964    ;_mos_fclose                         IMPORT  --
                           A  3965    ;_getFileSize                        IMPORT  --
                           A  3966    ;___print_sendstring                 IMPORT  --
                           A  3967    ;___print_xputch                     IMPORT    
                           A  3968    ;___print_uputch                     IMPORT  --
                           A  3969    ;_mos_fread                          IMPORT  --
                           A  3970    ;_mosfilename                        STATIC    
                           A  3971    ;_mos_fopen                          IMPORT  --
                           A  3972    ;_flashmos                           STATIC    
                           A  3973    ;buffer                               IX-41    
                           A  3974    ;filesize                              IX-5    
                           A  3975    ;validfirmware                         IX-2    
                           A  3976    ;file                                  IX-1    
                           A  3977    
                           A  3978    
                           A  3979    ; Stack Frame Size: 47 (bytes)
                           A  3980    ;       Spill Code: 0 (instruction)
                           A  3981    
                           A  3982    
                           A  3983    .ENDFUNC "validFirmwareFiles",418,"_validFirmwa
                           A  3984    	SEGMENT STRSECT
042B3F                     A  3985    L__113:
042B3F 2220646F 6573206E   A  3986    	DB	"\" does not contain valid MOS ez80 sta
042B47 6F742063 6F6E7461 
042B4F 696E2076 616C6964 
042B57 204D4F53 20657A38 
042B5F 30207374 61727475 
042B67 7020636F 6465 
042B6D 0D0A00              A  3987    	DB	13,10,0
042B70                     A  3988    L__115:
042B70 2220746F 6F206C61   A  3989    	DB	"\" too large for 128KB embedded flash"
042B78 72676520 666F7220 
042B80 3132384B 4220656D 
042B88 62656464 65642066 
042B90 6C617368 
042B94 0D0A00              A  3990    	DB	13,10,0
042B97                     A  3991    L__118:
042B97 2220646F 6573206E   A  3992    	DB	"\" does not contain valid ESP32 code"
042B9F 6F742063 6F6E7461 
042BA7 696E2076 616C6964 
042BAF 20455350 33322063 
042BB7 6F6465 
042BBA 0D0A00              A  3993    	DB	13,10,0
                           A  3994    	SEGMENT CODE
                           A  3995    ;  419	
                           A  3996    ;  420	void showCRC32(void) {
040D93                     A  3997    _showCRC32:
                           A  3998    .DEFINE "_showCRC32"
                           A  3999    
                           A  4000    .VALUE _showCRC32
                           A  4001    
                           A  4002    .CLASS 2
                           A  4003    
                           A  4004    .TYPE 65
                           A  4005    
                           A  4006    .ENDEF
                           A  4007    
                           A  4008    .BEGFUNC "showCRC32",420,"_showCRC32"
                           A  4009    
040D93 DDE5                A  4010    	PUSH	IX
040D95 DD210000 00         A  4011    	LD	IX,0
040D9A DD39                A  4012    	ADD	IX,SP
                           A  4013    ;  421		if(flashmos) printf("MOS CRC 0x%04l
                           A  4014    .LINE 421
                           A  4015    
040D9C 3A 51 22 04         A  4016    	LD	A,(_flashmos)
040DA0 B7                  A  4017    	OR	A,A
040DA1 28 43               A  4018    	JR	Z,L_159
040DA3 01 76 18 04         A  4019    	LD	BC,___print_uputch
040DA7 ED43 04 28 04       A  4020    	LD	(___print_xputch),BC
040DAC 01 BD 2B 04         A  4021    	LD	BC,L__121
040DB0 C5                  A  4022    	PUSH	BC
040DB1 CD 05 17 04         A  4023    	CALL	___print_sendstring
040DB5 C1                  A  4024    	POP	BC
040DB6 3E04                A  4025    	LD	A,%4
040DB8 32 92 2E 04         A  4026    	LD	(___print_fmt+5),A
040DBC 3E60                A  4027    	LD	A,%60
040DBE 32 8E 2E 04         A  4028    	LD	(___print_fmt+1),A
040DC2 3E78                A  4029    	LD	A,%78
040DC4 32 91 2E 04         A  4030    	LD	(___print_fmt+4),A
040DC8 3A 7A 2D 04         A  4031    	LD	A,(_moscrc+3)
040DCC 4F                  A  4032    	LD	C,A
040DCD 0600                A  4033    	LD	B,%0
040DCF C5                  A  4034    	PUSH	BC
040DD0 ED4B 77 2D 04       A  4035    	LD	BC,(_moscrc)
040DD5 C5                  A  4036    	PUSH	BC
040DD6 CD 1B 20 04         A  4037    	CALL	__u_ultoa
040DDA C1                  A  4038    	POP	BC
040DDB C1                  A  4039    	POP	BC
040DDC 01 C8 2B 04         A  4040    	LD	BC,L__122
040DE0 C5                  A  4041    	PUSH	BC
040DE1 CD 05 17 04         A  4042    	CALL	___print_sendstring
040DE5 C1                  A  4043    	POP	BC
040DE6                     A  4044    L_159:
                           A  4045    ;  422		if(flashvdp) printf("VDP CRC 0x%04l
                           A  4046    .LINE 422
                           A  4047    
040DE6 3A 52 22 04         A  4048    	LD	A,(_flashvdp)
040DEA B7                  A  4049    	OR	A,A
040DEB 28 43               A  4050    	JR	Z,L_160
040DED 01 76 18 04         A  4051    	LD	BC,___print_uputch
040DF1 ED43 04 28 04       A  4052    	LD	(___print_xputch),BC
040DF6 01 CB 2B 04         A  4053    	LD	BC,L__124
040DFA C5                  A  4054    	PUSH	BC
040DFB CD 05 17 04         A  4055    	CALL	___print_sendstring
040DFF C1                  A  4056    	POP	BC
040E00 3E04                A  4057    	LD	A,%4
040E02 32 92 2E 04         A  4058    	LD	(___print_fmt+5),A
040E06 3E60                A  4059    	LD	A,%60
040E08 32 8E 2E 04         A  4060    	LD	(___print_fmt+1),A
040E0C 3E78                A  4061    	LD	A,%78
040E0E 32 91 2E 04         A  4062    	LD	(___print_fmt+4),A
040E12 3A 7E 2E 04         A  4063    	LD	A,(_vdpcrc+3)
040E16 4F                  A  4064    	LD	C,A
040E17 0600                A  4065    	LD	B,%0
040E19 C5                  A  4066    	PUSH	BC
040E1A ED4B 7B 2E 04       A  4067    	LD	BC,(_vdpcrc)
040E1F C5                  A  4068    	PUSH	BC
040E20 CD 1B 20 04         A  4069    	CALL	__u_ultoa
040E24 C1                  A  4070    	POP	BC
040E25 C1                  A  4071    	POP	BC
040E26 01 D6 2B 04         A  4072    	LD	BC,L__125
040E2A C5                  A  4073    	PUSH	BC
040E2B CD 05 17 04         A  4074    	CALL	___print_sendstring
040E2F C1                  A  4075    	POP	BC
040E30                     A  4076    L_160:
                           A  4077    ;  423		printf("\r\n");
                           A  4078    .LINE 423
                           A  4079    
040E30 01 76 18 04         A  4080    	LD	BC,___print_uputch
040E34 ED43 04 28 04       A  4081    	LD	(___print_xputch),BC
040E39 01 D9 2B 04         A  4082    	LD	BC,L__126
040E3D C5                  A  4083    	PUSH	BC
040E3E CD 05 17 04         A  4084    	CALL	___print_sendstring
040E42 C1                  A  4085    	POP	BC
                           A  4086    ;  424	}
                           A  4087    .LINE 424
                           A  4088    
040E43 DDF9                A  4089    	LD	SP,IX
040E45 DDE1                A  4090    	POP	IX
040E47 C9                  A  4091    	RET	
                           A  4092    
                           A  4093    
                           A  4094    ;**************************** _showCRC32 ******
                           A  4095    ;Name                         Addr/Register   S
                           A  4096    ;_vdpcrc                             STATIC    
                           A  4097    ;_flashvdp                           STATIC    
                           A  4098    ;_moscrc                             STATIC    
                           A  4099    ;__u_ultoa                           IMPORT  --
                           A  4100    ;___print_fmt                        IMPORT    
                           A  4101    ;___print_sendstring                 IMPORT  --
                           A  4102    ;___print_xputch                     IMPORT    
                           A  4103    ;___print_uputch                     IMPORT  --
                           A  4104    ;_flashmos                           STATIC    
                           A  4105    
                           A  4106    
                           A  4107    ; Stack Frame Size: 6 (bytes)
                           A  4108    ;       Spill Code: 0 (instruction)
                           A  4109    
                           A  4110    
                           A  4111    .ENDFUNC "showCRC32",424,"_showCRC32"
                           A  4112    	SEGMENT STRSECT
042BBD                     A  4113    L__121:
042BBD 4D4F5320 43524320   A  4114    	DB	"MOS CRC 0x"
042BC5 3078 
042BC7 00                  A  4115    	DB	0
042BC8                     A  4116    L__122:
042BC8 0D0A00              A  4117    	DB	13,10,0
042BCB                     A  4118    L__124:
042BCB 56445020 43524320   A  4119    	DB	"VDP CRC 0x"
042BD3 3078 
042BD5 00                  A  4120    	DB	0
042BD6                     A  4121    L__125:
042BD6 0D0A00              A  4122    	DB	13,10,0
042BD9                     A  4123    L__126:
042BD9 0D0A00              A  4124    	DB	13,10,0
                           A  4125    	SEGMENT CODE
                           A  4126    ;  425	
                           A  4127    ;  426	void calculateCRC32(void) {
040E48                     A  4128    _calculateCRC32:
                           A  4129    .DEFINE "_calculateCRC32"
                           A  4130    
                           A  4131    .VALUE _calculateCRC32
                           A  4132    
                           A  4133    .CLASS 2
                           A  4134    
                           A  4135    .TYPE 65
                           A  4136    
                           A  4137    .ENDEF
                           A  4138    
                           A  4139    .BEGFUNC "calculateCRC32",426,"_calculateCRC32"
                           A  4140    
                           A  4141    .LINE 426
                           A  4142    
                           A  4143    .DEFINE "file"
                           A  4144    
                           A  4145    .CLASS 65
                           A  4146    
                           A  4147    .VALUE -1
                           A  4148    
                           A  4149    .TYPE 12
                           A  4150    
                           A  4151    .ENDEF
                           A  4152    
                           A  4153    .DEFINE "ptr"
                           A  4154    
                           A  4155    .CLASS 65
                           A  4156    
                           A  4157    .VALUE -4
                           A  4158    
                           A  4159    .TYPE 34
                           A  4160    
                           A  4161    .ENDEF
                           A  4162    
                           A  4163    .DEFINE "got"
                           A  4164    
                           A  4165    .CLASS 65
                           A  4166    
                           A  4167    .VALUE -7
                           A  4168    
                           A  4169    .TYPE 14
                           A  4170    
                           A  4171    .ENDEF
                           A  4172    
                           A  4173    .DEFINE "size"
                           A  4174    
                           A  4175    .CLASS 65
                           A  4176    
                           A  4177    .VALUE -10
                           A  4178    
                           A  4179    .TYPE 14
                           A  4180    
                           A  4181    .ENDEF
                           A  4182    
040E48 DDE5                A  4183    	PUSH	IX
040E4A DD210000 00         A  4184    	LD	IX,0
040E4F DD39                A  4185    	ADD	IX,SP
040E51 C5                  A  4186    	PUSH	BC
040E52 C5                  A  4187    	PUSH	BC
040E53 C5                  A  4188    	PUSH	BC
040E54 3B                  A  4189    	DEC	SP
                           A  4190    ;  427		uint8_t file;
                           A  4191    ;  428		uint24_t got,size;
                           A  4192    ;  429		char* ptr;
                           A  4193    ;  430	
                           A  4194    ;  431		moscrc = 0;
                           A  4195    .LINE 431
                           A  4196    
040E55 01000000            A  4197    	LD	BC,0
040E59 AF                  A  4198    	XOR	A,A
040E5A ED43 77 2D 04       A  4199    	LD	(_moscrc),BC
040E5F 32 7A 2D 04         A  4200    	LD	(_moscrc+3),A
                           A  4201    ;  432		vdpcrc = 0;
                           A  4202    .LINE 432
                           A  4203    
040E63 AF                  A  4204    	XOR	A,A
040E64 ED43 7B 2E 04       A  4205    	LD	(_vdpcrc),BC
040E69 32 7E 2E 04         A  4206    	LD	(_vdpcrc+3),A
                           A  4207    ;  433	
                           A  4208    ;  434		printf("Calculating CRC");
                           A  4209    .LINE 434
                           A  4210    
040E6D 01 76 18 04         A  4211    	LD	BC,___print_uputch
040E71 ED43 04 28 04       A  4212    	LD	(___print_xputch),BC
040E76 01 DC 2B 04         A  4213    	LD	BC,L__128
040E7A C5                  A  4214    	PUSH	BC
040E7B CD 05 17 04         A  4215    	CALL	___print_sendstring
040E7F C1                  A  4216    	POP	BC
                           A  4217    ;  435	
                           A  4218    ;  436		if(flashmos) {
                           A  4219    .LINE 436
                           A  4220    
040E80 3A 51 22 04         A  4221    	LD	A,(_flashmos)
040E84 B7                  A  4222    	OR	A,A
040E85 28 7D               A  4223    	JR	Z,L_172
                           A  4224    ;  437			ptr = (char*)BUFFER1;
                           A  4225    .LINE 437
                           A  4226    
040E87 01000005            A  4227    	LD	BC,327680
040E8B DD0FFC              A  4228    	LD	(IX+%FFFFFFFC),BC
                           A  4229    ;  438			file = mos_fopen(mosfilename, f
                           A  4230    .LINE 438
                           A  4231    
040E8E 01010000            A  4232    	LD	BC,1
040E92 C5                  A  4233    	PUSH	BC
040E93 01 77 2C 04         A  4234    	LD	BC,_mosfilename
040E97 C5                  A  4235    	PUSH	BC
040E98 CD F6 11 04         A  4236    	CALL	_mos_fopen
040E9C C1                  A  4237    	POP	BC
040E9D C1                  A  4238    	POP	BC
040E9E DD77FF              A  4239    	LD	(IX+%FFFFFFFF),A
                           A  4240    ;  439			crc32_initialize();
                           A  4241    .LINE 439
                           A  4242    
040EA1 CD 88 15 04         A  4243    	CALL	_crc32_initialize
                           A  4244    ;  440			
                           A  4245    ;  441			// Read file to memory
                           A  4246    ;  442			while((got = mos_fread(file, pt
                           A  4247    .LINE 442
                           A  4248    
040EA5 18 22               A  4249    	JR	L_162
040EA7                     A  4250    L_163:
                           A  4251    ;  443				crc32(ptr, got);
                           A  4252    .LINE 443
                           A  4253    
040EA7 DD07F9              A  4254    	LD	BC,(IX+%FFFFFFF9)
040EAA C5                  A  4255    	PUSH	BC
040EAB DD07FC              A  4256    	LD	BC,(IX+%FFFFFFFC)
040EAE C5                  A  4257    	PUSH	BC
040EAF CD DA 15 04         A  4258    	CALL	_crc32
040EB3 C1                  A  4259    	POP	BC
040EB4 C1                  A  4260    	POP	BC
                           A  4261    ;  444				ptr += got;
                           A  4262    .LINE 444
                           A  4263    
040EB5 DD07F9              A  4264    	LD	BC,(IX+%FFFFFFF9)
040EB8 DD27FC              A  4265    	LD	HL,(IX+%FFFFFFFC)
040EBB 09                  A  4266    	ADD	HL,BC
040EBC DD2FFC              A  4267    	LD	(IX+%FFFFFFFC),HL
                           A  4268    ;  445				putch('.');
                           A  4269    .LINE 445
                           A  4270    
040EBF 012E0000            A  4271    	LD	BC,46
040EC3 C5                  A  4272    	PUSH	BC
040EC4 CD E5 00 04         A  4273    	CALL	_putch
040EC8 C1                  A  4274    	POP	BC
                           A  4275    ;  446			}		
040EC9                     A  4276    L_162:
                           A  4277    .LINE 446
                           A  4278    
040EC9 01004000            A  4279    	LD	BC,16384
040ECD C5                  A  4280    	PUSH	BC
040ECE DD07FC              A  4281    	LD	BC,(IX+%FFFFFFFC)
040ED1 C5                  A  4282    	PUSH	BC
040ED2 DD4EFF              A  4283    	LD	C,(IX+%FFFFFFFF)
040ED5 0600                A  4284    	LD	B,%0
040ED7 C5                  A  4285    	PUSH	BC
040ED8 CD 38 12 04         A  4286    	CALL	_mos_fread
040EDC C1                  A  4287    	POP	BC
040EDD C1                  A  4288    	POP	BC
040EDE C1                  A  4289    	POP	BC
040EDF DD2FF9              A  4290    	LD	(IX+%FFFFFFF9),HL
040EE2 E5C1                A  4291    	LD	BC,HL
040EE4 B7                  A  4292    	OR	A,A
040EE5 ED62                A  4293    	SBC	HL,HL
040EE7 B7                  A  4294    	OR	A,A
040EE8 ED42                A  4295    	SBC	HL,BC
040EEA 38 BB               A  4296    	JR	C,L_163
                           A  4297    ;  447			moscrc = crc32_finalize();
                           A  4298    .LINE 447
                           A  4299    
040EEC CD 9D 15 04         A  4300    	CALL	_crc32_finalize
040EF0 22 77 2D 04         A  4301    	LD	(_moscrc),HL
040EF4 7B                  A  4302    	LD	A,E
040EF5 32 7A 2D 04         A  4303    	LD	(_moscrc+3),A
                           A  4304    ;  448			mos_fclose(file);
                           A  4305    .LINE 448
                           A  4306    
040EF9 DD4EFF              A  4307    	LD	C,(IX+%FFFFFFFF)
040EFC 0600                A  4308    	LD	B,%0
040EFE C5                  A  4309    	PUSH	BC
040EFF CD 0E 12 04         A  4310    	CALL	_mos_fclose
040F03 C1                  A  4311    	POP	BC
                           A  4312    ;  449		}
040F04                     A  4313    L_172:
                           A  4314    .LINE 449
                           A  4315    
                           A  4316    ;  450		if(flashvdp) {
                           A  4317    .LINE 450
                           A  4318    
040F04 3A 52 22 04         A  4319    	LD	A,(_flashvdp)
040F08 B7                  A  4320    	OR	A,A
040F09 28 6A               A  4321    	JR	Z,L_173
                           A  4322    ;  451			file = mos_fopen(vdpfilename, f
                           A  4323    .LINE 451
                           A  4324    
040F0B 01010000            A  4325    	LD	BC,1
040F0F C5                  A  4326    	PUSH	BC
040F10 01 7B 2D 04         A  4327    	LD	BC,_vdpfilename
040F14 C5                  A  4328    	PUSH	BC
040F15 CD F6 11 04         A  4329    	CALL	_mos_fopen
040F19 C1                  A  4330    	POP	BC
040F1A C1                  A  4331    	POP	BC
040F1B DD77FF              A  4332    	LD	(IX+%FFFFFFFF),A
                           A  4333    ;  452			crc32_initialize();
                           A  4334    .LINE 452
                           A  4335    
040F1E CD 88 15 04         A  4336    	CALL	_crc32_initialize
                           A  4337    ;  453			while(1) {
040F22                     A  4338    L_169:
                           A  4339    .LINE 453
                           A  4340    
                           A  4341    ;  454				size = mos_fread(file, (cha
                           A  4342    .LINE 454
                           A  4343    
040F22 01004000            A  4344    	LD	BC,16384
040F26 C5                  A  4345    	PUSH	BC
040F27 01000005            A  4346    	LD	BC,327680
040F2B C5                  A  4347    	PUSH	BC
040F2C DD4EFF              A  4348    	LD	C,(IX+%FFFFFFFF)
040F2F 0600                A  4349    	LD	B,%0
040F31 C5                  A  4350    	PUSH	BC
040F32 CD 38 12 04         A  4351    	CALL	_mos_fread
040F36 C1                  A  4352    	POP	BC
040F37 C1                  A  4353    	POP	BC
040F38 C1                  A  4354    	POP	BC
040F39 DD2FF6              A  4355    	LD	(IX+%FFFFFFF6),HL
                           A  4356    ;  455				if(size == 0) break;
                           A  4357    .LINE 455
                           A  4358    
040F3C CD 33 1C 04         A  4359    	CALL	__icmpzero
040F40 28 1B               A  4360    	JR	Z,L_170
                           A  4361    ;  456				putch('.');
                           A  4362    .LINE 456
                           A  4363    
040F42 012E0000            A  4364    	LD	BC,46
040F46 C5                  A  4365    	PUSH	BC
040F47 CD E5 00 04         A  4366    	CALL	_putch
040F4B C1                  A  4367    	POP	BC
                           A  4368    ;  457				crc32((char *)BUFFER1, size
                           A  4369    .LINE 457
                           A  4370    
040F4C DD07F6              A  4371    	LD	BC,(IX+%FFFFFFF6)
040F4F C5                  A  4372    	PUSH	BC
040F50 01000005            A  4373    	LD	BC,327680
040F54 C5                  A  4374    	PUSH	BC
040F55 CD DA 15 04         A  4375    	CALL	_crc32
040F59 C1                  A  4376    	POP	BC
040F5A C1                  A  4377    	POP	BC
040F5B 18 C5               A  4378    	JR	L_169
                           A  4379    ;  458			}
040F5D                     A  4380    L_170:
                           A  4381    .LINE 458
                           A  4382    
                           A  4383    ;  459			vdpcrc = crc32_finalize();
                           A  4384    .LINE 459
                           A  4385    
040F5D CD 9D 15 04         A  4386    	CALL	_crc32_finalize
040F61 22 7B 2E 04         A  4387    	LD	(_vdpcrc),HL
040F65 7B                  A  4388    	LD	A,E
040F66 32 7E 2E 04         A  4389    	LD	(_vdpcrc+3),A
                           A  4390    ;  460			mos_fclose(file);
                           A  4391    .LINE 460
                           A  4392    
040F6A DD4EFF              A  4393    	LD	C,(IX+%FFFFFFFF)
040F6D 0600                A  4394    	LD	B,%0
040F6F C5                  A  4395    	PUSH	BC
040F70 CD 0E 12 04         A  4396    	CALL	_mos_fclose
040F74 C1                  A  4397    	POP	BC
                           A  4398    ;  461		}
040F75                     A  4399    L_173:
                           A  4400    .LINE 461
                           A  4401    
                           A  4402    ;  462		printf("\r\n\r\n");
                           A  4403    .LINE 462
                           A  4404    
040F75 01 76 18 04         A  4405    	LD	BC,___print_uputch
040F79 ED43 04 28 04       A  4406    	LD	(___print_xputch),BC
040F7E 01 EC 2B 04         A  4407    	LD	BC,L__133
040F82 C5                  A  4408    	PUSH	BC
040F83 CD 05 17 04         A  4409    	CALL	___print_sendstring
040F87 C1                  A  4410    	POP	BC
                           A  4411    ;  463	}
                           A  4412    .LINE 463
                           A  4413    
040F88 DDF9                A  4414    	LD	SP,IX
040F8A DDE1                A  4415    	POP	IX
040F8C C9                  A  4416    	RET	
                           A  4417    
                           A  4418    
                           A  4419    ;**************************** _calculateCRC32 *
                           A  4420    ;Name                         Addr/Register   S
                           A  4421    ;_vdpfilename                        STATIC    
                           A  4422    ;_flashvdp                           STATIC    
                           A  4423    ;_mos_fclose                         IMPORT  --
                           A  4424    ;_crc32_finalize                     IMPORT  --
                           A  4425    ;_mos_fread                          IMPORT  --
                           A  4426    ;_putch                              IMPORT  --
                           A  4427    ;_crc32                              IMPORT  --
                           A  4428    ;_crc32_initialize                   IMPORT  --
                           A  4429    ;_mosfilename                        STATIC    
                           A  4430    ;_mos_fopen                          IMPORT  --
                           A  4431    ;_flashmos                           STATIC    
                           A  4432    ;___print_sendstring                 IMPORT  --
                           A  4433    ;___print_xputch                     IMPORT    
                           A  4434    ;___print_uputch                     IMPORT  --
                           A  4435    ;_vdpcrc                             STATIC    
                           A  4436    ;_moscrc                             STATIC    
                           A  4437    ;size                                 IX-10    
                           A  4438    ;got                                   IX-7    
                           A  4439    ;ptr                                   IX-4    
                           A  4440    ;file                                  IX-1    
                           A  4441    
                           A  4442    
                           A  4443    ; Stack Frame Size: 16 (bytes)
                           A  4444    ;       Spill Code: 0 (instruction)
                           A  4445    
                           A  4446    
                           A  4447    .ENDFUNC "calculateCRC32",463,"_calculateCRC32"
                           A  4448    	SEGMENT STRSECT
042BDC                     A  4449    L__128:
042BDC 43616C63 756C6174   A  4450    	DB	"Calculating CRC"
042BE4 696E6720 435243 
042BEB 00                  A  4451    	DB	0
042BEC                     A  4452    L__133:
042BEC 0D0A0D0A 00         A  4453    	DB	13,10,13,10,0
                           A  4454    	SEGMENT CODE
                           A  4455    ;  464	
                           A  4456    ;  465	int main(int argc, char * argv[]) {	
040F8D                     A  4457    _main:
                           A  4458    .DEFINE "_main"
                           A  4459    
                           A  4460    .VALUE _main
                           A  4461    
                           A  4462    .CLASS 2
                           A  4463    
                           A  4464    .TYPE 68
                           A  4465    
                           A  4466    .ENDEF
                           A  4467    
                           A  4468    .BEGFUNC "main",465,"_main"
                           A  4469    
                           A  4470    .LINE 465
                           A  4471    
                           A  4472    .DEFINE "argc"
                           A  4473    
                           A  4474    .CLASS 65
                           A  4475    
                           A  4476    .VALUE 6
                           A  4477    
                           A  4478    .TYPE 4
                           A  4479    
                           A  4480    .ENDEF
                           A  4481    
                           A  4482    .DEFINE "argv"
                           A  4483    
                           A  4484    .CLASS 65
                           A  4485    
                           A  4486    .VALUE 9
                           A  4487    
                           A  4488    .TYPE 290
                           A  4489    
                           A  4490    .ENDEF
                           A  4491    
                           A  4492    .DEFINE "n"
                           A  4493    
                           A  4494    .CLASS 65
                           A  4495    
                           A  4496    .VALUE -3
                           A  4497    
                           A  4498    .TYPE 4
                           A  4499    
                           A  4500    .ENDEF
                           A  4501    
                           A  4502    .DEFINE "sysvars"
                           A  4503    
                           A  4504    .CLASS 65
                           A  4505    
                           A  4506    .VALUE -6
                           A  4507    
                           A  4508    .TAG "NONAME3"
                           A  4509    
                           A  4510    .TYPE 40
                           A  4511    
                           A  4512    .ENDEF
                           A  4513    
040F8D DDE5                A  4514    	PUSH	IX
040F8F DD210000 00         A  4515    	LD	IX,0
040F94 DD39                A  4516    	ADD	IX,SP
040F96 C5                  A  4517    	PUSH	BC
040F97 C5                  A  4518    	PUSH	BC
040F98 3B                  A  4519    	DEC	SP
040F99 3B                  A  4520    	DEC	SP
                           A  4521    ;  466		sysvar_t *sysvars;
                           A  4522    ;  467		int n;
                           A  4523    ;  468		uint16_t tmp;
                           A  4524    ;  469		sysvars = getsysvars();
                           A  4525    .LINE 469
                           A  4526    
040F9A CD C6 11 04         A  4527    	CALL	_getsysvars
040F9E DD2FFA              A  4528    	LD	(IX+%FFFFFFFA),HL
                           A  4529    ;  470	
                           A  4530    ;  471		// All checks
                           A  4531    ;  472		if(argc == 1) {
                           A  4532    .LINE 472
                           A  4533    
040FA1 01010000            A  4534    	LD	BC,1
040FA5 DD2706              A  4535    	LD	HL,(IX+%6)
040FA8 B7                  A  4536    	OR	A,A
040FA9 ED42                A  4537    	SBC	HL,BC
040FAB 20 0B               A  4538    	JR	NZ,L_177
                           A  4539    ;  473			usage();
                           A  4540    .LINE 473
                           A  4541    
040FAD CD 50 03 04         A  4542    	CALL	_usage
                           A  4543    ;  474			return 0;
                           A  4544    .LINE 474
                           A  4545    
040FB1 B7                  A  4546    	OR	A,A
040FB2 ED62                A  4547    	SBC	HL,HL
040FB4 C3 9B 11 04         A  4548    	JR	L_216
                           A  4549    ;  475		}
040FB8                     A  4550    L_177:
                           A  4551    .LINE 475
                           A  4552    
                           A  4553    ;  476		if(!parseCommands(argc, argv)) {
                           A  4554    .LINE 476
                           A  4555    
040FB8 DD0709              A  4556    	LD	BC,(IX+%9)
040FBB C5                  A  4557    	PUSH	BC
040FBC DD0706              A  4558    	LD	BC,(IX+%6)
040FBF C5                  A  4559    	PUSH	BC
040FC0 CD B3 09 04         A  4560    	CALL	_parseCommands
040FC4 C1                  A  4561    	POP	BC
040FC5 C1                  A  4562    	POP	BC
040FC6 B7                  A  4563    	OR	A,A
040FC7 20 0C               A  4564    	JR	NZ,L_179
                           A  4565    ;  477			usage();
                           A  4566    .LINE 477
                           A  4567    
040FC9 CD 50 03 04         A  4568    	CALL	_usage
                           A  4569    ;  478			return EXIT_INVALIDPARAMETER;
                           A  4570    .LINE 478
                           A  4571    
040FCD 21130000            A  4572    	LD	HL,19
040FD1 C3 9B 11 04         A  4573    	JR	L_216
                           A  4574    ;  479		}
040FD5                     A  4575    L_179:
                           A  4576    .LINE 479
                           A  4577    
                           A  4578    ;  480		if(!filesExist()) return EXIT_FILEN
                           A  4579    .LINE 480
                           A  4580    
040FD5 CD 93 0B 04         A  4581    	CALL	_filesExist
040FD9 B7                  A  4582    	OR	A,A
040FDA 20 08               A  4583    	JR	NZ,L_181
040FDC 21040000            A  4584    	LD	HL,4
040FE0 C3 9B 11 04         A  4585    	JR	L_216
040FE4                     A  4586    L_181:
                           A  4587    ;  481		if(!validFirmwareFiles()) {
                           A  4588    .LINE 481
                           A  4589    
040FE4 CD 50 0C 04         A  4590    	CALL	_validFirmwareFiles
040FE8 B7                  A  4591    	OR	A,A
040FE9 20 08               A  4592    	JR	NZ,L_182
                           A  4593    ;  482			return EXIT_INVALIDPARAMETER;
                           A  4594    .LINE 482
                           A  4595    
040FEB 21130000            A  4596    	LD	HL,19
040FEF C3 9B 11 04         A  4597    	JR	L_216
                           A  4598    ;  483		}
040FF3                     A  4599    L_182:
                           A  4600    .LINE 483
                           A  4601    
                           A  4602    ;  484	
                           A  4603    ;  485		putch(12);
                           A  4604    .LINE 485
                           A  4605    
040FF3 010C0000            A  4606    	LD	BC,12
040FF7 C5                  A  4607    	PUSH	BC
040FF8 CD E5 00 04         A  4608    	CALL	_putch
040FFC C1                  A  4609    	POP	BC
                           A  4610    ;  486		print_version();
                           A  4611    .LINE 486
                           A  4612    
040FFD CD 2F 03 04         A  4613    	CALL	_print_version
                           A  4614    ;  487		calculateCRC32();
                           A  4615    .LINE 487
                           A  4616    
041001 CD 48 0E 04         A  4617    	CALL	_calculateCRC32
                           A  4618    ;  488		// Skip showing CRC32 and user inpu
                           A  4619    ;  489		if(!optforce) {
                           A  4620    .LINE 489
                           A  4621    
041005 3A 54 22 04         A  4622    	LD	A,(_optforce)
041009 B7                  A  4623    	OR	A,A
04100A 20 20               A  4624    	JR	NZ,L_186
                           A  4625    ;  490			putch(12);
                           A  4626    .LINE 490
                           A  4627    
04100C 010C0000            A  4628    	LD	BC,12
041010 C5                  A  4629    	PUSH	BC
041011 CD E5 00 04         A  4630    	CALL	_putch
041015 C1                  A  4631    	POP	BC
                           A  4632    ;  491			print_version();
                           A  4633    .LINE 491
                           A  4634    
041016 CD 2F 03 04         A  4635    	CALL	_print_version
                           A  4636    ;  492			showCRC32();
                           A  4637    .LINE 492
                           A  4638    
04101A CD 93 0D 04         A  4639    	CALL	_showCRC32
                           A  4640    ;  493			if(!getResponse()) return 0;
                           A  4641    .LINE 493
                           A  4642    
04101E CD 75 03 04         A  4643    	CALL	_getResponse
041022 B7                  A  4644    	OR	A,A
041023 20 07               A  4645    	JR	NZ,L_186
041025 B7                  A  4646    	OR	A,A
041026 ED62                A  4647    	SBC	HL,HL
041028 C3 9B 11 04         A  4648    	JR	L_216
                           A  4649    ;  494		}
04102C                     A  4650    L_186:
                           A  4651    .LINE 494
                           A  4652    
                           A  4653    ;  495		if(optbatch) beep(1);
                           A  4654    .LINE 495
                           A  4655    
04102C 3A 53 22 04         A  4656    	LD	A,(_optbatch)
041030 B7                  A  4657    	OR	A,A
041031 28 0A               A  4658    	JR	Z,L_199
041033 01010000            A  4659    	LD	BC,1
041037 C5                  A  4660    	PUSH	BC
041038 CD 0B 01 04         A  4661    	CALL	_beep
04103C C1                  A  4662    	POP	BC
04103D                     A  4663    L_199:
                           A  4664    ;  496	
                           A  4665    ;  497		if(flashvdp) {
                           A  4666    .LINE 497
                           A  4667    
04103D 3A 52 22 04         A  4668    	LD	A,(_flashvdp)
041041 B7                  A  4669    	OR	A,A
041042 28 74               A  4670    	JR	Z,L_214
                           A  4671    ;  498			while(sysvars->scrheight == 0);
041044                     A  4672    L_188:
                           A  4673    .LINE 498
                           A  4674    
041044 DD31FA              A  4675    	LD	IY,(IX+%FFFFFFFA)
041047 FD0711              A  4676    	LD	BC,(IY+%11)
04104A DD71F8              A  4677    	LD	(IX+%FFFFFFF8),C
04104D DD70F9              A  4678    	LD	(IX+%FFFFFFF9),B
041050 DD27F8              A  4679    	LD	HL,(IX+%FFFFFFF8)
041053 CD 88 1F 04         A  4680    	CALL	__scmpzero
041057 28 EB               A  4681    	JR	Z,L_188
                           A  4682    ;  499			tmp = sysvars->scrheight;
                           A  4683    ;  500			sysvars->scrheight = 0;
                           A  4684    .LINE 500
                           A  4685    
041059 DD31FA              A  4686    	LD	IY,(IX+%FFFFFFFA)
04105C FD361100            A  4687    	LD	(IY+%11),%0
041060 FD361200            A  4688    	LD	(IY+%12),%0
                           A  4689    ;  501			if(update_vdp(vdpfilename)) {
                           A  4690    .LINE 501
                           A  4691    
041064 01 7B 2D 04         A  4692    	LD	BC,_vdpfilename
041068 C5                  A  4693    	PUSH	BC
041069 CD 4E 04 04         A  4694    	CALL	_update_vdp
04106D C1                  A  4695    	POP	BC
04106E B7                  A  4696    	OR	A,A
04106F 28 29               A  4697    	JR	Z,L_197
                           A  4698    ;  502				echoVDP(1);
                           A  4699    .LINE 502
                           A  4700    
041071 01010000            A  4701    	LD	BC,1
041075 C5                  A  4702    	PUSH	BC
041076 CD 72 08 04         A  4703    	CALL	_echoVDP
04107A C1                  A  4704    	POP	BC
                           A  4705    ;  503				while(sysvars->scrheight ==
04107B                     A  4706    L_191:
                           A  4707    .LINE 503
                           A  4708    
04107B DD31FA              A  4709    	LD	IY,(IX+%FFFFFFFA)
04107E FD2711              A  4710    	LD	HL,(IY+%11)
041081 CD 88 1F 04         A  4711    	CALL	__scmpzero
041085 28 F4               A  4712    	JR	Z,L_191
                           A  4713    ;  504				if(optbatch) beep(2);
                           A  4714    .LINE 504
                           A  4715    
041087 3A 53 22 04         A  4716    	LD	A,(_optbatch)
04108B B7                  A  4717    	OR	A,A
04108C 28 2A               A  4718    	JR	Z,L_214
04108E 01020000            A  4719    	LD	BC,2
041092 C5                  A  4720    	PUSH	BC
041093 CD 0B 01 04         A  4721    	CALL	_beep
041097 C1                  A  4722    	POP	BC
                           A  4723    ;  505			}
                           A  4724    ;  506			else {
                           A  4725    .LINE 506
                           A  4726    
041098 18 1E               A  4727    	JR	L_214
04109A                     A  4728    L_197:
                           A  4729    ;  507				if(!optforce && flashmos) {
                           A  4730    .LINE 507
                           A  4731    
04109A 3A 54 22 04         A  4732    	LD	A,(_optforce)
04109E B7                  A  4733    	OR	A,A
04109F 20 17               A  4734    	JR	NZ,L_214
0410A1 3A 51 22 04         A  4735    	LD	A,(_flashmos)
0410A5 B7                  A  4736    	OR	A,A
0410A6 28 10               A  4737    	JR	Z,L_214
                           A  4738    ;  508					askEscapeToContinue();
                           A  4739    .LINE 508
                           A  4740    
0410A8 CD F9 03 04         A  4741    	CALL	_askEscapeToContinue
                           A  4742    ;  509					sysvars->scrheight = tm
                           A  4743    .LINE 509
                           A  4744    
0410AC DD07F8              A  4745    	LD	BC,(IX+%FFFFFFF8)
0410AF DD31FA              A  4746    	LD	IY,(IX+%FFFFFFFA)
0410B2 FD7111              A  4747    	LD	(IY+%11),C
0410B5 FD7012              A  4748    	LD	(IY+%12),B
                           A  4749    ;  510				}
                           A  4750    ;  511			}
                           A  4751    ;  512		}
0410B8                     A  4752    L_214:
                           A  4753    .LINE 512
                           A  4754    
                           A  4755    ;  513	
                           A  4756    ;  514		if(flashmos) {
                           A  4757    .LINE 514
                           A  4758    
0410B8 3A 51 22 04         A  4759    	LD	A,(_flashmos)
0410BC B7                  A  4760    	OR	A,A
0410BD CA 98 11 04         A  4761    	JR	Z,L_215
                           A  4762    ;  515			if(update_mos(mosfilename)) {
                           A  4763    .LINE 515
                           A  4764    
0410C1 01 77 2C 04         A  4765    	LD	BC,_mosfilename
0410C5 C5                  A  4766    	PUSH	BC
0410C6 CD FE 04 04         A  4767    	CALL	_update_mos
0410CA C1                  A  4768    	POP	BC
0410CB B7                  A  4769    	OR	A,A
0410CC CA 70 11 04         A  4770    	JR	Z,L_212
                           A  4771    ;  516				printf("\r\nDone\r\n\r\n");
                           A  4772    .LINE 516
                           A  4773    
0410D0 01 76 18 04         A  4774    	LD	BC,___print_uputch
0410D4 ED43 04 28 04       A  4775    	LD	(___print_xputch),BC
0410D9 01 F1 2B 04         A  4776    	LD	BC,L__151
0410DD C5                  A  4777    	PUSH	BC
0410DE CD 05 17 04         A  4778    	CALL	___print_sendstring
0410E2 C1                  A  4779    	POP	BC
                           A  4780    ;  517				if(optbatch) {
                           A  4781    .LINE 517
                           A  4782    
0410E3 3A 53 22 04         A  4783    	LD	A,(_optbatch)
0410E7 B7                  A  4784    	OR	A,A
0410E8 28 1F               A  4785    	JR	Z,L_208
                           A  4786    ;  518					printf("Press reset but
                           A  4787    .LINE 518
                           A  4788    
0410EA 01 76 18 04         A  4789    	LD	BC,___print_uputch
0410EE ED43 04 28 04       A  4790    	LD	(___print_xputch),BC
0410F3 01 FC 2B 04         A  4791    	LD	BC,L__153
0410F7 C5                  A  4792    	PUSH	BC
0410F8 CD 05 17 04         A  4793    	CALL	___print_sendstring
0410FC C1                  A  4794    	POP	BC
                           A  4795    ;  519					beep(3);
                           A  4796    .LINE 519
                           A  4797    
0410FD 01030000            A  4798    	LD	BC,3
041101 C5                  A  4799    	PUSH	BC
041102 CD 0B 01 04         A  4800    	CALL	_beep
041106 C1                  A  4801    	POP	BC
                           A  4802    ;  520					while(1); // don't repe
041107                     A  4803    L_201:
                           A  4804    .LINE 520
                           A  4805    
041107 18 FE               A  4806    	JR	L_201
                           A  4807    ;  521				}
                           A  4808    ;  522				else {
041109                     A  4809    L_208:
                           A  4810    .LINE 522
                           A  4811    
                           A  4812    ;  523					printf("System reset in
                           A  4813    .LINE 523
                           A  4814    
041109 01 76 18 04         A  4815    	LD	BC,___print_uputch
04110D ED43 04 28 04       A  4816    	LD	(___print_xputch),BC
041112 01 0F 2C 04         A  4817    	LD	BC,L__154
041116 C5                  A  4818    	PUSH	BC
041117 CD 05 17 04         A  4819    	CALL	___print_sendstring
04111B C1                  A  4820    	POP	BC
                           A  4821    ;  524					for(n = 3; n > 0; n--) 
                           A  4822    .LINE 524
                           A  4823    
04111C 01030000            A  4824    	LD	BC,3
041120 DD0FFD              A  4825    	LD	(IX+%FFFFFFFD),BC
041123 18 38               A  4826    	JR	L_205
041125                     A  4827    L_203:
                           A  4828    ;  525						printf("%d...", n);
                           A  4829    .LINE 525
                           A  4830    
041125 01 76 18 04         A  4831    	LD	BC,___print_uputch
041129 ED43 04 28 04       A  4832    	LD	(___print_xputch),BC
04112E DD07FD              A  4833    	LD	BC,(IX+%FFFFFFFD)
041131 CD 0E 1F 04         A  4834    	CALL	__itol
041135 C5D1                A  4835    	LD	DE,BC
041137 4F                  A  4836    	LD	C,A
041138 0600                A  4837    	LD	B,%0
04113A C5                  A  4838    	PUSH	BC
04113B D5                  A  4839    	PUSH	DE
04113C CD FC 18 04         A  4840    	CALL	__u_itoa
041140 C1                  A  4841    	POP	BC
041141 C1                  A  4842    	POP	BC
041142 01 20 2C 04         A  4843    	LD	BC,L__155
041146 C5                  A  4844    	PUSH	BC
041147 CD 05 17 04         A  4845    	CALL	___print_sendstring
04114B C1                  A  4846    	POP	BC
                           A  4847    ;  526						delayms(1000);
                           A  4848    .LINE 526
                           A  4849    
04114C 01E80300            A  4850    	LD	BC,1000
041150 C5                  A  4851    	PUSH	BC
041151 CD A2 13 04         A  4852    	CALL	_delayms
041155 C1                  A  4853    	POP	BC
041156 DD07FD              A  4854    	LD	BC,(IX+%FFFFFFFD)
041159 0B                  A  4855    	DEC	BC
04115A DD0FFD              A  4856    	LD	(IX+%FFFFFFFD),BC
                           A  4857    ;  527					}
04115D                     A  4858    L_205:
                           A  4859    .LINE 527
                           A  4860    
04115D DD07FD              A  4861    	LD	BC,(IX+%FFFFFFFD)
041160 B7                  A  4862    	OR	A,A
041161 ED62                A  4863    	SBC	HL,HL
041163 B7                  A  4864    	OR	A,A
041164 ED42                A  4865    	SBC	HL,BC
041166 FA 25 11 04         A  4866    	JP	M,L_203
                           A  4867    ;  528					reset();
                           A  4868    .LINE 528
                           A  4869    
04116A CD FC 12 04         A  4870    	CALL	_reset
                           A  4871    ;  529				}
                           A  4872    ;  530			}
                           A  4873    ;  531			else {
                           A  4874    .LINE 531
                           A  4875    
04116E 18 28               A  4876    	JR	L_215
041170                     A  4877    L_212:
                           A  4878    ;  532				printf("\r\nMultiple errors
                           A  4879    .LINE 532
                           A  4880    
041170 01 76 18 04         A  4881    	LD	BC,___print_uputch
041174 ED43 04 28 04       A  4882    	LD	(___print_xputch),BC
041179 01 24 2C 04         A  4883    	LD	BC,L__157
04117D C5                  A  4884    	PUSH	BC
04117E CD 05 17 04         A  4885    	CALL	___print_sendstring
041182 C1                  A  4886    	POP	BC
                           A  4887    ;  533				printf("Bare-metal recovery
                           A  4888    .LINE 533
                           A  4889    
041183 01 76 18 04         A  4890    	LD	BC,___print_uputch
041187 ED43 04 28 04       A  4891    	LD	(___print_xputch),BC
04118C 01 54 2C 04         A  4892    	LD	BC,L__158
041190 C5                  A  4893    	PUSH	BC
041191 CD 05 17 04         A  4894    	CALL	___print_sendstring
041195 C1                  A  4895    	POP	BC
                           A  4896    ;  534				while(1); // No live MOS to
041196                     A  4897    L_210:
                           A  4898    .LINE 534
                           A  4899    
041196 18 FE               A  4900    	JR	L_210
                           A  4901    ;  535			}
                           A  4902    ;  536		}
041198                     A  4903    L_215:
                           A  4904    .LINE 536
                           A  4905    
                           A  4906    ;  537		return 0;
                           A  4907    .LINE 537
                           A  4908    
041198 B7                  A  4909    	OR	A,A
041199 ED62                A  4910    	SBC	HL,HL
                           A  4911    ;  538	}
04119B                     A  4912    L_216:
                           A  4913    .LINE 538
                           A  4914    
04119B DDF9                A  4915    	LD	SP,IX
04119D DDE1                A  4916    	POP	IX
04119F C9                  A  4917    	RET	
                           A  4918    
                           A  4919    
                           A  4920    ;**************************** _main ***********
                           A  4921    ;Name                         Addr/Register   S
                           A  4922    ;_reset                              IMPORT  --
                           A  4923    ;_delayms                            IMPORT  --
                           A  4924    ;__u_itoa                            IMPORT  --
                           A  4925    ;___print_sendstring                 IMPORT  --
                           A  4926    ;___print_xputch                     IMPORT    
                           A  4927    ;___print_uputch                     IMPORT  --
                           A  4928    ;_mosfilename                        STATIC    
                           A  4929    ;_flashmos                           STATIC    
                           A  4930    ;_vdpfilename                        STATIC    
                           A  4931    ;_flashvdp                           STATIC    
                           A  4932    ;_optbatch                           STATIC    
                           A  4933    ;_optforce                           STATIC    
                           A  4934    ;_putch                              IMPORT  --
                           A  4935    ;_getsysvars                         IMPORT  --
                           A  4936    ;G_7                                   IX-8    
                           A  4937    ;sysvars                               IX-6    
                           A  4938    ;n                                     IX-3    
                           A  4939    ;argv                                  IX+9    
                           A  4940    ;argc                                  IX+6    
                           A  4941    
                           A  4942    
                           A  4943    ; Stack Frame Size: 20 (bytes)
                           A  4944    ;       Spill Code: 0 (instruction)
                           A  4945    
                           A  4946    
                           A  4947    .ENDFUNC "main",538,"_main"
                           A  4948    	SEGMENT STRSECT
042BF1                     A  4949    L__151:
042BF1 0D0A                A  4950    	DB	13,10
042BF3 446F6E65            A  4951    	DB	"Done"
042BF7 0D0A0D0A 00         A  4952    	DB	13,10,13,10,0
042BFC                     A  4953    L__153:
042BFC 50726573 73207265   A  4954    	DB	"Press reset button"
042C04 73657420 62757474 
042C0C 6F6E 
042C0E 00                  A  4955    	DB	0
042C0F                     A  4956    L__154:
042C0F 53797374 656D2072   A  4957    	DB	"System reset in "
042C17 65736574 20696E20 
042C1F 00                  A  4958    	DB	0
042C20                     A  4959    L__155:
042C20 2E2E2E              A  4960    	DB	"..."
042C23 00                  A  4961    	DB	0
042C24                     A  4962    L__157:
042C24 0D0A                A  4963    	DB	13,10
042C26 4D756C74 69706C65   A  4964    	DB	"Multiple errors occured during flash w
042C2E 20657272 6F727320 
042C36 6F636375 72656420 
042C3E 64757269 6E672066 
042C46 6C617368 20777269 
042C4E 74652E 
042C51 0D0A00              A  4965    	DB	13,10,0
042C54                     A  4966    L__158:
042C54 42617265 2D6D6574   A  4967    	DB	"Bare-metal recovery required."
042C5C 616C2072 65636F76 
042C64 65727920 72657175 
042C6C 69726564 2E 
042C71 0D0A00              A  4968    	DB	13,10,0
                           A  4969    	XREF _memcmp:ROM
                           A  4970    	XREF _strcpy:ROM
                           A  4971    	XREF _getFileSize:ROM
                           A  4972    	XREF _crc32_finalize:ROM
                           A  4973    	XREF _crc32_initialize:ROM
                           A  4974    	XREF _crc32:ROM
                           A  4975    	XREF _delayms:ROM
                           A  4976    	XREF _startVDPupdate:ROM
                           A  4977    	XREF _reset:ROM
                           A  4978    	XREF _fastmemcpy:ROM
                           A  4979    	XREF _lockFlashKeyRegister:ROM
                           A  4980    	XREF _enableFlashKeyRegister:ROM
                           A  4981    	XREF _mos_fread:ROM
                           A  4982    	XREF _mos_fclose:ROM
                           A  4983    	XREF _mos_fopen:ROM
                           A  4984    	XREF _getsysvars:ROM
                           A  4985    	XREF _getch:ROM
                           A  4986    	XREF _tolower:ROM
                           A  4987    	XREF __u_ultoa:ROM
                           A  4988    	XREF __u_itoa:ROM
                           A  4989    	XREF ___print_sendstring:ROM
                           A  4990    	XREF ___print_xputch:ROM
                           A  4991    	XREF ___print_uputch:ROM
                           A  4992    	XREF ___print_fmt:ROM
                           A  4993    	XREF __lcmpu:ROM
                           A  4994    	XREF __iand:ROM
                           A  4995    	XREF __stoiu:ROM
                           A  4996    	XREF __itol:ROM
                           A  4997    	XREF __scmpzero:ROM
                           A  4998    	XREF __icmpzero:ROM
                           A  4999    	XREF __seqcaseD:ROM
                           A  5000    	XREF __ishru_b:ROM
                           A  5001    	XREF __ishrs_b:ROM
                           A  5002    	XDEF _main
                           A  5003    	XDEF _calculateCRC32
                           A  5004    	XDEF _showCRC32
                           A  5005    	XDEF _validFirmwareFiles
                           A  5006    	XDEF _filesExist
                           A  5007    	XDEF _parseCommands
                           A  5008    	XDEF _getCommand
                           A  5009    	XDEF _echoVDP
                           A  5010    	XDEF _update_mos
                           A  5011    	XDEF _update_vdp
                           A  5012    	XDEF _askEscapeToContinue
                           A  5013    	XDEF _getResponse
                           A  5014    	XDEF _usage
                           A  5015    	XDEF _print_version
                           A  5016    	XDEF _containsESP32Header
                           A  5017    	XDEF _esp32_magicnumbers
                           A  5018    	XDEF _containsMosHeader
                           A  5019    	XDEF _mos_magicnumbers
                           A  5020    	XDEF _vdp_ota_present
                           A  5021    	XDEF _getCharAt
                           A  5022    	XDEF _beep
                           A  5023    	XDEF _putch
                           A  5024    	XDEF _optforce
                           A  5025    	XDEF _optbatch
                           A  5026    	XDEF _vdpcrc
                           A  5027    	XDEF _vdpfilename
                           A  5028    	XDEF _flashvdp
                           A  5029    	XDEF _moscrc
                           A  5030    	XDEF _mosfilename
                           A  5031    	XDEF _flashmos
                           A  5032    	XDEF _errno
                           A  5033    	END


Errors: 0
Warnings: 0
Lines Assembled: 5034
