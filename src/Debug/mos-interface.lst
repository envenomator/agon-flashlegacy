Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED02-Nov-23     12:23:06     page:   1


PC     Object              I  Line    Source 
                           A     1    ;
                           A     2    ; Title:		AGON MOS - MOS assembly interfa
                           A     3    ; Author:		Jeroen Venema
                           A     4    ; Created:		15/10/2022
                           A     5    ; Last Updated:	14/10/2023
                           A     6    ; 
                           A     7    ; Modinfo:
                           A     8    ; 15/10/2022:		Added _putch, _getch
                           A     9    ; 21/10/2022:		Added _puts
                           A    10    ; 22/10/2022:		Added _waitvblank, _mos_f* 
                           A    11    ; 26/11/2022:       __putch, changed default ro
                           A    12    ; 10/01/2023:		Added _getsysvar_cursorX/Y 
                           A    13    ; 23/02/2023:		Added _mos_save and _mos_de
                           A    14    ; 14/10/2023:		Added _mos_flseek
                           B     0    	.include "mos_api.inc"
                           B     1    ;
                           B     2    ; Title:	AGON MOS - API for user projects
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	03/08/2022
                           B     5    ; Last Updated:	15/04/2023
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    ; 05/08/2022:	Added mos_feof
                           B     9    ; 09/08/2022:	Added system variables: cursorX
                           B    10    ; 18/08/2022:	Added system variables: scrchar
                           B    11    ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
                           B    12    ; 24/09/2022:	Added mos_getError, mos_mkdir
                           B    13    ; 13/10/2022:	Added mos_oscli
                           B    14    ; 23/02/2023:	Added more sysvars, fixed typo 
                           B    15    ; 04/03/2023:	Added sysvar_scrpixelIndex
                           B    16    ; 08/03/2023:	Renamed sysvar_keycode to sysva
                           B    17    ; 15/03/2023:	Added mos_copy, mos_getrtc, mos
                           B    18    ; 21/03/2023:	Added mos_setintvector, sysvars
                           B    19    ; 22/03/2023:	The VDP commands are now indexe
                           B    20    ; 29/03/2023:	Added mos_uopen, mos_uclose, mo
                           B    21    ; 13/04/2023:	Added FatFS file structures (FF
                           B    22    ; 15/04/2023:	Added mos_getfil, mos_fread, mo
                           B    23    
                           B    24    ; VDP control (VDU 23, 0, n)
                           B    25    ;
       00000080            B    26    vdp_gp:			EQU 	80h
       00000081            B    27    vdp_keycode:		EQU 	81h
       00000082            B    28    vdp_cursor:		EQU	82h
       00000083            B    29    vdp_scrchar:		EQU	83h
       00000084            B    30    vdp_scrpixel:		EQU	84h
       00000085            B    31    vdp_audio:		EQU	85h
       00000086            B    32    vdp_mode:		EQU	86h
       00000087            B    33    vdp_rtc:		EQU	87h
       00000088            B    34    vdp_keystate:		EQU	88h
       000000C0            B    35    vdp_logicalcoords:	EQU	C0h
       000000FF            B    36    vdp_terminalmode:	EQU	FFh
                           B    37    
                           B    38    ; MOS high level functions
                           B    39    ;
       00000000            B    40    mos_getkey:		EQU	00h
       00000001            B    41    mos_load:		EQU	01h
       00000002            B    42    mos_save:		EQU	02h
       00000003            B    43    mos_cd:			EQU	03h
       00000004            B    44    mos_dir:		EQU	04h
       00000005            B    45    mos_del:		EQU	05h
       00000006            B    46    mos_ren:		EQU	06h
       00000007            B    47    mos_mkdir:		EQU	07h
       00000008            B    48    mos_sysvars:		EQU	08h
       00000009            B    49    mos_editline:		EQU	09h
       0000000A            B    50    mos_fopen:		EQU	0Ah
       0000000B            B    51    mos_fclose:		EQU	0Bh
       0000000C            B    52    mos_fgetc:		EQU	0Ch
       0000000D            B    53    mos_fputc:		EQU	0Dh
       0000000E            B    54    mos_feof:		EQU	0Eh
       0000000F            B    55    mos_getError:		EQU	0Fh
       00000010            B    56    mos_oscli:		EQU	10h
       00000011            B    57    mos_copy:		EQU	11h
       00000012            B    58    mos_getrtc:		EQU	12h
       00000013            B    59    mos_setrtc:		EQU	13h
       00000014            B    60    mos_setintvector:	EQU	14h
       00000015            B    61    mos_uopen:		EQU	15h
       00000016            B    62    mos_uclose:		EQU	16h
       00000017            B    63    mos_ugetc:		EQU	17h
       00000018            B    64    mos_uputc:		EQU 	18h
       00000019            B    65    mos_getfil:		EQU	19h
       0000001A            B    66    mos_fread:		EQU	1Ah
       0000001B            B    67    mos_fwrite:		EQU	1Bh
       0000001C            B    68    mos_flseek:		EQU	1Ch
                           B    69    
                           B    70    ; FatFS file access functions
                           B    71    ;
       00000080            B    72    ffs_fopen:		EQU	80h
       00000081            B    73    ffs_fclose:		EQU	81h
       00000082            B    74    ffs_fread:		EQU	82h
       00000083            B    75    ffs_fwrite:		EQU	83h
       00000084            B    76    ffs_flseek:		EQU	84h
       00000085            B    77    ffs_ftruncate:		EQU	85h
       00000086            B    78    ffs_fsync:		EQU	86h
       00000087            B    79    ffs_fforward:		EQU	87h
       00000088            B    80    ffs_fexpand:		EQU	88h
       00000089            B    81    ffs_fgets:		EQU	89h
       0000008A            B    82    ffs_fputc:		EQU	8Ah
       0000008B            B    83    ffs_fputs:		EQU	8Bh
       0000008C            B    84    ffs_fprintf:		EQU	8Ch
       0000008D            B    85    ffs_ftell:		EQU	8Dh
       0000008E            B    86    ffs_feof:		EQU	8Eh
       0000008F            B    87    ffs_fsize:		EQU	8Fh
       00000090            B    88    ffs_ferror:		EQU	90h
                           B    89    
                           B    90    ; FatFS directory access functions
                           B    91    ;
       00000091            B    92    ffs_dopen:		EQU	91h
       00000092            B    93    ffs_dclose:		EQU	92h
       00000093            B    94    ffs_dread:		EQU	93h
       00000094            B    95    ffs_dfindfirst:		EQU	94h
       00000095            B    96    ffs_dfindnext:		EQU	95h
                           B    97    
                           B    98    ; FatFS file and directory management functions
                           B    99    ;
       00000096            B   100    ffs_stat:		EQU	96h
       00000097            B   101    ffs_unlink:		EQU	97h
       00000098            B   102    ffs_rename:		EQU	98h
       00000099            B   103    ffs_chmod:		EQU	99h
       0000009A            B   104    ffs_utime:		EQU	9Ah
       0000009B            B   105    ffs_mkdir:		EQU	9Bh
       0000009C            B   106    ffs_chdir:		EQU	9Ch
       0000009D            B   107    ffs_chdrive:		EQU	9Dh
       0000009E            B   108    ffs_getcwd:		EQU	9Eh
                           B   109    
                           B   110    ; FatFS volume management and system configurat
                           B   111    ;
       0000009F            B   112    ffs_mount:		EQU	9Fh
       000000A0            B   113    ffs_mkfs:		EQU	A0h
       000000A1            B   114    ffs_fdisk		EQU	A1h
       000000A2            B   115    ffs_getfree:		EQU	A2h
       000000A3            B   116    ffs_getlabel:		EQU	A3h
       000000A4            B   117    ffs_setlabel:		EQU	A4h
       000000A5            B   118    ffs_setcp:		EQU	A5h
                           B   119    	
                           B   120    ; File access modes
                           B   121    ;
       00000001            B   122    fa_read:		EQU	01h
       00000002            B   123    fa_write:		EQU	02h
       00000000            B   124    fa_open_existing:	EQU	00h
       00000004            B   125    fa_create_new:		EQU	04h
       00000008            B   126    fa_create_always:	EQU	08h
       00000010            B   127    fa_open_always:		EQU	10h
       00000030            B   128    fa_open_append:		EQU	30h
                           B   129    	
                           B   130    ; System variable indexes for api_sysvars
                           B   131    ; Index into _sysvars in globals.asm
                           B   132    ;
       00000000            B   133    sysvar_time:		EQU	00h	; 4: Clock timer in
       00000004            B   134    sysvar_vpd_pflags:	EQU	04h	; 1: Flags to indic
       00000005            B   135    sysvar_keyascii:	EQU	05h	; 1: ASCII keycode,
       00000006            B   136    sysvar_keymods:		EQU	06h	; 1: Keycode modifi
       00000007            B   137    sysvar_cursorX:		EQU	07h	; 1: Cursor X posit
       00000008            B   138    sysvar_cursorY:		EQU	08h	; 1: Cursor Y posit
       00000009            B   139    sysvar_scrchar:		EQU	09h	; 1: Character read
       0000000A            B   140    sysvar_scrpixel:	EQU	0Ah	; 3: Pixel data rea
       0000000D            B   141    sysvar_audioChannel:	EQU	0Dh	; 1: Audio chan
       0000000E            B   142    sysvar_audioSuccess:	EQU	0Eh	; 1: Audio chan
       0000000F            B   143    sysvar_scrWidth:	EQU	0Fh	; 2: Screen width i
       00000011            B   144    sysvar_scrHeight:	EQU	11h	; 2: Screen height 
       00000013            B   145    sysvar_scrCols:		EQU	13h	; 1: Screen columns
       00000014            B   146    sysvar_scrRows:		EQU	14h	; 1: Screen rows in
       00000015            B   147    sysvar_scrColours:	EQU	15h	; 1: Number of colo
       00000016            B   148    sysvar_scrpixelIndex:	EQU	16h	; 1: Index of p
       00000017            B   149    sysvar_vkeycode:	EQU	17h	; 1: Virtual key co
       00000018            B   150    sysvar_vkeydown		EQU	18h	; 1: Virtual key st
       00000019            B   151    sysvar_vkeycount:	EQU	19h	; 1: Incremented ev
       0000001A            B   152    sysvar_rtc:		EQU	1Ah	; 8: Real time clock da
       00000022            B   153    sysvar_keydelay:	EQU	22h	; 2: Keyboard repea
       00000024            B   154    sysvar_keyrate:		EQU	24h	; 2: Keyboard repea
       00000026            B   155    sysvar_keyled:		EQU	26h	; 1: Keyboard LED s
                           B   156    	
                           B   157    ; Flags for the VPD protocol
                           B   158    ;
       00000001            B   159    vdp_pflag_cursor:	EQU	00000001b
       00000002            B   160    vdp_pflag_scrchar:	EQU	00000010b
       00000004            B   161    vdp_pflag_point:	EQU	00000100b
       00000008            B   162    vdp_pflag_audio:	EQU	00001000b
       00000010            B   163    vdp_pflag_mode:		EQU	00010000b
       00000020            B   164    vdp_pflag_rtc:		EQU	00100000b
                           B   165    
                           B   166    ;
                           B   167    ; FatFS structures
                           B   168    ; These mirror the structures contained in src_
                           B   169    ;
                           B   170    ; Object ID and allocation information (FFOBJID
                           B   171    ;
                           B   172    FFOBJID	.STRUCT
000000                     B   173    	fs:		DS	3	; Pointer to the hosting vo
000003                     B   174    	id:		DS	2	; Hosting volume mount ID
000005                     B   175    	attr:		DS	1	; Object attribute
000006                     B   176    	stat:		DS	1	; Object chain status (
000007                     B   177    	sclust:		DS	4	; Object data start clu
00000B                     B   178    	objsize:	DS	4	; Object size (valid wh
       0000000F            B   179    FFOBJID_SIZE .ENDSTRUCT FFOBJID
                           B   180    ;
                           B   181    ; File object structure (FIL)
                           B   182    ;
                           B   183    FIL .STRUCT
000000                     B   184    	obj:		.TAG	FFOBJID	; Object identi
00000F                     B   185    	flag:		DS	1	; File status flags
000010                     B   186    	err:		DS	1	; Abort flag (error cod
000011                     B   187    	fptr:		DS	4	; File read/write point
000015                     B   188    	clust:		DS	4	; Current cluster of fp
000019                     B   189    	sect:		DS	4	; Sector number appeari
00001D                     B   190    	dir_sect:	DS	4	; Sector number contain
000021                     B   191    	dir_ptr:	DS	3	; Pointer to the direct
       00000024            B   192    FIL_SIZE .ENDSTRUCT FIL
                           B   193    ;
                           B   194    ; Directory object structure (DIR)
                           B   195    ; 
                           B   196    DIR .STRUCT
000000                     B   197    	obj:		.TAG	FFOBJID	; Object identi
00000F                     B   198    	dptr:		DS	4	; Current read/write of
000013                     B   199    	clust:		DS	4	; Current cluster
000017                     B   200    	sect:		DS	4	; Current sector (0:Rea
00001B                     B   201    	dir:		DS	3	; Pointer to the direct
00001E                     B   202    	fn:		DS	12	; SFN (in/out) {body[8],ext
00002A                     B   203    	blk_ofs:	DS	4	; Offset of current ent
       0000002E            B   204    DIR_SIZE .ENDSTRUCT DIR
                           B   205    ;
                           B   206    ; File information structure (FILINFO)
                           B   207    ;
                           B   208    FILINFO .STRUCT
000000                     B   209    	fsize:		DS 	4	; File size
000004                     B   210    	fdate:		DS	2	; Modified date
000006                     B   211    	ftime:		DS	2	; Modified time
000008                     B   212    	fattrib:	DS	1	; File attribute
000009                     B   213    	altname:	DS	13	; Alternative file name
000016                     B   214    	fname:		DS	256	; Primary file name
       00000116            B   215    FILINFO_SIZE .ENDSTRUCT FILINFO
                           B   216    
                           B   217    ;
                           B   218    ; Macro for calling the API
                           B   219    ; Parameters:
                           B   220    ; - function: One of the function numbers liste
                           B   221    ;
                           B   222    MOSCALL:		MACRO	function
                           B   223    			LD	A, function
                           B   224    			RST.LIS	08h
                           B   225    			ENDMACRO 	
                           A    16    
                           A    17    	XDEF _getch
                           A    18    	XDEF _waitvblank
                           A    19    	XDEF _mos_fopen
                           A    20    	XDEF _mos_fclose
                           A    21    	XDEF _mos_fgetc
                           A    22    	XDEF _mos_fread
                           A    23    	XDEF _mos_feof
                           A    24    	XDEF _mos_save
                           A    25    	XDEF _mos_del
                           A    26    	XDEF _mos_flseek
                           A    27    	XDEF _getsysvar_cursorX
                           A    28    	XDEF _getsysvar_cursorY
                           A    29    	XDEF _getsysvar_scrchar
                           A    30    
                           A    31    	XDEF _getsysvars
                           A    32    
                           A    33    	segment CODE
                           A    34    	.assume ADL=1
                           A    35    	
0411A0                     A    36    _getch:
0411A0 DDE5                A    37    	push ix
0411A2 3E08                A    38    	ld a, mos_sysvars			; MOS Call for 
0411A4 5BCF                A    39    	rst.lil 08h					; returns point
0411A6                     A    40    _getch0:
0411A6 DD7E05              A    41    	ld a, (ix+sysvar_keyascii)	; get current k
0411A9 B7                  A    42    	or a,a
0411AA 28 FA               A    43    	jr z, _getch0				; wait for keyp
                           A    44    	
0411AC F5                  A    45    	push af						; debounce key,
0411AD AF                  A    46    	xor a
0411AE DD7705              A    47    	ld (ix+sysvar_keyascii),a
0411B1 F1                  A    48    	pop af
0411B2 DDE1                A    49    	pop ix
0411B4 C9                  A    50    	ret
                           A    51    
0411B5                     A    52    _waitvblank:
0411B5 DDE5                A    53    	push ix
0411B7 3E08                A    54    	ld a, mos_sysvars
0411B9 5BCF                A    55    	rst.lil 08h
0411BB DD7E00              A    56    	ld a, (ix + sysvar_time + 0)
0411BE DDBE00              A    57    $$:	cp a, (ix + sysvar_time + 0)
0411C1 28 FB               A    58    	jr z, $B
0411C3 DDE1                A    59    	pop ix
0411C5 C9                  A    60    	ret
                           A    61    
0411C6                     A    62    _getsysvars:
0411C6 DDE5                A    63    	push	ix
0411C8 3E08                A    64    	ld		a, mos_sysvars
0411CA 5BCF                A    65    	rst.lil	08h
0411CC DDE5                A    66    	push	ix
0411CE E1                  A    67    	pop		hl
0411CF DDE1                A    68    	pop		ix
0411D1 C9                  A    69    	ret
                           A    70    
0411D2                     A    71    _getsysvar_cursorX:
0411D2 DDE5                A    72    	push ix
0411D4 3E08                A    73    	ld a, mos_sysvars			; MOS Call for 
0411D6 5BCF                A    74    	rst.lil 08h					; returns point
0411D8 DD7E07              A    75    	ld a, (ix+sysvar_cursorX)	; get current k
0411DB DDE1                A    76    	pop ix
0411DD C9                  A    77    	ret
                           A    78    
0411DE                     A    79    _getsysvar_cursorY:
0411DE DDE5                A    80    	push ix
0411E0 3E08                A    81    	ld a, mos_sysvars			; MOS Call for 
0411E2 5BCF                A    82    	rst.lil 08h					; returns point
0411E4 DD7E08              A    83    	ld a, (ix+sysvar_cursorY)	; get current k
0411E7 DDE1                A    84    	pop ix
0411E9 C9                  A    85    	ret
                           A    86    
0411EA                     A    87    _getsysvar_scrchar:
0411EA DDE5                A    88    	push ix
0411EC 3E08                A    89    	ld a, mos_sysvars			; MOS Call for 
0411EE 5BCF                A    90    	rst.lil 08h					; returns point
0411F0 DD7E09              A    91    	ld a, (ix+sysvar_scrchar)	; get current k
0411F3 DDE1                A    92    	pop ix
0411F5 C9                  A    93    	ret
                           A    94    
0411F6                     A    95    _mos_fopen:
0411F6 DDE5                A    96    	push ix
0411F8 DD210000 00         A    97    	ld ix,0
0411FD DD39                A    98    	add ix, sp
                           A    99    	
0411FF DD2706              A   100    	ld hl, (ix+6)	; address to 0-terminated f
041202 DD4E09              A   101    	ld c,  (ix+9)	; mode : fa_read / fa_write
041205 3E0A                A   102    	ld a, mos_fopen
041207 5BCF                A   103    	rst.lil 08h		; returns filehandle in A
                           A   104    	
041209 DDF9                A   105    	ld sp,ix
04120B DDE1                A   106    	pop ix
04120D C9                  A   107    	ret	
                           A   108    
04120E                     A   109    _mos_fclose:
04120E DDE5                A   110    	push ix
041210 DD210000 00         A   111    	ld ix,0
041215 DD39                A   112    	add ix, sp
                           A   113    	
041217 DD4E06              A   114    	ld c, (ix+6)	; filehandle, or 0 to close
04121A 3E0B                A   115    	ld a, mos_fclose
04121C 5BCF                A   116    	rst.lil 08h		; returns number of files s
                           A   117    	
04121E DDF9                A   118    	ld sp,ix
041220 DDE1                A   119    	pop ix
041222 C9                  A   120    	ret	
                           A   121    
041223                     A   122    _mos_fgetc:
041223 DDE5                A   123    	push ix
041225 DD210000 00         A   124    	ld ix,0
04122A DD39                A   125    	add ix, sp
                           A   126    	
04122C DD4E06              A   127    	ld c, (ix+6)	; filehandle
04122F 3E0C                A   128    	ld a, mos_fgetc
041231 5BCF                A   129    	rst.lil 08h		; returns character in A
                           A   130    	
041233 DDF9                A   131    	ld sp,ix
041235 DDE1                A   132    	pop ix
041237 C9                  A   133    	ret	
                           A   134    
041238                     A   135    _mos_fread:
041238 DDE5                A   136    	push ix
04123A DD210000 00         A   137    	ld ix,0
04123F DD39                A   138    	add ix,sp
                           A   139    
041241 DD4E06              A   140    	ld c, (ix+6)	; filehandle
041244 DD2709              A   141    	ld hl, (ix+9)	; buffer
041247 DD170C              A   142    	ld de, (ix+12)	; bytes to read
                           A   143    
04124A 3E1A                A   144    	ld a, mos_fread
04124C 5BCF                A   145    	rst.lil 08h
                           A   146    
04124E D5                  A   147    	push	de	; Move 24-bit result from DE in
04124F E1                  A   148    	pop	hl
                           A   149    
041250 DDF9                A   150    	ld sp,ix
041252 DDE1                A   151    	pop ix
041254 C9                  A   152    	ret
                           A   153    
041255                     A   154    _mos_fputc:
041255 DDE5                A   155    	push ix
041257 DD210000 00         A   156    	ld ix,0
04125C DD39                A   157    	add ix, sp
                           A   158    	
04125E DD4E06              A   159    	ld c, (ix+6)	; filehandle
041261 DD4609              A   160    	ld b, (ix+9)	; character to write
041264 3E0D                A   161    	ld a, mos_fputc
041266 5BCF                A   162    	rst.lil 08h		; returns nothing
                           A   163    	
041268 DDF9                A   164    	ld sp,ix
04126A DDE1                A   165    	pop ix
04126C C9                  A   166    	ret	
                           A   167    
04126D                     A   168    _mos_feof:
04126D DDE5                A   169    	push ix
04126F DD210000 00         A   170    	ld ix,0
041274 DD39                A   171    	add ix, sp
                           A   172    	
041276 DD4E06              A   173    	ld c, (ix+6)	; filehandle
041279 3E0E                A   174    	ld a, mos_feof
04127B 5BCF                A   175    	rst.lil 08h		; returns A: 1 at End-of-Fi
                           A   176    	
04127D DDF9                A   177    	ld sp,ix
04127F DDE1                A   178    	pop ix
041281 C9                  A   179    	ret	
                           A   180    
                           A   181    
041282                     A   182    _mos_del:
041282 DDE5                A   183    	push	ix
041284 DD210000 00         A   184    	ld 		ix,0
041289 DD39                A   185    	add 	ix, sp
                           A   186    
04128B DD2706              A   187    	ld 		hl, (ix+6)	; filename address (zer
04128E 3E05                A   188    	ld a,	mos_del
041290 5BCF                A   189    	rst.lil	08h			; save file to SD card
                           A   190    
041292 DDF9                A   191    	ld		sp,ix
041294 DDE1                A   192    	pop		ix
041296 C9                  A   193    	ret
                           A   194    	
041297                     A   195    _mos_save:
041297 DDE5                A   196    	push	ix
041299 DD210000 00         A   197    	ld 		ix,0
04129E DD39                A   198    	add 	ix, sp
                           A   199    
0412A0 DD2706              A   200    	ld 		hl, (ix+6)	; filename address (zer
0412A3 DD1709              A   201    	ld		de, (ix+9)	; address to save from
0412A6 DD070C              A   202    	ld		bc, (ix+12)	; number of bytes to sa
0412A9 3E02                A   203    	ld a,	mos_save
0412AB 5BCF                A   204    	rst.lil	08h			; save file to SD card
                           A   205    
0412AD DDF9                A   206    	ld		sp,ix
0412AF DDE1                A   207    	pop		ix
0412B1 C9                  A   208    	ret
                           A   209    
0412B2                     A   210    _mos_flseek:
0412B2 DDE5                A   211    	push	ix
0412B4 DD210000 00         A   212    	ld 		ix,0
0412B9 DD39                A   213    	add 	ix, sp
0412BB DD0706              A   214    	ld 		bc, (ix+6)	; file handle
0412BE 11000000            A   215    	ld		de, 0
0412C2 DD2709              A   216    	ld		hl, (ix+9)  ; 24 least significant 
0412C5 DD5E0C              A   217    	ld		e,  (ix+12)	; 8 most most significa
0412C8 3E1C                A   218    	ld a,	mos_flseek
0412CA 5BCF                A   219    	rst.lil	08h
0412CC DDF9                A   220    	ld		sp,ix
0412CE DDE1                A   221    	pop		ix
0412D0 C9                  A   222    	ret
                           A   223    
                           A   224    	SEGMENT DATA
                           A   225    
                           A   226    end


Errors: 0
Warnings: 0
Lines Assembled: 452
